
adventure_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008310  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000017c  080085b0  080085b0  000185b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0800872c  0800872c  0001872c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08008734  08008734  00018734  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08008738  08008738  00018738  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000012c  24000000  0800873c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000310  2400012c  08008868  0002012c  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  2400043c  08008868  0002043c  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002015a  2**0
                  CONTENTS, READONLY
 11 .debug_info   00011ce9  00000000  00000000  0002019d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002027  00000000  00000000  00031e86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000c70  00000000  00000000  00033eb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 0000099d  00000000  00000000  00034b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000381a5  00000000  00000000  000354bd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00011140  00000000  00000000  0006d662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0016cb35  00000000  00000000  0007e7a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  00003988  00000000  00000000  001eb2d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000068  00000000  00000000  001eec60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400012c 	.word	0x2400012c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08008598 	.word	0x08008598

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000130 	.word	0x24000130
 80002dc:	08008598 	.word	0x08008598

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <strcmp>:
 80002f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002f8:	2a01      	cmp	r2, #1
 80002fa:	bf28      	it	cs
 80002fc:	429a      	cmpcs	r2, r3
 80002fe:	d0f7      	beq.n	80002f0 <strcmp>
 8000300:	1ad0      	subs	r0, r2, r3
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003c4:	f000 b970 	b.w	80006a8 <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9e08      	ldr	r6, [sp, #32]
 80003e6:	460d      	mov	r5, r1
 80003e8:	4604      	mov	r4, r0
 80003ea:	460f      	mov	r7, r1
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d14a      	bne.n	8000486 <__udivmoddi4+0xa6>
 80003f0:	428a      	cmp	r2, r1
 80003f2:	4694      	mov	ip, r2
 80003f4:	d965      	bls.n	80004c2 <__udivmoddi4+0xe2>
 80003f6:	fab2 f382 	clz	r3, r2
 80003fa:	b143      	cbz	r3, 800040e <__udivmoddi4+0x2e>
 80003fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000400:	f1c3 0220 	rsb	r2, r3, #32
 8000404:	409f      	lsls	r7, r3
 8000406:	fa20 f202 	lsr.w	r2, r0, r2
 800040a:	4317      	orrs	r7, r2
 800040c:	409c      	lsls	r4, r3
 800040e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000412:	fa1f f58c 	uxth.w	r5, ip
 8000416:	fbb7 f1fe 	udiv	r1, r7, lr
 800041a:	0c22      	lsrs	r2, r4, #16
 800041c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000420:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000424:	fb01 f005 	mul.w	r0, r1, r5
 8000428:	4290      	cmp	r0, r2
 800042a:	d90a      	bls.n	8000442 <__udivmoddi4+0x62>
 800042c:	eb1c 0202 	adds.w	r2, ip, r2
 8000430:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000434:	f080 811c 	bcs.w	8000670 <__udivmoddi4+0x290>
 8000438:	4290      	cmp	r0, r2
 800043a:	f240 8119 	bls.w	8000670 <__udivmoddi4+0x290>
 800043e:	3902      	subs	r1, #2
 8000440:	4462      	add	r2, ip
 8000442:	1a12      	subs	r2, r2, r0
 8000444:	b2a4      	uxth	r4, r4
 8000446:	fbb2 f0fe 	udiv	r0, r2, lr
 800044a:	fb0e 2210 	mls	r2, lr, r0, r2
 800044e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000452:	fb00 f505 	mul.w	r5, r0, r5
 8000456:	42a5      	cmp	r5, r4
 8000458:	d90a      	bls.n	8000470 <__udivmoddi4+0x90>
 800045a:	eb1c 0404 	adds.w	r4, ip, r4
 800045e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000462:	f080 8107 	bcs.w	8000674 <__udivmoddi4+0x294>
 8000466:	42a5      	cmp	r5, r4
 8000468:	f240 8104 	bls.w	8000674 <__udivmoddi4+0x294>
 800046c:	4464      	add	r4, ip
 800046e:	3802      	subs	r0, #2
 8000470:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000474:	1b64      	subs	r4, r4, r5
 8000476:	2100      	movs	r1, #0
 8000478:	b11e      	cbz	r6, 8000482 <__udivmoddi4+0xa2>
 800047a:	40dc      	lsrs	r4, r3
 800047c:	2300      	movs	r3, #0
 800047e:	e9c6 4300 	strd	r4, r3, [r6]
 8000482:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000486:	428b      	cmp	r3, r1
 8000488:	d908      	bls.n	800049c <__udivmoddi4+0xbc>
 800048a:	2e00      	cmp	r6, #0
 800048c:	f000 80ed 	beq.w	800066a <__udivmoddi4+0x28a>
 8000490:	2100      	movs	r1, #0
 8000492:	e9c6 0500 	strd	r0, r5, [r6]
 8000496:	4608      	mov	r0, r1
 8000498:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049c:	fab3 f183 	clz	r1, r3
 80004a0:	2900      	cmp	r1, #0
 80004a2:	d149      	bne.n	8000538 <__udivmoddi4+0x158>
 80004a4:	42ab      	cmp	r3, r5
 80004a6:	d302      	bcc.n	80004ae <__udivmoddi4+0xce>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	f200 80f8 	bhi.w	800069e <__udivmoddi4+0x2be>
 80004ae:	1a84      	subs	r4, r0, r2
 80004b0:	eb65 0203 	sbc.w	r2, r5, r3
 80004b4:	2001      	movs	r0, #1
 80004b6:	4617      	mov	r7, r2
 80004b8:	2e00      	cmp	r6, #0
 80004ba:	d0e2      	beq.n	8000482 <__udivmoddi4+0xa2>
 80004bc:	e9c6 4700 	strd	r4, r7, [r6]
 80004c0:	e7df      	b.n	8000482 <__udivmoddi4+0xa2>
 80004c2:	b902      	cbnz	r2, 80004c6 <__udivmoddi4+0xe6>
 80004c4:	deff      	udf	#255	; 0xff
 80004c6:	fab2 f382 	clz	r3, r2
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	f040 8090 	bne.w	80005f0 <__udivmoddi4+0x210>
 80004d0:	1a8a      	subs	r2, r1, r2
 80004d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d6:	fa1f fe8c 	uxth.w	lr, ip
 80004da:	2101      	movs	r1, #1
 80004dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004e0:	fb07 2015 	mls	r0, r7, r5, r2
 80004e4:	0c22      	lsrs	r2, r4, #16
 80004e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ea:	fb0e f005 	mul.w	r0, lr, r5
 80004ee:	4290      	cmp	r0, r2
 80004f0:	d908      	bls.n	8000504 <__udivmoddi4+0x124>
 80004f2:	eb1c 0202 	adds.w	r2, ip, r2
 80004f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004fa:	d202      	bcs.n	8000502 <__udivmoddi4+0x122>
 80004fc:	4290      	cmp	r0, r2
 80004fe:	f200 80cb 	bhi.w	8000698 <__udivmoddi4+0x2b8>
 8000502:	4645      	mov	r5, r8
 8000504:	1a12      	subs	r2, r2, r0
 8000506:	b2a4      	uxth	r4, r4
 8000508:	fbb2 f0f7 	udiv	r0, r2, r7
 800050c:	fb07 2210 	mls	r2, r7, r0, r2
 8000510:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000514:	fb0e fe00 	mul.w	lr, lr, r0
 8000518:	45a6      	cmp	lr, r4
 800051a:	d908      	bls.n	800052e <__udivmoddi4+0x14e>
 800051c:	eb1c 0404 	adds.w	r4, ip, r4
 8000520:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000524:	d202      	bcs.n	800052c <__udivmoddi4+0x14c>
 8000526:	45a6      	cmp	lr, r4
 8000528:	f200 80bb 	bhi.w	80006a2 <__udivmoddi4+0x2c2>
 800052c:	4610      	mov	r0, r2
 800052e:	eba4 040e 	sub.w	r4, r4, lr
 8000532:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000536:	e79f      	b.n	8000478 <__udivmoddi4+0x98>
 8000538:	f1c1 0720 	rsb	r7, r1, #32
 800053c:	408b      	lsls	r3, r1
 800053e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000542:	ea4c 0c03 	orr.w	ip, ip, r3
 8000546:	fa05 f401 	lsl.w	r4, r5, r1
 800054a:	fa20 f307 	lsr.w	r3, r0, r7
 800054e:	40fd      	lsrs	r5, r7
 8000550:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000554:	4323      	orrs	r3, r4
 8000556:	fbb5 f8f9 	udiv	r8, r5, r9
 800055a:	fa1f fe8c 	uxth.w	lr, ip
 800055e:	fb09 5518 	mls	r5, r9, r8, r5
 8000562:	0c1c      	lsrs	r4, r3, #16
 8000564:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000568:	fb08 f50e 	mul.w	r5, r8, lr
 800056c:	42a5      	cmp	r5, r4
 800056e:	fa02 f201 	lsl.w	r2, r2, r1
 8000572:	fa00 f001 	lsl.w	r0, r0, r1
 8000576:	d90b      	bls.n	8000590 <__udivmoddi4+0x1b0>
 8000578:	eb1c 0404 	adds.w	r4, ip, r4
 800057c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000580:	f080 8088 	bcs.w	8000694 <__udivmoddi4+0x2b4>
 8000584:	42a5      	cmp	r5, r4
 8000586:	f240 8085 	bls.w	8000694 <__udivmoddi4+0x2b4>
 800058a:	f1a8 0802 	sub.w	r8, r8, #2
 800058e:	4464      	add	r4, ip
 8000590:	1b64      	subs	r4, r4, r5
 8000592:	b29d      	uxth	r5, r3
 8000594:	fbb4 f3f9 	udiv	r3, r4, r9
 8000598:	fb09 4413 	mls	r4, r9, r3, r4
 800059c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80005a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80005a4:	45a6      	cmp	lr, r4
 80005a6:	d908      	bls.n	80005ba <__udivmoddi4+0x1da>
 80005a8:	eb1c 0404 	adds.w	r4, ip, r4
 80005ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005b0:	d26c      	bcs.n	800068c <__udivmoddi4+0x2ac>
 80005b2:	45a6      	cmp	lr, r4
 80005b4:	d96a      	bls.n	800068c <__udivmoddi4+0x2ac>
 80005b6:	3b02      	subs	r3, #2
 80005b8:	4464      	add	r4, ip
 80005ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005be:	fba3 9502 	umull	r9, r5, r3, r2
 80005c2:	eba4 040e 	sub.w	r4, r4, lr
 80005c6:	42ac      	cmp	r4, r5
 80005c8:	46c8      	mov	r8, r9
 80005ca:	46ae      	mov	lr, r5
 80005cc:	d356      	bcc.n	800067c <__udivmoddi4+0x29c>
 80005ce:	d053      	beq.n	8000678 <__udivmoddi4+0x298>
 80005d0:	b156      	cbz	r6, 80005e8 <__udivmoddi4+0x208>
 80005d2:	ebb0 0208 	subs.w	r2, r0, r8
 80005d6:	eb64 040e 	sbc.w	r4, r4, lr
 80005da:	fa04 f707 	lsl.w	r7, r4, r7
 80005de:	40ca      	lsrs	r2, r1
 80005e0:	40cc      	lsrs	r4, r1
 80005e2:	4317      	orrs	r7, r2
 80005e4:	e9c6 7400 	strd	r7, r4, [r6]
 80005e8:	4618      	mov	r0, r3
 80005ea:	2100      	movs	r1, #0
 80005ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005f0:	f1c3 0120 	rsb	r1, r3, #32
 80005f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005f8:	fa20 f201 	lsr.w	r2, r0, r1
 80005fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000600:	409d      	lsls	r5, r3
 8000602:	432a      	orrs	r2, r5
 8000604:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000608:	fa1f fe8c 	uxth.w	lr, ip
 800060c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000610:	fb07 1510 	mls	r5, r7, r0, r1
 8000614:	0c11      	lsrs	r1, r2, #16
 8000616:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800061a:	fb00 f50e 	mul.w	r5, r0, lr
 800061e:	428d      	cmp	r5, r1
 8000620:	fa04 f403 	lsl.w	r4, r4, r3
 8000624:	d908      	bls.n	8000638 <__udivmoddi4+0x258>
 8000626:	eb1c 0101 	adds.w	r1, ip, r1
 800062a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800062e:	d22f      	bcs.n	8000690 <__udivmoddi4+0x2b0>
 8000630:	428d      	cmp	r5, r1
 8000632:	d92d      	bls.n	8000690 <__udivmoddi4+0x2b0>
 8000634:	3802      	subs	r0, #2
 8000636:	4461      	add	r1, ip
 8000638:	1b49      	subs	r1, r1, r5
 800063a:	b292      	uxth	r2, r2
 800063c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000640:	fb07 1115 	mls	r1, r7, r5, r1
 8000644:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000648:	fb05 f10e 	mul.w	r1, r5, lr
 800064c:	4291      	cmp	r1, r2
 800064e:	d908      	bls.n	8000662 <__udivmoddi4+0x282>
 8000650:	eb1c 0202 	adds.w	r2, ip, r2
 8000654:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000658:	d216      	bcs.n	8000688 <__udivmoddi4+0x2a8>
 800065a:	4291      	cmp	r1, r2
 800065c:	d914      	bls.n	8000688 <__udivmoddi4+0x2a8>
 800065e:	3d02      	subs	r5, #2
 8000660:	4462      	add	r2, ip
 8000662:	1a52      	subs	r2, r2, r1
 8000664:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000668:	e738      	b.n	80004dc <__udivmoddi4+0xfc>
 800066a:	4631      	mov	r1, r6
 800066c:	4630      	mov	r0, r6
 800066e:	e708      	b.n	8000482 <__udivmoddi4+0xa2>
 8000670:	4639      	mov	r1, r7
 8000672:	e6e6      	b.n	8000442 <__udivmoddi4+0x62>
 8000674:	4610      	mov	r0, r2
 8000676:	e6fb      	b.n	8000470 <__udivmoddi4+0x90>
 8000678:	4548      	cmp	r0, r9
 800067a:	d2a9      	bcs.n	80005d0 <__udivmoddi4+0x1f0>
 800067c:	ebb9 0802 	subs.w	r8, r9, r2
 8000680:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000684:	3b01      	subs	r3, #1
 8000686:	e7a3      	b.n	80005d0 <__udivmoddi4+0x1f0>
 8000688:	4645      	mov	r5, r8
 800068a:	e7ea      	b.n	8000662 <__udivmoddi4+0x282>
 800068c:	462b      	mov	r3, r5
 800068e:	e794      	b.n	80005ba <__udivmoddi4+0x1da>
 8000690:	4640      	mov	r0, r8
 8000692:	e7d1      	b.n	8000638 <__udivmoddi4+0x258>
 8000694:	46d0      	mov	r8, sl
 8000696:	e77b      	b.n	8000590 <__udivmoddi4+0x1b0>
 8000698:	3d02      	subs	r5, #2
 800069a:	4462      	add	r2, ip
 800069c:	e732      	b.n	8000504 <__udivmoddi4+0x124>
 800069e:	4608      	mov	r0, r1
 80006a0:	e70a      	b.n	80004b8 <__udivmoddi4+0xd8>
 80006a2:	4464      	add	r4, ip
 80006a4:	3802      	subs	r0, #2
 80006a6:	e742      	b.n	800052e <__udivmoddi4+0x14e>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <command_callback>:

char buffer[32] = "\0";
char car;

// Fonction pour interpreter une actions
void command_callback(char* action) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart3, (uint8_t *)action, strlen(action), HAL_MAX_DELAY);
 80006b4:	6878      	ldr	r0, [r7, #4]
 80006b6:	f7ff fe13 	bl	80002e0 <strlen>
 80006ba:	4603      	mov	r3, r0
 80006bc:	b29a      	uxth	r2, r3
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c2:	6879      	ldr	r1, [r7, #4]
 80006c4:	4861      	ldr	r0, [pc, #388]	; (800084c <command_callback+0x1a0>)
 80006c6:	f006 f8cd 	bl	8006864 <HAL_UART_Transmit>
    if (strcmp(*action, 'g') == 0) {
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2167      	movs	r1, #103	; 0x67
 80006d0:	4618      	mov	r0, r3
 80006d2:	f7ff fe0d 	bl	80002f0 <strcmp>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d160      	bne.n	800079e <command_callback+0xf2>
        action += 3;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	3303      	adds	r3, #3
 80006e0:	607b      	str	r3, [r7, #4]
		if (*action == 'n') {
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	781b      	ldrb	r3, [r3, #0]
 80006e6:	2b6e      	cmp	r3, #110	; 0x6e
 80006e8:	d113      	bne.n	8000712 <command_callback+0x66>
				if ((grille[ligne][colonne] & NORTH) > 0 ) {
 80006ea:	4b59      	ldr	r3, [pc, #356]	; (8000850 <command_callback+0x1a4>)
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4b59      	ldr	r3, [pc, #356]	; (8000854 <command_callback+0x1a8>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	4959      	ldr	r1, [pc, #356]	; (8000858 <command_callback+0x1ac>)
 80006f4:	00d2      	lsls	r2, r2, #3
 80006f6:	4413      	add	r3, r2
 80006f8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80006fc:	f003 0301 	and.w	r3, r3, #1
 8000700:	2b00      	cmp	r3, #0
 8000702:	f340 809e 	ble.w	8000842 <command_callback+0x196>
					ligne--;
 8000706:	4b52      	ldr	r3, [pc, #328]	; (8000850 <command_callback+0x1a4>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	3b01      	subs	r3, #1
 800070c:	4a50      	ldr	r2, [pc, #320]	; (8000850 <command_callback+0x1a4>)
 800070e:	6013      	str	r3, [r2, #0]
    } else if (*action == 'd') {

    	HAL_UART_Transmit(&huart3, (uint8_t *)chaine_temporaire, strlen(chaine_temporaire), HAL_MAX_DELAY);

    }
}
 8000710:	e097      	b.n	8000842 <command_callback+0x196>
		} else if (*action == 'e') {
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	781b      	ldrb	r3, [r3, #0]
 8000716:	2b65      	cmp	r3, #101	; 0x65
 8000718:	d113      	bne.n	8000742 <command_callback+0x96>
				if ((grille[ligne][colonne] & EAST) > 0 ) {
 800071a:	4b4d      	ldr	r3, [pc, #308]	; (8000850 <command_callback+0x1a4>)
 800071c:	681a      	ldr	r2, [r3, #0]
 800071e:	4b4d      	ldr	r3, [pc, #308]	; (8000854 <command_callback+0x1a8>)
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	494d      	ldr	r1, [pc, #308]	; (8000858 <command_callback+0x1ac>)
 8000724:	00d2      	lsls	r2, r2, #3
 8000726:	4413      	add	r3, r2
 8000728:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	2b00      	cmp	r3, #0
 8000732:	f340 8086 	ble.w	8000842 <command_callback+0x196>
					colonne++;
 8000736:	4b47      	ldr	r3, [pc, #284]	; (8000854 <command_callback+0x1a8>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	3301      	adds	r3, #1
 800073c:	4a45      	ldr	r2, [pc, #276]	; (8000854 <command_callback+0x1a8>)
 800073e:	6013      	str	r3, [r2, #0]
}
 8000740:	e07f      	b.n	8000842 <command_callback+0x196>
		} else if (*action == 's') {
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b73      	cmp	r3, #115	; 0x73
 8000748:	d112      	bne.n	8000770 <command_callback+0xc4>
				if ((grille[ligne][colonne] & SOUTH) > 0 ){
 800074a:	4b41      	ldr	r3, [pc, #260]	; (8000850 <command_callback+0x1a4>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b41      	ldr	r3, [pc, #260]	; (8000854 <command_callback+0x1a8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	4941      	ldr	r1, [pc, #260]	; (8000858 <command_callback+0x1ac>)
 8000754:	00d2      	lsls	r2, r2, #3
 8000756:	4413      	add	r3, r2
 8000758:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800075c:	f003 0304 	and.w	r3, r3, #4
 8000760:	2b00      	cmp	r3, #0
 8000762:	dd6e      	ble.n	8000842 <command_callback+0x196>
					ligne++;
 8000764:	4b3a      	ldr	r3, [pc, #232]	; (8000850 <command_callback+0x1a4>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	3301      	adds	r3, #1
 800076a:	4a39      	ldr	r2, [pc, #228]	; (8000850 <command_callback+0x1a4>)
 800076c:	6013      	str	r3, [r2, #0]
}
 800076e:	e068      	b.n	8000842 <command_callback+0x196>
		} else if (*action == 'w') {
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	781b      	ldrb	r3, [r3, #0]
 8000774:	2b77      	cmp	r3, #119	; 0x77
 8000776:	d164      	bne.n	8000842 <command_callback+0x196>
				if ((grille[ligne][colonne] & WEST) > 0 ) {
 8000778:	4b35      	ldr	r3, [pc, #212]	; (8000850 <command_callback+0x1a4>)
 800077a:	681a      	ldr	r2, [r3, #0]
 800077c:	4b35      	ldr	r3, [pc, #212]	; (8000854 <command_callback+0x1a8>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4935      	ldr	r1, [pc, #212]	; (8000858 <command_callback+0x1ac>)
 8000782:	00d2      	lsls	r2, r2, #3
 8000784:	4413      	add	r3, r2
 8000786:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800078a:	f003 0308 	and.w	r3, r3, #8
 800078e:	2b00      	cmp	r3, #0
 8000790:	dd57      	ble.n	8000842 <command_callback+0x196>
					colonne--;
 8000792:	4b30      	ldr	r3, [pc, #192]	; (8000854 <command_callback+0x1a8>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	3b01      	subs	r3, #1
 8000798:	4a2e      	ldr	r2, [pc, #184]	; (8000854 <command_callback+0x1a8>)
 800079a:	6013      	str	r3, [r2, #0]
}
 800079c:	e051      	b.n	8000842 <command_callback+0x196>
    } else if (*action == 'c') {
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	781b      	ldrb	r3, [r3, #0]
 80007a2:	2b63      	cmp	r3, #99	; 0x63
 80007a4:	d12f      	bne.n	8000806 <command_callback+0x15a>
        action += 9;
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	3309      	adds	r3, #9
 80007aa:	607b      	str	r3, [r7, #4]
		char c = valeurs[ligne][colonne];
 80007ac:	4b28      	ldr	r3, [pc, #160]	; (8000850 <command_callback+0x1a4>)
 80007ae:	681a      	ldr	r2, [r3, #0]
 80007b0:	4b28      	ldr	r3, [pc, #160]	; (8000854 <command_callback+0x1a8>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4929      	ldr	r1, [pc, #164]	; (800085c <command_callback+0x1b0>)
 80007b6:	00d2      	lsls	r2, r2, #3
 80007b8:	440a      	add	r2, r1
 80007ba:	4413      	add	r3, r2
 80007bc:	781b      	ldrb	r3, [r3, #0]
 80007be:	73fb      	strb	r3, [r7, #15]
		if (*action == 'i') {
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	781b      	ldrb	r3, [r3, #0]
 80007c4:	2b69      	cmp	r3, #105	; 0x69
 80007c6:	d10a      	bne.n	80007de <command_callback+0x132>
			chaine_temporaire[compteur_temp] = c;
 80007c8:	4b25      	ldr	r3, [pc, #148]	; (8000860 <command_callback+0x1b4>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4925      	ldr	r1, [pc, #148]	; (8000864 <command_callback+0x1b8>)
 80007ce:	7bfa      	ldrb	r2, [r7, #15]
 80007d0:	54ca      	strb	r2, [r1, r3]
			compteur_temp++;
 80007d2:	4b23      	ldr	r3, [pc, #140]	; (8000860 <command_callback+0x1b4>)
 80007d4:	681b      	ldr	r3, [r3, #0]
 80007d6:	3301      	adds	r3, #1
 80007d8:	4a21      	ldr	r2, [pc, #132]	; (8000860 <command_callback+0x1b4>)
 80007da:	6013      	str	r3, [r2, #0]
}
 80007dc:	e031      	b.n	8000842 <command_callback+0x196>
		} else if (*action == 'a') {
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b61      	cmp	r3, #97	; 0x61
 80007e4:	d12d      	bne.n	8000842 <command_callback+0x196>
			chaine_temporaire[compteur_temp] = toupper(c);
 80007e6:	7bfb      	ldrb	r3, [r7, #15]
 80007e8:	4618      	mov	r0, r3
 80007ea:	f007 fa27 	bl	8007c3c <toupper>
 80007ee:	4602      	mov	r2, r0
 80007f0:	4b1b      	ldr	r3, [pc, #108]	; (8000860 <command_callback+0x1b4>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	b2d1      	uxtb	r1, r2
 80007f6:	4a1b      	ldr	r2, [pc, #108]	; (8000864 <command_callback+0x1b8>)
 80007f8:	54d1      	strb	r1, [r2, r3]
			compteur_temp++;
 80007fa:	4b19      	ldr	r3, [pc, #100]	; (8000860 <command_callback+0x1b4>)
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	3301      	adds	r3, #1
 8000800:	4a17      	ldr	r2, [pc, #92]	; (8000860 <command_callback+0x1b4>)
 8000802:	6013      	str	r3, [r2, #0]
}
 8000804:	e01d      	b.n	8000842 <command_callback+0x196>
    } else if (*action == 'u') {
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	2b75      	cmp	r3, #117	; 0x75
 800080c:	d10a      	bne.n	8000824 <command_callback+0x178>
    	compteur_temp--;
 800080e:	4b14      	ldr	r3, [pc, #80]	; (8000860 <command_callback+0x1b4>)
 8000810:	681b      	ldr	r3, [r3, #0]
 8000812:	3b01      	subs	r3, #1
 8000814:	4a12      	ldr	r2, [pc, #72]	; (8000860 <command_callback+0x1b4>)
 8000816:	6013      	str	r3, [r2, #0]
    	chaine_temporaire[compteur_temp] = '\0';
 8000818:	4b11      	ldr	r3, [pc, #68]	; (8000860 <command_callback+0x1b4>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a11      	ldr	r2, [pc, #68]	; (8000864 <command_callback+0x1b8>)
 800081e:	2100      	movs	r1, #0
 8000820:	54d1      	strb	r1, [r2, r3]
}
 8000822:	e00e      	b.n	8000842 <command_callback+0x196>
    } else if (*action == 'd') {
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	781b      	ldrb	r3, [r3, #0]
 8000828:	2b64      	cmp	r3, #100	; 0x64
 800082a:	d10a      	bne.n	8000842 <command_callback+0x196>
    	HAL_UART_Transmit(&huart3, (uint8_t *)chaine_temporaire, strlen(chaine_temporaire), HAL_MAX_DELAY);
 800082c:	480d      	ldr	r0, [pc, #52]	; (8000864 <command_callback+0x1b8>)
 800082e:	f7ff fd57 	bl	80002e0 <strlen>
 8000832:	4603      	mov	r3, r0
 8000834:	b29a      	uxth	r2, r3
 8000836:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800083a:	490a      	ldr	r1, [pc, #40]	; (8000864 <command_callback+0x1b8>)
 800083c:	4803      	ldr	r0, [pc, #12]	; (800084c <command_callback+0x1a0>)
 800083e:	f006 f811 	bl	8006864 <HAL_UART_Transmit>
}
 8000842:	bf00      	nop
 8000844:	3710      	adds	r7, #16
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	240001ac 	.word	0x240001ac
 8000850:	24000240 	.word	0x24000240
 8000854:	24000000 	.word	0x24000000
 8000858:	24000004 	.word	0x24000004
 800085c:	240000a4 	.word	0x240000a4
 8000860:	24000284 	.word	0x24000284
 8000864:	24000288 	.word	0x24000288

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800086e:	f000 ff93 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000872:	f000 f851 	bl	8000918 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000876:	f000 f977 	bl	8000b68 <MX_GPIO_Init>
  MX_ADC3_Init();
 800087a:	f000 f8c5 	bl	8000a08 <MX_ADC3_Init>
  MX_USART3_UART_Init();
 800087e:	f000 f927 	bl	8000ad0 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Transmit(&huart3, (uint8_t *)"Beginning...\n", strlen("Beginning...\n"), HAL_MAX_DELAY);

	sprintf(str,"Beginning...\n");
 8000882:	4920      	ldr	r1, [pc, #128]	; (8000904 <main+0x9c>)
 8000884:	4820      	ldr	r0, [pc, #128]	; (8000908 <main+0xa0>)
 8000886:	f007 f9e3 	bl	8007c50 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *)str, strlen(str), HAL_MAX_DELAY);
 800088a:	481f      	ldr	r0, [pc, #124]	; (8000908 <main+0xa0>)
 800088c:	f7ff fd28 	bl	80002e0 <strlen>
 8000890:	4603      	mov	r3, r0
 8000892:	b29a      	uxth	r2, r3
 8000894:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000898:	491b      	ldr	r1, [pc, #108]	; (8000908 <main+0xa0>)
 800089a:	481c      	ldr	r0, [pc, #112]	; (800090c <main+0xa4>)
 800089c:	f005 ffe2 	bl	8006864 <HAL_UART_Transmit>

	memset(buffer, 0, sizeof(buffer));
 80008a0:	2220      	movs	r2, #32
 80008a2:	2100      	movs	r1, #0
 80008a4:	481a      	ldr	r0, [pc, #104]	; (8000910 <main+0xa8>)
 80008a6:	f007 f9f3 	bl	8007c90 <memset>

	int compteur = 0;
 80008aa:	2300      	movs	r3, #0
 80008ac:	607b      	str	r3, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	if (HAL_UART_Receive(&huart3, (uint8_t *)&car, 1, 100) == HAL_OK){
 80008ae:	2364      	movs	r3, #100	; 0x64
 80008b0:	2201      	movs	r2, #1
 80008b2:	4918      	ldr	r1, [pc, #96]	; (8000914 <main+0xac>)
 80008b4:	4815      	ldr	r0, [pc, #84]	; (800090c <main+0xa4>)
 80008b6:	f006 f863 	bl	8006980 <HAL_UART_Receive>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d1f6      	bne.n	80008ae <main+0x46>
		//HAL_UART_Transmit(&huart3, (uint8_t *)&car, 1, HAL_MAX_DELAY);
		buffer[compteur] = tolower(car);
 80008c0:	4b14      	ldr	r3, [pc, #80]	; (8000914 <main+0xac>)
 80008c2:	781b      	ldrb	r3, [r3, #0]
 80008c4:	4618      	mov	r0, r3
 80008c6:	f007 f9af 	bl	8007c28 <tolower>
 80008ca:	4603      	mov	r3, r0
 80008cc:	b2d9      	uxtb	r1, r3
 80008ce:	4a10      	ldr	r2, [pc, #64]	; (8000910 <main+0xa8>)
 80008d0:	687b      	ldr	r3, [r7, #4]
 80008d2:	4413      	add	r3, r2
 80008d4:	460a      	mov	r2, r1
 80008d6:	701a      	strb	r2, [r3, #0]
		compteur++;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3301      	adds	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
		if (car == '\n' || car == '\r'){
 80008de:	4b0d      	ldr	r3, [pc, #52]	; (8000914 <main+0xac>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b0a      	cmp	r3, #10
 80008e4:	d003      	beq.n	80008ee <main+0x86>
 80008e6:	4b0b      	ldr	r3, [pc, #44]	; (8000914 <main+0xac>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	2b0d      	cmp	r3, #13
 80008ec:	d1df      	bne.n	80008ae <main+0x46>
			command_callback(buffer);
 80008ee:	4808      	ldr	r0, [pc, #32]	; (8000910 <main+0xa8>)
 80008f0:	f7ff fedc 	bl	80006ac <command_callback>
			memset(buffer, 0, sizeof(buffer));
 80008f4:	2220      	movs	r2, #32
 80008f6:	2100      	movs	r1, #0
 80008f8:	4805      	ldr	r0, [pc, #20]	; (8000910 <main+0xa8>)
 80008fa:	f007 f9c9 	bl	8007c90 <memset>
			compteur = 0;
 80008fe:	2300      	movs	r3, #0
 8000900:	607b      	str	r3, [r7, #4]
	if (HAL_UART_Receive(&huart3, (uint8_t *)&car, 1, 100) == HAL_OK){
 8000902:	e7d4      	b.n	80008ae <main+0x46>
 8000904:	080085b0 	.word	0x080085b0
 8000908:	24000244 	.word	0x24000244
 800090c:	240001ac 	.word	0x240001ac
 8000910:	240002c8 	.word	0x240002c8
 8000914:	240002e8 	.word	0x240002e8

08000918 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b09c      	sub	sp, #112	; 0x70
 800091c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800091e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000922:	224c      	movs	r2, #76	; 0x4c
 8000924:	2100      	movs	r1, #0
 8000926:	4618      	mov	r0, r3
 8000928:	f007 f9b2 	bl	8007c90 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800092c:	1d3b      	adds	r3, r7, #4
 800092e:	2220      	movs	r2, #32
 8000930:	2100      	movs	r1, #0
 8000932:	4618      	mov	r0, r3
 8000934:	f007 f9ac 	bl	8007c90 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000938:	2002      	movs	r0, #2
 800093a:	f002 fa25 	bl	8002d88 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800093e:	2300      	movs	r3, #0
 8000940:	603b      	str	r3, [r7, #0]
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <SystemClock_Config+0xe4>)
 8000944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000946:	4a2d      	ldr	r2, [pc, #180]	; (80009fc <SystemClock_Config+0xe4>)
 8000948:	f023 0301 	bic.w	r3, r3, #1
 800094c:	62d3      	str	r3, [r2, #44]	; 0x2c
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <SystemClock_Config+0xe4>)
 8000950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000952:	f003 0301 	and.w	r3, r3, #1
 8000956:	603b      	str	r3, [r7, #0]
 8000958:	4b29      	ldr	r3, [pc, #164]	; (8000a00 <SystemClock_Config+0xe8>)
 800095a:	699b      	ldr	r3, [r3, #24]
 800095c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000960:	4a27      	ldr	r2, [pc, #156]	; (8000a00 <SystemClock_Config+0xe8>)
 8000962:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000966:	6193      	str	r3, [r2, #24]
 8000968:	4b25      	ldr	r3, [pc, #148]	; (8000a00 <SystemClock_Config+0xe8>)
 800096a:	699b      	ldr	r3, [r3, #24]
 800096c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000970:	603b      	str	r3, [r7, #0]
 8000972:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000974:	bf00      	nop
 8000976:	4b22      	ldr	r3, [pc, #136]	; (8000a00 <SystemClock_Config+0xe8>)
 8000978:	699b      	ldr	r3, [r3, #24]
 800097a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800097e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000982:	d1f8      	bne.n	8000976 <SystemClock_Config+0x5e>

  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000984:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <SystemClock_Config+0xec>)
 8000986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000988:	f023 0303 	bic.w	r3, r3, #3
 800098c:	4a1d      	ldr	r2, [pc, #116]	; (8000a04 <SystemClock_Config+0xec>)
 800098e:	f043 0302 	orr.w	r3, r3, #2
 8000992:	6293      	str	r3, [r2, #40]	; 0x28

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000994:	2303      	movs	r3, #3
 8000996:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000998:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800099c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 800099e:	2301      	movs	r3, #1
 80009a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009a2:	2340      	movs	r3, #64	; 0x40
 80009a4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009a6:	2300      	movs	r3, #0
 80009a8:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009aa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ae:	4618      	mov	r0, r3
 80009b0:	f002 fa24 	bl	8002dfc <HAL_RCC_OscConfig>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d001      	beq.n	80009be <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80009ba:	f000 fcb1 	bl	8001320 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009be:	233f      	movs	r3, #63	; 0x3f
 80009c0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009c2:	2300      	movs	r3, #0
 80009c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009c6:	2300      	movs	r3, #0
 80009c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009ca:	2300      	movs	r3, #0
 80009cc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ce:	2300      	movs	r3, #0
 80009d0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009d2:	2340      	movs	r3, #64	; 0x40
 80009d4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009da:	2300      	movs	r3, #0
 80009dc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	2101      	movs	r1, #1
 80009e2:	4618      	mov	r0, r3
 80009e4:	f002 fe64 	bl	80036b0 <HAL_RCC_ClockConfig>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <SystemClock_Config+0xda>
  {
    Error_Handler();
 80009ee:	f000 fc97 	bl	8001320 <Error_Handler>
  }
}
 80009f2:	bf00      	nop
 80009f4:	3770      	adds	r7, #112	; 0x70
 80009f6:	46bd      	mov	sp, r7
 80009f8:	bd80      	pop	{r7, pc}
 80009fa:	bf00      	nop
 80009fc:	58000400 	.word	0x58000400
 8000a00:	58024800 	.word	0x58024800
 8000a04:	58024400 	.word	0x58024400

08000a08 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b088      	sub	sp, #32
 8000a0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a0e:	1d3b      	adds	r3, r7, #4
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
 8000a14:	605a      	str	r2, [r3, #4]
 8000a16:	609a      	str	r2, [r3, #8]
 8000a18:	60da      	str	r2, [r3, #12]
 8000a1a:	611a      	str	r2, [r3, #16]
 8000a1c:	615a      	str	r2, [r3, #20]
 8000a1e:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC3_Init 1 */

  /** Common config
  */
  hadc3.Instance = ADC3;
 8000a20:	4b27      	ldr	r3, [pc, #156]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a22:	4a28      	ldr	r2, [pc, #160]	; (8000ac4 <MX_ADC3_Init+0xbc>)
 8000a24:	601a      	str	r2, [r3, #0]
  hadc3.Init.Resolution = ADC_RESOLUTION_16B;
 8000a26:	4b26      	ldr	r3, [pc, #152]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a2c:	4b24      	ldr	r3, [pc, #144]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a2e:	2200      	movs	r2, #0
 8000a30:	60da      	str	r2, [r3, #12]
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a34:	2204      	movs	r2, #4
 8000a36:	611a      	str	r2, [r3, #16]
  hadc3.Init.LowPowerAutoWait = DISABLE;
 8000a38:	4b21      	ldr	r3, [pc, #132]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	751a      	strb	r2, [r3, #20]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000a3e:	4b20      	ldr	r3, [pc, #128]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a40:	2200      	movs	r2, #0
 8000a42:	755a      	strb	r2, [r3, #21]
  hadc3.Init.NbrOfConversion = 1;
 8000a44:	4b1e      	ldr	r3, [pc, #120]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a46:	2201      	movs	r2, #1
 8000a48:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000a4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	771a      	strb	r2, [r3, #28]
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a50:	4b1b      	ldr	r3, [pc, #108]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	625a      	str	r2, [r3, #36]	; 0x24
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a56:	4b1a      	ldr	r3, [pc, #104]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a58:	2200      	movs	r2, #0
 8000a5a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	631a      	str	r2, [r3, #48]	; 0x30
  hadc3.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a68:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a6a:	2200      	movs	r2, #0
 8000a6c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc3.Init.OversamplingMode = DISABLE;
 8000a6e:	4b14      	ldr	r3, [pc, #80]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000a76:	4812      	ldr	r0, [pc, #72]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000a78:	f001 f8ce 	bl	8001c18 <HAL_ADC_Init>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <MX_ADC3_Init+0x7e>
  {
    Error_Handler();
 8000a82:	f000 fc4d 	bl	8001320 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000a86:	4b10      	ldr	r3, [pc, #64]	; (8000ac8 <MX_ADC3_Init+0xc0>)
 8000a88:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a8a:	2306      	movs	r3, #6
 8000a8c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a8e:	2300      	movs	r3, #0
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_DIFFERENTIAL_ENDED;
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <MX_ADC3_Init+0xc4>)
 8000a94:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a96:	2304      	movs	r3, #4
 8000a98:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	61bb      	str	r3, [r7, #24]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	777b      	strb	r3, [r7, #29]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000aa2:	1d3b      	adds	r3, r7, #4
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4806      	ldr	r0, [pc, #24]	; (8000ac0 <MX_ADC3_Init+0xb8>)
 8000aa8:	f001 fa58 	bl	8001f5c <HAL_ADC_ConfigChannel>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d001      	beq.n	8000ab6 <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8000ab2:	f000 fc35 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000ab6:	bf00      	nop
 8000ab8:	3720      	adds	r7, #32
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	24000148 	.word	0x24000148
 8000ac4:	58026000 	.word	0x58026000
 8000ac8:	04300002 	.word	0x04300002
 8000acc:	47ff0000 	.word	0x47ff0000

08000ad0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	; (8000b64 <MX_USART3_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b1a:	f005 fe53 	bl	80067c4 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 fbfc 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b2c:	f006 ffb1 	bl	8007a92 <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 fbf3 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b3e:	f006 ffe6 	bl	8007b0e <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 fbea 	bl	8001320 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	; (8000b60 <MX_USART3_UART_Init+0x90>)
 8000b4e:	f006 ff67 	bl	8007a20 <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 fbe2 	bl	8001320 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	240001ac 	.word	0x240001ac
 8000b64:	40004800 	.word	0x40004800

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b090      	sub	sp, #64	; 0x40
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8000b7e:	4bbd      	ldr	r3, [pc, #756]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b84:	4abb      	ldr	r2, [pc, #748]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000b86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b8e:	4bb9      	ldr	r3, [pc, #740]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b94:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b98:	62bb      	str	r3, [r7, #40]	; 0x28
 8000b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b9c:	4bb5      	ldr	r3, [pc, #724]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ba2:	4ab4      	ldr	r2, [pc, #720]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000ba4:	f043 0302 	orr.w	r3, r3, #2
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bac:	4bb1      	ldr	r3, [pc, #708]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bb2:	f003 0302 	and.w	r3, r3, #2
 8000bb6:	627b      	str	r3, [r7, #36]	; 0x24
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  __HAL_RCC_GPIOK_CLK_ENABLE();
 8000bba:	4bae      	ldr	r3, [pc, #696]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc0:	4aac      	ldr	r2, [pc, #688]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bca:	4baa      	ldr	r3, [pc, #680]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000bd4:	623b      	str	r3, [r7, #32]
 8000bd6:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd8:	4ba6      	ldr	r3, [pc, #664]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bde:	4aa5      	ldr	r2, [pc, #660]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000be0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000be4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000be8:	4ba2      	ldr	r3, [pc, #648]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000bf2:	61fb      	str	r3, [r7, #28]
 8000bf4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bf6:	4b9f      	ldr	r3, [pc, #636]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bf8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bfc:	4a9d      	ldr	r2, [pc, #628]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000bfe:	f043 0304 	orr.w	r3, r3, #4
 8000c02:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c06:	4b9b      	ldr	r3, [pc, #620]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c08:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c0c:	f003 0304 	and.w	r3, r3, #4
 8000c10:	61bb      	str	r3, [r7, #24]
 8000c12:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c14:	4b97      	ldr	r3, [pc, #604]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1a:	4a96      	ldr	r2, [pc, #600]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c1c:	f043 0310 	orr.w	r3, r3, #16
 8000c20:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c24:	4b93      	ldr	r3, [pc, #588]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2a:	f003 0310 	and.w	r3, r3, #16
 8000c2e:	617b      	str	r3, [r7, #20]
 8000c30:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 8000c32:	4b90      	ldr	r3, [pc, #576]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c38:	4a8e      	ldr	r2, [pc, #568]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c3a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c3e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c42:	4b8c      	ldr	r3, [pc, #560]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c44:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c48:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c50:	4b88      	ldr	r3, [pc, #544]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c56:	4a87      	ldr	r2, [pc, #540]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c58:	f043 0308 	orr.w	r3, r3, #8
 8000c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c60:	4b84      	ldr	r3, [pc, #528]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c66:	f003 0308 	and.w	r3, r3, #8
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c6e:	4b81      	ldr	r3, [pc, #516]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c70:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c74:	4a7f      	ldr	r2, [pc, #508]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c7a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c7e:	4b7d      	ldr	r3, [pc, #500]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c88:	60bb      	str	r3, [r7, #8]
 8000c8a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8c:	4b79      	ldr	r3, [pc, #484]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c8e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c92:	4a78      	ldr	r2, [pc, #480]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c94:	f043 0301 	orr.w	r3, r3, #1
 8000c98:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c9c:	4b75      	ldr	r3, [pc, #468]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000c9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	607b      	str	r3, [r7, #4]
 8000ca8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000caa:	4b72      	ldr	r3, [pc, #456]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000cac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cb0:	4a70      	ldr	r2, [pc, #448]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000cb2:	f043 0320 	orr.w	r3, r3, #32
 8000cb6:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000cba:	4b6e      	ldr	r3, [pc, #440]	; (8000e74 <MX_GPIO_Init+0x30c>)
 8000cbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cc0:	f003 0320 	and.w	r3, r3, #32
 8000cc4:	603b      	str	r3, [r7, #0]
 8000cc6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cce:	486a      	ldr	r0, [pc, #424]	; (8000e78 <MX_GPIO_Init+0x310>)
 8000cd0:	f002 f840 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	2104      	movs	r1, #4
 8000cd8:	4868      	ldr	r0, [pc, #416]	; (8000e7c <MX_GPIO_Init+0x314>)
 8000cda:	f002 f83b 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LCD_RST_GPIO_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ce4:	4866      	ldr	r0, [pc, #408]	; (8000e80 <MX_GPIO_Init+0x318>)
 8000ce6:	f002 f835 	bl	8002d54 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PI6 PI5 PI4 PI7 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_7;
 8000cea:	23f0      	movs	r3, #240	; 0xf0
 8000cec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	2302      	movs	r3, #2
 8000cf0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000cfa:	230a      	movs	r3, #10
 8000cfc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000cfe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d02:	4619      	mov	r1, r3
 8000d04:	485c      	ldr	r0, [pc, #368]	; (8000e78 <MX_GPIO_Init+0x310>)
 8000d06:	f001 fe75 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN2_RX_Pin FDCAN2_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN2_RX_Pin|FDCAN2_TX_Pin;
 8000d0a:	f242 0320 	movw	r3, #8224	; 0x2020
 8000d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d10:	2302      	movs	r3, #2
 8000d12:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d14:	2300      	movs	r3, #0
 8000d16:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN2;
 8000d1c:	2309      	movs	r3, #9
 8000d1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d20:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d24:	4619      	mov	r1, r3
 8000d26:	4856      	ldr	r0, [pc, #344]	; (8000e80 <MX_GPIO_Init+0x318>)
 8000d28:	f001 fe64 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PK5 PK4 PK6 PK3
                           PK7 PK2 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_3
 8000d2c:	23fc      	movs	r3, #252	; 0xfc
 8000d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_7|GPIO_PIN_2;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	2302      	movs	r3, #2
 8000d32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d34:	2300      	movs	r3, #0
 8000d36:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000d3c:	230e      	movs	r3, #14
 8000d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOK, &GPIO_InitStruct);
 8000d40:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d44:	4619      	mov	r1, r3
 8000d46:	484f      	ldr	r0, [pc, #316]	; (8000e84 <MX_GPIO_Init+0x31c>)
 8000d48:	f001 fe54 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000d4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d52:	2302      	movs	r3, #2
 8000d54:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d56:	2300      	movs	r3, #0
 8000d58:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI2;
 8000d5e:	230a      	movs	r3, #10
 8000d60:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000d62:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d66:	4619      	mov	r1, r3
 8000d68:	4847      	ldr	r0, [pc, #284]	; (8000e88 <MX_GPIO_Init+0x320>)
 8000d6a:	f001 fe43 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D2_Pin SDIO1_D3_Pin SDIO1_CK_Pin SDIO1_D0_Pin
                           SDIO1_D1_Pin SDIO1_D7_Pin SDIO1_D6_Pin */
  GPIO_InitStruct.Pin = SDIO1_D2_Pin|SDIO1_D3_Pin|SDIO1_CK_Pin|SDIO1_D0_Pin
 8000d6e:	f44f 53fe 	mov.w	r3, #8128	; 0x1fc0
 8000d72:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |SDIO1_D1_Pin|SDIO1_D7_Pin|SDIO1_D6_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000d80:	230c      	movs	r3, #12
 8000d82:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d84:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000d88:	4619      	mov	r1, r3
 8000d8a:	4840      	ldr	r0, [pc, #256]	; (8000e8c <MX_GPIO_Init+0x324>)
 8000d8c:	f001 fe32 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PI1 PI0 PI9 PI12
                           PI14 PI15 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_9|GPIO_PIN_12
 8000d90:	f24d 2303 	movw	r3, #53763	; 0xd203
 8000d94:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d96:	2302      	movs	r3, #2
 8000d98:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000da2:	230e      	movs	r3, #14
 8000da4:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000da6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000daa:	4619      	mov	r1, r3
 8000dac:	4832      	ldr	r0, [pc, #200]	; (8000e78 <MX_GPIO_Init+0x310>)
 8000dae:	f001 fe21 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE1 PE0 PE10 PE9
                           PE11 PE12 PE15 PE8
                           PE13 PE7 PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8000db2:	f64f 7383 	movw	r3, #65411	; 0xff83
 8000db6:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_8
                          |GPIO_PIN_13|GPIO_PIN_7|GPIO_PIN_14;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000db8:	2302      	movs	r3, #2
 8000dba:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dc0:	2303      	movs	r3, #3
 8000dc2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000dc4:	230c      	movs	r3, #12
 8000dc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000dc8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4830      	ldr	r0, [pc, #192]	; (8000e90 <MX_GPIO_Init+0x328>)
 8000dd0:	f001 fe10 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000dd4:	2340      	movs	r3, #64	; 0x40
 8000dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dd8:	2302      	movs	r3, #2
 8000dda:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	2300      	movs	r3, #0
 8000dde:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000de0:	2300      	movs	r3, #0
 8000de2:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8000de4:	230a      	movs	r3, #10
 8000de6:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000de8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000dec:	4619      	mov	r1, r3
 8000dee:	4824      	ldr	r0, [pc, #144]	; (8000e80 <MX_GPIO_Init+0x318>)
 8000df0:	f001 fe00 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000df4:	2310      	movs	r3, #16
 8000df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e00:	2300      	movs	r3, #0
 8000e02:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8000e04:	2307      	movs	r3, #7
 8000e06:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e08:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	481c      	ldr	r0, [pc, #112]	; (8000e80 <MX_GPIO_Init+0x318>)
 8000e10:	f001 fdf0 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_TX_EN_Pin MII_TXD1_Pin MII_TXD0_Pin */
  GPIO_InitStruct.Pin = MII_TX_EN_Pin|MII_TXD1_Pin|MII_TXD0_Pin;
 8000e14:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8000e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e22:	2300      	movs	r3, #0
 8000e24:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e26:	230b      	movs	r3, #11
 8000e28:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e2e:	4619      	mov	r1, r3
 8000e30:	4815      	ldr	r0, [pc, #84]	; (8000e88 <MX_GPIO_Init+0x320>)
 8000e32:	f001 fddf 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DISP_Pin PJ14 PJ12 PJ13
                           PJ11 PJ10 PJ9 PJ0
                           PJ8 PJ7 PJ6 PJ1
                           PJ5 PJ3 PJ4 */
  GPIO_InitStruct.Pin = LCD_DISP_Pin|GPIO_PIN_14|GPIO_PIN_12|GPIO_PIN_13
 8000e36:	f64f 73fb 	movw	r3, #65531	; 0xfffb
 8000e3a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_0
                          |GPIO_PIN_8|GPIO_PIN_7|GPIO_PIN_6|GPIO_PIN_1
                          |GPIO_PIN_5|GPIO_PIN_3|GPIO_PIN_4;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e3c:	2302      	movs	r3, #2
 8000e3e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e40:	2300      	movs	r3, #0
 8000e42:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	2300      	movs	r3, #0
 8000e46:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000e48:	230e      	movs	r3, #14
 8000e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8000e4c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e50:	4619      	mov	r1, r3
 8000e52:	480a      	ldr	r0, [pc, #40]	; (8000e7c <MX_GPIO_Init+0x314>)
 8000e54:	f001 fdce 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000e58:	2308      	movs	r3, #8
 8000e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e60:	2300      	movs	r3, #0
 8000e62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e64:	2300      	movs	r3, #0
 8000e66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e68:	2305      	movs	r3, #5
 8000e6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000e6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000e70:	4619      	mov	r1, r3
 8000e72:	e00f      	b.n	8000e94 <MX_GPIO_Init+0x32c>
 8000e74:	58024400 	.word	0x58024400
 8000e78:	58022000 	.word	0x58022000
 8000e7c:	58022400 	.word	0x58022400
 8000e80:	58020400 	.word	0x58020400
 8000e84:	58022800 	.word	0x58022800
 8000e88:	58021800 	.word	0x58021800
 8000e8c:	58020800 	.word	0x58020800
 8000e90:	58021000 	.word	0x58021000
 8000e94:	48bc      	ldr	r0, [pc, #752]	; (8001188 <MX_GPIO_Init+0x620>)
 8000e96:	f001 fdad 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PI2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000e9a:	2304      	movs	r3, #4
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e9e:	2302      	movs	r3, #2
 8000ea0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000eaa:	2305      	movs	r3, #5
 8000eac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8000eae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	48b5      	ldr	r0, [pc, #724]	; (800118c <MX_GPIO_Init+0x624>)
 8000eb6:	f001 fd9d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000eba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ed0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ed4:	4619      	mov	r1, r3
 8000ed6:	48ae      	ldr	r0, [pc, #696]	; (8001190 <MX_GPIO_Init+0x628>)
 8000ed8:	f001 fd8c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : FDCAN1_RX_Pin FDCAN1_TX_Pin */
  GPIO_InitStruct.Pin = FDCAN1_RX_Pin|FDCAN1_TX_Pin;
 8000edc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ee2:	2302      	movs	r3, #2
 8000ee4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eea:	2300      	movs	r3, #0
 8000eec:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000eee:	2309      	movs	r3, #9
 8000ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8000ef2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	48a5      	ldr	r0, [pc, #660]	; (8001190 <MX_GPIO_Init+0x628>)
 8000efa:	f001 fd7b 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_TXD3_Pin */
  GPIO_InitStruct.Pin = MII_TXD3_Pin;
 8000efe:	2304      	movs	r3, #4
 8000f00:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f02:	2302      	movs	r3, #2
 8000f04:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f06:	2300      	movs	r3, #0
 8000f08:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000f0e:	230b      	movs	r3, #11
 8000f10:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_TXD3_GPIO_Port, &GPIO_InitStruct);
 8000f12:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f16:	4619      	mov	r1, r3
 8000f18:	489e      	ldr	r0, [pc, #632]	; (8001194 <MX_GPIO_Init+0x62c>)
 8000f1a:	f001 fd6b 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_DISPD7_Pin */
  GPIO_InitStruct.Pin = LCD_DISPD7_Pin;
 8000f1e:	2380      	movs	r3, #128	; 0x80
 8000f20:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f22:	2300      	movs	r3, #0
 8000f24:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f26:	2300      	movs	r3, #0
 8000f28:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_DISPD7_GPIO_Port, &GPIO_InitStruct);
 8000f2a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f2e:	4619      	mov	r1, r3
 8000f30:	4895      	ldr	r0, [pc, #596]	; (8001188 <MX_GPIO_Init+0x620>)
 8000f32:	f001 fd5f 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE5 PE4 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4;
 8000f36:	2330      	movs	r3, #48	; 0x30
 8000f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f3a:	2302      	movs	r3, #2
 8000f3c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2300      	movs	r3, #0
 8000f44:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 8000f46:	230a      	movs	r3, #10
 8000f48:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4890      	ldr	r0, [pc, #576]	; (8001194 <MX_GPIO_Init+0x62c>)
 8000f52:	f001 fd4f 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDIO1_D5_Pin SDIO1_D4_Pin */
  GPIO_InitStruct.Pin = SDIO1_D5_Pin|SDIO1_D4_Pin;
 8000f56:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f5c:	2302      	movs	r3, #2
 8000f5e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f60:	2300      	movs	r3, #0
 8000f62:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f64:	2303      	movs	r3, #3
 8000f66:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000f68:	230c      	movs	r3, #12
 8000f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f70:	4619      	mov	r1, r3
 8000f72:	4889      	ldr	r0, [pc, #548]	; (8001198 <MX_GPIO_Init+0x630>)
 8000f74:	f001 fd3e 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG15 PG8 PG5 PG4
                           PG0 PG1 */
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8000f78:	f248 1333 	movw	r3, #33075	; 0x8133
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_0|GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f82:	2300      	movs	r3, #0
 8000f84:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f86:	2303      	movs	r3, #3
 8000f88:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000f8a:	230c      	movs	r3, #12
 8000f8c:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000f8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000f92:	4619      	mov	r1, r3
 8000f94:	4881      	ldr	r0, [pc, #516]	; (800119c <MX_GPIO_Init+0x634>)
 8000f96:	f001 fd2d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDIO1_CMD_Pin */
  GPIO_InitStruct.Pin = SDIO1_CMD_Pin;
 8000f9a:	2304      	movs	r3, #4
 8000f9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_SDIO1;
 8000faa:	230c      	movs	r3, #12
 8000fac:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(SDIO1_CMD_GPIO_Port, &GPIO_InitStruct);
 8000fae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	4874      	ldr	r0, [pc, #464]	; (8001188 <MX_GPIO_Init+0x620>)
 8000fb6:	f001 fd1d 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD15 PD14
                           PD10 PD9 PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8000fba:	f24c 7303 	movw	r3, #50947	; 0xc703
 8000fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_10|GPIO_PIN_9|GPIO_PIN_8;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000fcc:	230c      	movs	r3, #12
 8000fce:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fd0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fd4:	4619      	mov	r1, r3
 8000fd6:	486c      	ldr	r0, [pc, #432]	; (8001188 <MX_GPIO_Init+0x620>)
 8000fd8:	f001 fd0c 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OTG_FS2_ID_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_ID_Pin;
 8000fdc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(USB_OTG_FS2_ID_GPIO_Port, &GPIO_InitStruct);
 8000fea:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000fee:	4619      	mov	r1, r3
 8000ff0:	486b      	ldr	r0, [pc, #428]	; (80011a0 <MX_GPIO_Init+0x638>)
 8000ff2:	f001 fcff 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000ff6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001000:	2300      	movs	r3, #0
 8001002:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001004:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001008:	4619      	mov	r1, r3
 800100a:	4866      	ldr	r0, [pc, #408]	; (80011a4 <MX_GPIO_Init+0x63c>)
 800100c:	f001 fcf2 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001010:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001014:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001016:	2302      	movs	r3, #2
 8001018:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800101e:	2300      	movs	r3, #0
 8001020:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001022:	2301      	movs	r3, #1
 8001024:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001026:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800102a:	4619      	mov	r1, r3
 800102c:	485c      	ldr	r0, [pc, #368]	; (80011a0 <MX_GPIO_Init+0x638>)
 800102e:	f001 fce1 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_OTG_FS2_P_Pin USB_OTG_FS2_N_Pin */
  GPIO_InitStruct.Pin = USB_OTG_FS2_P_Pin|USB_OTG_FS2_N_Pin;
 8001032:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8001036:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001038:	2302      	movs	r3, #2
 800103a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	2300      	movs	r3, #0
 800103e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001040:	2300      	movs	r3, #0
 8001042:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8001044:	230a      	movs	r3, #10
 8001046:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800104c:	4619      	mov	r1, r3
 800104e:	4854      	ldr	r0, [pc, #336]	; (80011a0 <MX_GPIO_Init+0x638>)
 8001050:	f001 fcd0 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : MII_RX_ER_Pin */
  GPIO_InitStruct.Pin = MII_RX_ER_Pin;
 8001054:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001058:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800105a:	2302      	movs	r3, #2
 800105c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105e:	2300      	movs	r3, #0
 8001060:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001062:	2300      	movs	r3, #0
 8001064:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001066:	230b      	movs	r3, #11
 8001068:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(MII_RX_ER_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800106e:	4619      	mov	r1, r3
 8001070:	4846      	ldr	r0, [pc, #280]	; (800118c <MX_GPIO_Init+0x624>)
 8001072:	f001 fcbf 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF2 PF1 PF0 PF3
                           PF5 PF4 PF13 PF14
                           PF12 PF15 PF11 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001076:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800107a:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_12|GPIO_PIN_15|GPIO_PIN_11;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001080:	2300      	movs	r3, #0
 8001082:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001088:	230c      	movs	r3, #12
 800108a:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800108c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001090:	4619      	mov	r1, r3
 8001092:	4845      	ldr	r0, [pc, #276]	; (80011a8 <MX_GPIO_Init+0x640>)
 8001094:	f001 fcae 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001098:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800109e:	2301      	movs	r3, #1
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80010aa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010ae:	4619      	mov	r1, r3
 80010b0:	4836      	ldr	r0, [pc, #216]	; (800118c <MX_GPIO_Init+0x624>)
 80010b2:	f001 fc9f 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_INT_Pin */
  GPIO_InitStruct.Pin = LCD_INT_Pin;
 80010b6:	2304      	movs	r3, #4
 80010b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010ba:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80010be:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010c0:	2300      	movs	r3, #0
 80010c2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_INT_GPIO_Port, &GPIO_InitStruct);
 80010c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010c8:	4619      	mov	r1, r3
 80010ca:	4834      	ldr	r0, [pc, #208]	; (800119c <MX_GPIO_Init+0x634>)
 80010cc:	f001 fc92 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_BL_Pin */
  GPIO_InitStruct.Pin = LCD_BL_Pin;
 80010d0:	2301      	movs	r3, #1
 80010d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010d4:	2300      	movs	r3, #0
 80010d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d8:	2300      	movs	r3, #0
 80010da:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(LCD_BL_GPIO_Port, &GPIO_InitStruct);
 80010dc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80010e0:	4619      	mov	r1, r3
 80010e2:	4832      	ldr	r0, [pc, #200]	; (80011ac <MX_GPIO_Init+0x644>)
 80010e4:	f001 fc86 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF6 PF7 PF10 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_10;
 80010e8:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
 80010ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ee:	2302      	movs	r3, #2
 80010f0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f6:	2300      	movs	r3, #0
 80010f8:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80010fa:	2309      	movs	r3, #9
 80010fc:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80010fe:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001102:	4619      	mov	r1, r3
 8001104:	4828      	ldr	r0, [pc, #160]	; (80011a8 <MX_GPIO_Init+0x640>)
 8001106:	f001 fc75 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800110a:	2301      	movs	r3, #1
 800110c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800110e:	2303      	movs	r3, #3
 8001110:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001112:	2300      	movs	r3, #0
 8001114:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001116:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800111a:	4619      	mov	r1, r3
 800111c:	4821      	ldr	r0, [pc, #132]	; (80011a4 <MX_GPIO_Init+0x63c>)
 800111e:	f001 fc69 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001122:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001126:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001128:	2302      	movs	r3, #2
 800112a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112c:	2300      	movs	r3, #0
 800112e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001130:	2300      	movs	r3, #0
 8001132:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001134:	230a      	movs	r3, #10
 8001136:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001138:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800113c:	4619      	mov	r1, r3
 800113e:	481a      	ldr	r0, [pc, #104]	; (80011a8 <MX_GPIO_Init+0x640>)
 8001140:	f001 fc58 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_MDC_Pin MII_TXD2_Pin MII_TX_CLK_Pin MII_RXD0_Pin
                           MII_RXD1_Pin */
  GPIO_InitStruct.Pin = MII_MDC_Pin|MII_TXD2_Pin|MII_TX_CLK_Pin|MII_RXD0_Pin
 8001144:	233e      	movs	r3, #62	; 0x3e
 8001146:	62fb      	str	r3, [r7, #44]	; 0x2c
                          |MII_RXD1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001148:	2302      	movs	r3, #2
 800114a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001154:	230b      	movs	r3, #11
 8001156:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001158:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800115c:	4619      	mov	r1, r3
 800115e:	4811      	ldr	r0, [pc, #68]	; (80011a4 <MX_GPIO_Init+0x63c>)
 8001160:	f001 fc48 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_CRS_Pin MII_COL_Pin */
  GPIO_InitStruct.Pin = MII_CRS_Pin|MII_COL_Pin;
 8001164:	230c      	movs	r3, #12
 8001166:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001168:	2302      	movs	r3, #2
 800116a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800116c:	2300      	movs	r3, #0
 800116e:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001170:	2300      	movs	r3, #0
 8001172:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001174:	230b      	movs	r3, #11
 8001176:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001178:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800117c:	4619      	mov	r1, r3
 800117e:	4804      	ldr	r0, [pc, #16]	; (8001190 <MX_GPIO_Init+0x628>)
 8001180:	f001 fc38 	bl	80029f4 <HAL_GPIO_Init>
 8001184:	e014      	b.n	80011b0 <MX_GPIO_Init+0x648>
 8001186:	bf00      	nop
 8001188:	58020c00 	.word	0x58020c00
 800118c:	58022000 	.word	0x58022000
 8001190:	58021c00 	.word	0x58021c00
 8001194:	58021000 	.word	0x58021000
 8001198:	58020400 	.word	0x58020400
 800119c:	58021800 	.word	0x58021800
 80011a0:	58020000 	.word	0x58020000
 80011a4:	58020800 	.word	0x58020800
 80011a8:	58021400 	.word	0x58021400
 80011ac:	58022800 	.word	0x58022800

  /*Configure GPIO pins : MII_MDIO_Pin MII_RX_CLK_Pin MII_RX_DV_Pin */
  GPIO_InitStruct.Pin = MII_MDIO_Pin|MII_RX_CLK_Pin|MII_RX_DV_Pin;
 80011b0:	2386      	movs	r3, #134	; 0x86
 80011b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b4:	2302      	movs	r3, #2
 80011b6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b8:	2300      	movs	r3, #0
 80011ba:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011bc:	2300      	movs	r3, #0
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80011c0:	230b      	movs	r3, #11
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011c8:	4619      	mov	r1, r3
 80011ca:	4850      	ldr	r0, [pc, #320]	; (800130c <MX_GPIO_Init+0x7a4>)
 80011cc:	f001 fc12 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PH5 PH6 PH7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80011d0:	23e0      	movs	r3, #224	; 0xe0
 80011d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d8:	2300      	movs	r3, #0
 80011da:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011dc:	2303      	movs	r3, #3
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80011e0:	230c      	movs	r3, #12
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80011e4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80011e8:	4619      	mov	r1, r3
 80011ea:	4849      	ldr	r0, [pc, #292]	; (8001310 <MX_GPIO_Init+0x7a8>)
 80011ec:	f001 fc02 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS2_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS2_OverCurrent_Pin;
 80011f0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80011f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011fc:	2300      	movs	r3, #0
 80011fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(OTG_FS2_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001200:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001204:	4619      	mov	r1, r3
 8001206:	4842      	ldr	r0, [pc, #264]	; (8001310 <MX_GPIO_Init+0x7a8>)
 8001208:	f001 fbf4 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800120c:	2340      	movs	r3, #64	; 0x40
 800120e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001210:	2302      	movs	r3, #2
 8001212:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001214:	2300      	movs	r3, #0
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001218:	2300      	movs	r3, #0
 800121a:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_TIM13;
 800121c:	2309      	movs	r3, #9
 800121e:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001220:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001224:	4619      	mov	r1, r3
 8001226:	4839      	ldr	r0, [pc, #228]	; (800130c <MX_GPIO_Init+0x7a4>)
 8001228:	f001 fbe4 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PH9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800122c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001230:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001232:	2302      	movs	r3, #2
 8001234:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001236:	2300      	movs	r3, #0
 8001238:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800123a:	2300      	movs	r3, #0
 800123c:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800123e:	230e      	movs	r3, #14
 8001240:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001242:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001246:	4619      	mov	r1, r3
 8001248:	4831      	ldr	r0, [pc, #196]	; (8001310 <MX_GPIO_Init+0x7a8>)
 800124a:	f001 fbd3 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 800124e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001252:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001254:	2302      	movs	r3, #2
 8001256:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001258:	2300      	movs	r3, #0
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001260:	2309      	movs	r3, #9
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001264:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001268:	4619      	mov	r1, r3
 800126a:	482a      	ldr	r0, [pc, #168]	; (8001314 <MX_GPIO_Init+0x7ac>)
 800126c:	f001 fbc2 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pins : MII_RX_D3_Pin MII_RX_D2_Pin */
  GPIO_InitStruct.Pin = MII_RX_D3_Pin|MII_RX_D2_Pin;
 8001270:	2303      	movs	r3, #3
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001274:	2302      	movs	r3, #2
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001280:	230b      	movs	r3, #11
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001284:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001288:	4619      	mov	r1, r3
 800128a:	4823      	ldr	r0, [pc, #140]	; (8001318 <MX_GPIO_Init+0x7b0>)
 800128c:	f001 fbb2 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD1_Pin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001290:	2304      	movs	r3, #4
 8001292:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001294:	2301      	movs	r3, #1
 8001296:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800129c:	2300      	movs	r3, #0
 800129e:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 80012a0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012a4:	4619      	mov	r1, r3
 80012a6:	481d      	ldr	r0, [pc, #116]	; (800131c <MX_GPIO_Init+0x7b4>)
 80012a8:	f001 fba4 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 80012ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012b0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012b2:	2301      	movs	r3, #1
 80012b4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ba:	2300      	movs	r3, #0
 80012bc:	63bb      	str	r3, [r7, #56]	; 0x38
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 80012be:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012c2:	4619      	mov	r1, r3
 80012c4:	4814      	ldr	r0, [pc, #80]	; (8001318 <MX_GPIO_Init+0x7b0>)
 80012c6:	f001 fb95 	bl	80029f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 80012ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80012ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d0:	2302      	movs	r3, #2
 80012d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d4:	2300      	movs	r3, #0
 80012d6:	637b      	str	r3, [r7, #52]	; 0x34
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d8:	2300      	movs	r3, #0
 80012da:	63bb      	str	r3, [r7, #56]	; 0x38
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012dc:	2305      	movs	r3, #5
 80012de:	63fb      	str	r3, [r7, #60]	; 0x3c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80012e4:	4619      	mov	r1, r3
 80012e6:	480c      	ldr	r0, [pc, #48]	; (8001318 <MX_GPIO_Init+0x7b0>)
 80012e8:	f001 fb84 	bl	80029f4 <HAL_GPIO_Init>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 80012ec:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 80012f0:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 80012f4:	f000 faee 	bl	80018d4 <HAL_SYSCFG_AnalogSwitchConfig>

  /*AnalogSwitch Config */
  HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA1, SYSCFG_SWITCH_PA1_OPEN);
 80012f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80012fc:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8001300:	f000 fae8 	bl	80018d4 <HAL_SYSCFG_AnalogSwitchConfig>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001304:	bf00      	nop
 8001306:	3740      	adds	r7, #64	; 0x40
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	58020000 	.word	0x58020000
 8001310:	58021c00 	.word	0x58021c00
 8001314:	58020c00 	.word	0x58020c00
 8001318:	58020400 	.word	0x58020400
 800131c:	58022400 	.word	0x58022400

08001320 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001320:	b480      	push	{r7}
 8001322:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001324:	b672      	cpsid	i
}
 8001326:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001328:	e7fe      	b.n	8001328 <Error_Handler+0x8>
	...

0800132c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800132c:	b480      	push	{r7}
 800132e:	b083      	sub	sp, #12
 8001330:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b0a      	ldr	r3, [pc, #40]	; (800135c <HAL_MspInit+0x30>)
 8001334:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001338:	4a08      	ldr	r2, [pc, #32]	; (800135c <HAL_MspInit+0x30>)
 800133a:	f043 0302 	orr.w	r3, r3, #2
 800133e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001342:	4b06      	ldr	r3, [pc, #24]	; (800135c <HAL_MspInit+0x30>)
 8001344:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	607b      	str	r3, [r7, #4]
 800134e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	370c      	adds	r7, #12
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	58024400 	.word	0x58024400

08001360 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001360:	b580      	push	{r7, lr}
 8001362:	b0bc      	sub	sp, #240	; 0xf0
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001368:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800136c:	2200      	movs	r2, #0
 800136e:	601a      	str	r2, [r3, #0]
 8001370:	605a      	str	r2, [r3, #4]
 8001372:	609a      	str	r2, [r3, #8]
 8001374:	60da      	str	r2, [r3, #12]
 8001376:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001378:	f107 0318 	add.w	r3, r7, #24
 800137c:	22c0      	movs	r2, #192	; 0xc0
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f006 fc85 	bl	8007c90 <memset>
  if(hadc->Instance==ADC3)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a41      	ldr	r2, [pc, #260]	; (8001490 <HAL_ADC_MspInit+0x130>)
 800138c:	4293      	cmp	r3, r2
 800138e:	d17a      	bne.n	8001486 <HAL_ADC_MspInit+0x126>

  /* USER CODE END ADC3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001390:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001394:	f04f 0300 	mov.w	r3, #0
 8001398:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 800139c:	2302      	movs	r3, #2
 800139e:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 80013a0:	230c      	movs	r3, #12
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2P = 4;
 80013a4:	2304      	movs	r3, #4
 80013a6:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 80013ac:	2302      	movs	r3, #2
 80013ae:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 80013b0:	23c0      	movs	r3, #192	; 0xc0
 80013b2:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 80013b4:	2320      	movs	r3, #32
 80013b6:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 80013bc:	2300      	movs	r3, #0
 80013be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c2:	f107 0318 	add.w	r3, r7, #24
 80013c6:	4618      	mov	r0, r3
 80013c8:	f002 fcfe 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80013cc:	4603      	mov	r3, r0
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d001      	beq.n	80013d6 <HAL_ADC_MspInit+0x76>
    {
      Error_Handler();
 80013d2:	f7ff ffa5 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <HAL_ADC_MspInit+0x134>)
 80013d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013dc:	4a2d      	ldr	r2, [pc, #180]	; (8001494 <HAL_ADC_MspInit+0x134>)
 80013de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80013e2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80013e6:	4b2b      	ldr	r3, [pc, #172]	; (8001494 <HAL_ADC_MspInit+0x134>)
 80013e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80013f4:	4b27      	ldr	r3, [pc, #156]	; (8001494 <HAL_ADC_MspInit+0x134>)
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80013fa:	4a26      	ldr	r2, [pc, #152]	; (8001494 <HAL_ADC_MspInit+0x134>)
 80013fc:	f043 0320 	orr.w	r3, r3, #32
 8001400:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001404:	4b23      	ldr	r3, [pc, #140]	; (8001494 <HAL_ADC_MspInit+0x134>)
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800140a:	f003 0320 	and.w	r3, r3, #32
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_ADC_MspInit+0x134>)
 8001414:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001418:	4a1e      	ldr	r2, [pc, #120]	; (8001494 <HAL_ADC_MspInit+0x134>)
 800141a:	f043 0304 	orr.w	r3, r3, #4
 800141e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001422:	4b1c      	ldr	r3, [pc, #112]	; (8001494 <HAL_ADC_MspInit+0x134>)
 8001424:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001428:	f003 0304 	and.w	r3, r3, #4
 800142c:	60fb      	str	r3, [r7, #12]
 800142e:	68fb      	ldr	r3, [r7, #12]
    PC0     ------> ADC3_INP10
    PC2_C     ------> ADC3_INP0
    PC2_C     ------> ADC3_INN1
    PC3_C     ------> ADC3_INP1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001430:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001434:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001438:	2303      	movs	r3, #3
 800143a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001444:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001448:	4619      	mov	r1, r3
 800144a:	4813      	ldr	r0, [pc, #76]	; (8001498 <HAL_ADC_MspInit+0x138>)
 800144c:	f001 fad2 	bl	80029f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001450:	2301      	movs	r3, #1
 8001452:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001456:	2303      	movs	r3, #3
 8001458:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001462:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001466:	4619      	mov	r1, r3
 8001468:	480c      	ldr	r0, [pc, #48]	; (800149c <HAL_ADC_MspInit+0x13c>)
 800146a:	f001 fac3 	bl	80029f4 <HAL_GPIO_Init>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC2, SYSCFG_SWITCH_PC2_OPEN);
 800146e:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
 8001472:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8001476:	f000 fa2d 	bl	80018d4 <HAL_SYSCFG_AnalogSwitchConfig>

    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PC3, SYSCFG_SWITCH_PC3_OPEN);
 800147a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 800147e:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8001482:	f000 fa27 	bl	80018d4 <HAL_SYSCFG_AnalogSwitchConfig>
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8001486:	bf00      	nop
 8001488:	37f0      	adds	r7, #240	; 0xf0
 800148a:	46bd      	mov	sp, r7
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	58026000 	.word	0x58026000
 8001494:	58024400 	.word	0x58024400
 8001498:	58021400 	.word	0x58021400
 800149c:	58020800 	.word	0x58020800

080014a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b0ba      	sub	sp, #232	; 0xe8
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014a8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80014ac:	2200      	movs	r2, #0
 80014ae:	601a      	str	r2, [r3, #0]
 80014b0:	605a      	str	r2, [r3, #4]
 80014b2:	609a      	str	r2, [r3, #8]
 80014b4:	60da      	str	r2, [r3, #12]
 80014b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b8:	f107 0310 	add.w	r3, r7, #16
 80014bc:	22c0      	movs	r2, #192	; 0xc0
 80014be:	2100      	movs	r1, #0
 80014c0:	4618      	mov	r0, r3
 80014c2:	f006 fbe5 	bl	8007c90 <memset>
  if(huart->Instance==USART3)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	4a27      	ldr	r2, [pc, #156]	; (8001568 <HAL_UART_MspInit+0xc8>)
 80014cc:	4293      	cmp	r3, r2
 80014ce:	d146      	bne.n	800155e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80014d0:	f04f 0202 	mov.w	r2, #2
 80014d4:	f04f 0300 	mov.w	r3, #0
 80014d8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 80014dc:	2300      	movs	r3, #0
 80014de:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014e2:	f107 0310 	add.w	r3, r7, #16
 80014e6:	4618      	mov	r0, r3
 80014e8:	f002 fc6e 	bl	8003dc8 <HAL_RCCEx_PeriphCLKConfig>
 80014ec:	4603      	mov	r3, r0
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d001      	beq.n	80014f6 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 80014f2:	f7ff ff15 	bl	8001320 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80014f6:	4b1d      	ldr	r3, [pc, #116]	; (800156c <HAL_UART_MspInit+0xcc>)
 80014f8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_UART_MspInit+0xcc>)
 80014fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001502:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8001506:	4b19      	ldr	r3, [pc, #100]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001508:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800150c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001514:	4b15      	ldr	r3, [pc, #84]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001516:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800151a:	4a14      	ldr	r2, [pc, #80]	; (800156c <HAL_UART_MspInit+0xcc>)
 800151c:	f043 0302 	orr.w	r3, r3, #2
 8001520:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001524:	4b11      	ldr	r3, [pc, #68]	; (800156c <HAL_UART_MspInit+0xcc>)
 8001526:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001532:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001536:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153a:	2302      	movs	r3, #2
 800153c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001540:	2300      	movs	r3, #0
 8001542:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001546:	2300      	movs	r3, #0
 8001548:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800154c:	2307      	movs	r3, #7
 800154e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001552:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001556:	4619      	mov	r1, r3
 8001558:	4805      	ldr	r0, [pc, #20]	; (8001570 <HAL_UART_MspInit+0xd0>)
 800155a:	f001 fa4b 	bl	80029f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800155e:	bf00      	nop
 8001560:	37e8      	adds	r7, #232	; 0xe8
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	40004800 	.word	0x40004800
 800156c:	58024400 	.word	0x58024400
 8001570:	58020400 	.word	0x58020400

08001574 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001578:	e7fe      	b.n	8001578 <NMI_Handler+0x4>

0800157a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800157a:	b480      	push	{r7}
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800157e:	e7fe      	b.n	800157e <HardFault_Handler+0x4>

08001580 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001584:	e7fe      	b.n	8001584 <MemManage_Handler+0x4>

08001586 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001586:	b480      	push	{r7}
 8001588:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800158a:	e7fe      	b.n	800158a <BusFault_Handler+0x4>

0800158c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001590:	e7fe      	b.n	8001590 <UsageFault_Handler+0x4>

08001592 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001592:	b480      	push	{r7}
 8001594:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001596:	bf00      	nop
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015a0:	b480      	push	{r7}
 80015a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr

080015ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015ae:	b480      	push	{r7}
 80015b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015b2:	bf00      	nop
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr

080015bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015c0:	f000 f95c 	bl	800187c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015c4:	bf00      	nop
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b086      	sub	sp, #24
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015d0:	4a14      	ldr	r2, [pc, #80]	; (8001624 <_sbrk+0x5c>)
 80015d2:	4b15      	ldr	r3, [pc, #84]	; (8001628 <_sbrk+0x60>)
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015dc:	4b13      	ldr	r3, [pc, #76]	; (800162c <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d102      	bne.n	80015ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015e4:	4b11      	ldr	r3, [pc, #68]	; (800162c <_sbrk+0x64>)
 80015e6:	4a12      	ldr	r2, [pc, #72]	; (8001630 <_sbrk+0x68>)
 80015e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ea:	4b10      	ldr	r3, [pc, #64]	; (800162c <_sbrk+0x64>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	4413      	add	r3, r2
 80015f2:	693a      	ldr	r2, [r7, #16]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d207      	bcs.n	8001608 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015f8:	f006 fb52 	bl	8007ca0 <__errno>
 80015fc:	4603      	mov	r3, r0
 80015fe:	220c      	movs	r2, #12
 8001600:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001602:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001606:	e009      	b.n	800161c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001608:	4b08      	ldr	r3, [pc, #32]	; (800162c <_sbrk+0x64>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800160e:	4b07      	ldr	r3, [pc, #28]	; (800162c <_sbrk+0x64>)
 8001610:	681a      	ldr	r2, [r3, #0]
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	4413      	add	r3, r2
 8001616:	4a05      	ldr	r2, [pc, #20]	; (800162c <_sbrk+0x64>)
 8001618:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800161a:	68fb      	ldr	r3, [r7, #12]
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	24080000 	.word	0x24080000
 8001628:	00000400 	.word	0x00000400
 800162c:	240002ec 	.word	0x240002ec
 8001630:	24000440 	.word	0x24000440

08001634 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001638:	4b37      	ldr	r3, [pc, #220]	; (8001718 <SystemInit+0xe4>)
 800163a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800163e:	4a36      	ldr	r2, [pc, #216]	; (8001718 <SystemInit+0xe4>)
 8001640:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001644:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001648:	4b34      	ldr	r3, [pc, #208]	; (800171c <SystemInit+0xe8>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	2b06      	cmp	r3, #6
 8001652:	d807      	bhi.n	8001664 <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001654:	4b31      	ldr	r3, [pc, #196]	; (800171c <SystemInit+0xe8>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f023 030f 	bic.w	r3, r3, #15
 800165c:	4a2f      	ldr	r2, [pc, #188]	; (800171c <SystemInit+0xe8>)
 800165e:	f043 0307 	orr.w	r3, r3, #7
 8001662:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001664:	4b2e      	ldr	r3, [pc, #184]	; (8001720 <SystemInit+0xec>)
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	4a2d      	ldr	r2, [pc, #180]	; (8001720 <SystemInit+0xec>)
 800166a:	f043 0301 	orr.w	r3, r3, #1
 800166e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <SystemInit+0xec>)
 8001672:	2200      	movs	r2, #0
 8001674:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001676:	4b2a      	ldr	r3, [pc, #168]	; (8001720 <SystemInit+0xec>)
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	4929      	ldr	r1, [pc, #164]	; (8001720 <SystemInit+0xec>)
 800167c:	4b29      	ldr	r3, [pc, #164]	; (8001724 <SystemInit+0xf0>)
 800167e:	4013      	ands	r3, r2
 8001680:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001682:	4b26      	ldr	r3, [pc, #152]	; (800171c <SystemInit+0xe8>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0308 	and.w	r3, r3, #8
 800168a:	2b00      	cmp	r3, #0
 800168c:	d007      	beq.n	800169e <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800168e:	4b23      	ldr	r3, [pc, #140]	; (800171c <SystemInit+0xe8>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f023 030f 	bic.w	r3, r3, #15
 8001696:	4a21      	ldr	r2, [pc, #132]	; (800171c <SystemInit+0xe8>)
 8001698:	f043 0307 	orr.w	r3, r3, #7
 800169c:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <SystemInit+0xec>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80016a4:	4b1e      	ldr	r3, [pc, #120]	; (8001720 <SystemInit+0xec>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80016aa:	4b1d      	ldr	r3, [pc, #116]	; (8001720 <SystemInit+0xec>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80016b0:	4b1b      	ldr	r3, [pc, #108]	; (8001720 <SystemInit+0xec>)
 80016b2:	4a1d      	ldr	r2, [pc, #116]	; (8001728 <SystemInit+0xf4>)
 80016b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80016b6:	4b1a      	ldr	r3, [pc, #104]	; (8001720 <SystemInit+0xec>)
 80016b8:	4a1c      	ldr	r2, [pc, #112]	; (800172c <SystemInit+0xf8>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <SystemInit+0xec>)
 80016be:	4a1c      	ldr	r2, [pc, #112]	; (8001730 <SystemInit+0xfc>)
 80016c0:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80016c2:	4b17      	ldr	r3, [pc, #92]	; (8001720 <SystemInit+0xec>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80016c8:	4b15      	ldr	r3, [pc, #84]	; (8001720 <SystemInit+0xec>)
 80016ca:	4a19      	ldr	r2, [pc, #100]	; (8001730 <SystemInit+0xfc>)
 80016cc:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80016ce:	4b14      	ldr	r3, [pc, #80]	; (8001720 <SystemInit+0xec>)
 80016d0:	2200      	movs	r2, #0
 80016d2:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80016d4:	4b12      	ldr	r3, [pc, #72]	; (8001720 <SystemInit+0xec>)
 80016d6:	4a16      	ldr	r2, [pc, #88]	; (8001730 <SystemInit+0xfc>)
 80016d8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80016da:	4b11      	ldr	r3, [pc, #68]	; (8001720 <SystemInit+0xec>)
 80016dc:	2200      	movs	r2, #0
 80016de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <SystemInit+0xec>)
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	4a0e      	ldr	r2, [pc, #56]	; (8001720 <SystemInit+0xec>)
 80016e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016ea:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80016ec:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <SystemInit+0xec>)
 80016ee:	2200      	movs	r2, #0
 80016f0:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <SystemInit+0x100>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b10      	ldr	r3, [pc, #64]	; (8001738 <SystemInit+0x104>)
 80016f8:	4013      	ands	r3, r2
 80016fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80016fe:	d202      	bcs.n	8001706 <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8001700:	4b0e      	ldr	r3, [pc, #56]	; (800173c <SystemInit+0x108>)
 8001702:	2201      	movs	r2, #1
 8001704:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8001706:	4b0e      	ldr	r3, [pc, #56]	; (8001740 <SystemInit+0x10c>)
 8001708:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800170c:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800170e:	bf00      	nop
 8001710:	46bd      	mov	sp, r7
 8001712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001716:	4770      	bx	lr
 8001718:	e000ed00 	.word	0xe000ed00
 800171c:	52002000 	.word	0x52002000
 8001720:	58024400 	.word	0x58024400
 8001724:	eaf6ed7f 	.word	0xeaf6ed7f
 8001728:	02020200 	.word	0x02020200
 800172c:	01ff0000 	.word	0x01ff0000
 8001730:	01010280 	.word	0x01010280
 8001734:	5c001000 	.word	0x5c001000
 8001738:	ffff0000 	.word	0xffff0000
 800173c:	51008108 	.word	0x51008108
 8001740:	52004000 	.word	0x52004000

08001744 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	f8df d034 	ldr.w	sp, [pc, #52]	; 800177c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001748:	f7ff ff74 	bl	8001634 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800174c:	480c      	ldr	r0, [pc, #48]	; (8001780 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800174e:	490d      	ldr	r1, [pc, #52]	; (8001784 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001750:	4a0d      	ldr	r2, [pc, #52]	; (8001788 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001752:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001754:	e002      	b.n	800175c <LoopCopyDataInit>

08001756 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001756:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001758:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800175a:	3304      	adds	r3, #4

0800175c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800175c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001760:	d3f9      	bcc.n	8001756 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001762:	4a0a      	ldr	r2, [pc, #40]	; (800178c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001764:	4c0a      	ldr	r4, [pc, #40]	; (8001790 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001766:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001768:	e001      	b.n	800176e <LoopFillZerobss>

0800176a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800176a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800176c:	3204      	adds	r2, #4

0800176e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001770:	d3fb      	bcc.n	800176a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001772:	f006 fa9b 	bl	8007cac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001776:	f7ff f877 	bl	8000868 <main>
  bx  lr
 800177a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800177c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001780:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001784:	2400012c 	.word	0x2400012c
  ldr r2, =_sidata
 8001788:	0800873c 	.word	0x0800873c
  ldr r2, =_sbss
 800178c:	2400012c 	.word	0x2400012c
  ldr r4, =_ebss
 8001790:	2400043c 	.word	0x2400043c

08001794 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <ADC3_IRQHandler>
	...

08001798 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b082      	sub	sp, #8
 800179c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800179e:	2003      	movs	r0, #3
 80017a0:	f001 f8f6 	bl	8002990 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80017a4:	f002 f93a 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80017a8:	4602      	mov	r2, r0
 80017aa:	4b15      	ldr	r3, [pc, #84]	; (8001800 <HAL_Init+0x68>)
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	0a1b      	lsrs	r3, r3, #8
 80017b0:	f003 030f 	and.w	r3, r3, #15
 80017b4:	4913      	ldr	r1, [pc, #76]	; (8001804 <HAL_Init+0x6c>)
 80017b6:	5ccb      	ldrb	r3, [r1, r3]
 80017b8:	f003 031f 	and.w	r3, r3, #31
 80017bc:	fa22 f303 	lsr.w	r3, r2, r3
 80017c0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80017c2:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <HAL_Init+0x68>)
 80017c4:	699b      	ldr	r3, [r3, #24]
 80017c6:	f003 030f 	and.w	r3, r3, #15
 80017ca:	4a0e      	ldr	r2, [pc, #56]	; (8001804 <HAL_Init+0x6c>)
 80017cc:	5cd3      	ldrb	r3, [r2, r3]
 80017ce:	f003 031f 	and.w	r3, r3, #31
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	fa22 f303 	lsr.w	r3, r2, r3
 80017d8:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_Init+0x70>)
 80017da:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80017dc:	4a0b      	ldr	r2, [pc, #44]	; (800180c <HAL_Init+0x74>)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80017e2:	2000      	movs	r0, #0
 80017e4:	f000 f814 	bl	8001810 <HAL_InitTick>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e002      	b.n	80017f8 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80017f2:	f7ff fd9b 	bl	800132c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017f6:	2300      	movs	r3, #0
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3708      	adds	r7, #8
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	58024400 	.word	0x58024400
 8001804:	080085c0 	.word	0x080085c0
 8001808:	240000d0 	.word	0x240000d0
 800180c:	240000cc 	.word	0x240000cc

08001810 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001818:	4b15      	ldr	r3, [pc, #84]	; (8001870 <HAL_InitTick+0x60>)
 800181a:	781b      	ldrb	r3, [r3, #0]
 800181c:	2b00      	cmp	r3, #0
 800181e:	d101      	bne.n	8001824 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001820:	2301      	movs	r3, #1
 8001822:	e021      	b.n	8001868 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001824:	4b13      	ldr	r3, [pc, #76]	; (8001874 <HAL_InitTick+0x64>)
 8001826:	681a      	ldr	r2, [r3, #0]
 8001828:	4b11      	ldr	r3, [pc, #68]	; (8001870 <HAL_InitTick+0x60>)
 800182a:	781b      	ldrb	r3, [r3, #0]
 800182c:	4619      	mov	r1, r3
 800182e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001832:	fbb3 f3f1 	udiv	r3, r3, r1
 8001836:	fbb2 f3f3 	udiv	r3, r2, r3
 800183a:	4618      	mov	r0, r3
 800183c:	f001 f8cd 	bl	80029da <HAL_SYSTICK_Config>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d001      	beq.n	800184a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	e00e      	b.n	8001868 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2b0f      	cmp	r3, #15
 800184e:	d80a      	bhi.n	8001866 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001850:	2200      	movs	r2, #0
 8001852:	6879      	ldr	r1, [r7, #4]
 8001854:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001858:	f001 f8a5 	bl	80029a6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800185c:	4a06      	ldr	r2, [pc, #24]	; (8001878 <HAL_InitTick+0x68>)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001862:	2300      	movs	r3, #0
 8001864:	e000      	b.n	8001868 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
}
 8001868:	4618      	mov	r0, r3
 800186a:	3708      	adds	r7, #8
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	240000d8 	.word	0x240000d8
 8001874:	240000cc 	.word	0x240000cc
 8001878:	240000d4 	.word	0x240000d4

0800187c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800187c:	b480      	push	{r7}
 800187e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001880:	4b06      	ldr	r3, [pc, #24]	; (800189c <HAL_IncTick+0x20>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_IncTick+0x24>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4413      	add	r3, r2
 800188c:	4a04      	ldr	r2, [pc, #16]	; (80018a0 <HAL_IncTick+0x24>)
 800188e:	6013      	str	r3, [r2, #0]
}
 8001890:	bf00      	nop
 8001892:	46bd      	mov	sp, r7
 8001894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001898:	4770      	bx	lr
 800189a:	bf00      	nop
 800189c:	240000d8 	.word	0x240000d8
 80018a0:	240002f0 	.word	0x240002f0

080018a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b03      	ldr	r3, [pc, #12]	; (80018b8 <HAL_GetTick+0x14>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
 80018b6:	bf00      	nop
 80018b8:	240002f0 	.word	0x240002f0

080018bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80018c0:	4b03      	ldr	r3, [pc, #12]	; (80018d0 <HAL_GetREVID+0x14>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	0c1b      	lsrs	r3, r3, #16
}
 80018c6:	4618      	mov	r0, r3
 80018c8:	46bd      	mov	sp, r7
 80018ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ce:	4770      	bx	lr
 80018d0:	5c001000 	.word	0x5c001000

080018d4 <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 80018d4:	b480      	push	{r7}
 80018d6:	b083      	sub	sp, #12
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 80018de:	4b07      	ldr	r3, [pc, #28]	; (80018fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018e0:	685a      	ldr	r2, [r3, #4]
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	43db      	mvns	r3, r3
 80018e6:	401a      	ands	r2, r3
 80018e8:	4904      	ldr	r1, [pc, #16]	; (80018fc <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 80018ea:	683b      	ldr	r3, [r7, #0]
 80018ec:	4313      	orrs	r3, r2
 80018ee:	604b      	str	r3, [r1, #4]
}
 80018f0:	bf00      	nop
 80018f2:	370c      	adds	r7, #12
 80018f4:	46bd      	mov	sp, r7
 80018f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fa:	4770      	bx	lr
 80018fc:	58000400 	.word	0x58000400

08001900 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001900:	b480      	push	{r7}
 8001902:	b083      	sub	sp, #12
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	689b      	ldr	r3, [r3, #8]
 800190e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	431a      	orrs	r2, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	609a      	str	r2, [r3, #8]
}
 800191a:	bf00      	nop
 800191c:	370c      	adds	r7, #12
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr

08001926 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001926:	b480      	push	{r7}
 8001928:	b083      	sub	sp, #12
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
 800192e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001938:	683b      	ldr	r3, [r7, #0]
 800193a:	431a      	orrs	r2, r3
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	609a      	str	r2, [r3, #8]
}
 8001940:	bf00      	nop
 8001942:	370c      	adds	r7, #12
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800195c:	4618      	mov	r0, r3
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001968:	b480      	push	{r7}
 800196a:	b087      	sub	sp, #28
 800196c:	af00      	add	r7, sp, #0
 800196e:	60f8      	str	r0, [r7, #12]
 8001970:	60b9      	str	r1, [r7, #8]
 8001972:	607a      	str	r2, [r7, #4]
 8001974:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	3360      	adds	r3, #96	; 0x60
 800197a:	461a      	mov	r2, r3
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	4413      	add	r3, r2
 8001982:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 8001992:	683b      	ldr	r3, [r7, #0]
 8001994:	430b      	orrs	r3, r1
 8001996:	431a      	orrs	r2, r3
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 800199c:	bf00      	nop
 800199e:	371c      	adds	r7, #28
 80019a0:	46bd      	mov	sp, r7
 80019a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a6:	4770      	bx	lr

080019a8 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 80019bc:	68bb      	ldr	r3, [r7, #8]
 80019be:	f003 031f 	and.w	r3, r3, #31
 80019c2:	6879      	ldr	r1, [r7, #4]
 80019c4:	fa01 f303 	lsl.w	r3, r1, r3
 80019c8:	431a      	orrs	r2, r3
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	611a      	str	r2, [r3, #16]
}
 80019ce:	bf00      	nop
 80019d0:	3714      	adds	r7, #20
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr

080019da <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 80019da:	b480      	push	{r7}
 80019dc:	b087      	sub	sp, #28
 80019de:	af00      	add	r7, sp, #0
 80019e0:	60f8      	str	r0, [r7, #12]
 80019e2:	60b9      	str	r1, [r7, #8]
 80019e4:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	3360      	adds	r3, #96	; 0x60
 80019ea:	461a      	mov	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	431a      	orrs	r2, r3
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	601a      	str	r2, [r3, #0]
  }
}
 8001a04:	bf00      	nop
 8001a06:	371c      	adds	r7, #28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr

08001a10 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b087      	sub	sp, #28
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	60b9      	str	r1, [r7, #8]
 8001a1a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	3330      	adds	r3, #48	; 0x30
 8001a20:	461a      	mov	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	0a1b      	lsrs	r3, r3, #8
 8001a26:	009b      	lsls	r3, r3, #2
 8001a28:	f003 030c 	and.w	r3, r3, #12
 8001a2c:	4413      	add	r3, r2
 8001a2e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	68bb      	ldr	r3, [r7, #8]
 8001a36:	f003 031f 	and.w	r3, r3, #31
 8001a3a:	211f      	movs	r1, #31
 8001a3c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a40:	43db      	mvns	r3, r3
 8001a42:	401a      	ands	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	0e9b      	lsrs	r3, r3, #26
 8001a48:	f003 011f 	and.w	r1, r3, #31
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	f003 031f 	and.w	r3, r3, #31
 8001a52:	fa01 f303 	lsl.w	r3, r1, r3
 8001a56:	431a      	orrs	r2, r3
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001a5c:	bf00      	nop
 8001a5e:	371c      	adds	r7, #28
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b087      	sub	sp, #28
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	60f8      	str	r0, [r7, #12]
 8001a70:	60b9      	str	r1, [r7, #8]
 8001a72:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a74:	68fb      	ldr	r3, [r7, #12]
 8001a76:	3314      	adds	r3, #20
 8001a78:	461a      	mov	r2, r3
 8001a7a:	68bb      	ldr	r3, [r7, #8]
 8001a7c:	0e5b      	lsrs	r3, r3, #25
 8001a7e:	009b      	lsls	r3, r3, #2
 8001a80:	f003 0304 	and.w	r3, r3, #4
 8001a84:	4413      	add	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	681a      	ldr	r2, [r3, #0]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	0d1b      	lsrs	r3, r3, #20
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2107      	movs	r1, #7
 8001a96:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9a:	43db      	mvns	r3, r3
 8001a9c:	401a      	ands	r2, r3
 8001a9e:	68bb      	ldr	r3, [r7, #8]
 8001aa0:	0d1b      	lsrs	r3, r3, #20
 8001aa2:	f003 031f 	and.w	r3, r3, #31
 8001aa6:	6879      	ldr	r1, [r7, #4]
 8001aa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001aac:	431a      	orrs	r2, r3
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001ab2:	bf00      	nop
 8001ab4:	371c      	adds	r7, #28
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
	...

08001ac0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b085      	sub	sp, #20
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	60f8      	str	r0, [r7, #12]
 8001ac8:	60b9      	str	r1, [r7, #8]
 8001aca:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001ad2:	68bb      	ldr	r3, [r7, #8]
 8001ad4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001ad8:	43db      	mvns	r3, r3
 8001ada:	401a      	ands	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	f003 0318 	and.w	r3, r3, #24
 8001ae2:	4908      	ldr	r1, [pc, #32]	; (8001b04 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ae4:	40d9      	lsrs	r1, r3
 8001ae6:	68bb      	ldr	r3, [r7, #8]
 8001ae8:	400b      	ands	r3, r1
 8001aea:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001aee:	431a      	orrs	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8001af6:	bf00      	nop
 8001af8:	3714      	adds	r7, #20
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	000fffff 	.word	0x000fffff

08001b08 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	689a      	ldr	r2, [r3, #8]
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001b16:	4013      	ands	r3, r2
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6093      	str	r3, [r2, #8]
}
 8001b1c:	bf00      	nop
 8001b1e:	370c      	adds	r7, #12
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	5fffffc0 	.word	0x5fffffc0

08001b2c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	689b      	ldr	r3, [r3, #8]
 8001b38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b40:	d101      	bne.n	8001b46 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b42:	2301      	movs	r3, #1
 8001b44:	e000      	b.n	8001b48 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b46:	2300      	movs	r3, #0
}
 8001b48:	4618      	mov	r0, r3
 8001b4a:	370c      	adds	r7, #12
 8001b4c:	46bd      	mov	sp, r7
 8001b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b52:	4770      	bx	lr

08001b54 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689a      	ldr	r2, [r3, #8]
 8001b60:	4b05      	ldr	r3, [pc, #20]	; (8001b78 <LL_ADC_EnableInternalRegulator+0x24>)
 8001b62:	4013      	ands	r3, r2
 8001b64:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	6fffffc0 	.word	0x6fffffc0

08001b7c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b8c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b90:	d101      	bne.n	8001b96 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b92:	2301      	movs	r3, #1
 8001b94:	e000      	b.n	8001b98 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b96:	2300      	movs	r3, #0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	370c      	adds	r7, #12
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001ba4:	b480      	push	{r7}
 8001ba6:	b083      	sub	sp, #12
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	689b      	ldr	r3, [r3, #8]
 8001bb0:	f003 0301 	and.w	r3, r3, #1
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d101      	bne.n	8001bbc <LL_ADC_IsEnabled+0x18>
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e000      	b.n	8001bbe <LL_ADC_IsEnabled+0x1a>
 8001bbc:	2300      	movs	r3, #0
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	370c      	adds	r7, #12
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr

08001bca <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bca:	b480      	push	{r7}
 8001bcc:	b083      	sub	sp, #12
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	f003 0304 	and.w	r3, r3, #4
 8001bda:	2b04      	cmp	r3, #4
 8001bdc:	d101      	bne.n	8001be2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e000      	b.n	8001be4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001be2:	2300      	movs	r3, #0
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	370c      	adds	r7, #12
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr

08001bf0 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b08      	cmp	r3, #8
 8001c02:	d101      	bne.n	8001c08 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c04:	2301      	movs	r3, #1
 8001c06:	e000      	b.n	8001c0a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c08:	2300      	movs	r3, #0
}
 8001c0a:	4618      	mov	r0, r3
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c18:	b590      	push	{r4, r7, lr}
 8001c1a:	b089      	sub	sp, #36	; 0x24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c20:	2300      	movs	r3, #0
 8001c22:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c24:	2300      	movs	r3, #0
 8001c26:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d101      	bne.n	8001c32 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e18f      	b.n	8001f52 <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	68db      	ldr	r3, [r3, #12]
 8001c36:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d109      	bne.n	8001c54 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c40:	6878      	ldr	r0, [r7, #4]
 8001c42:	f7ff fb8d 	bl	8001360 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	2200      	movs	r2, #0
 8001c4a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff ff67 	bl	8001b2c <LL_ADC_IsDeepPowerDownEnabled>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d004      	beq.n	8001c6e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4618      	mov	r0, r3
 8001c6a:	f7ff ff4d 	bl	8001b08 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4618      	mov	r0, r3
 8001c74:	f7ff ff82 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d114      	bne.n	8001ca8 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff ff66 	bl	8001b54 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c88:	4b87      	ldr	r3, [pc, #540]	; (8001ea8 <HAL_ADC_Init+0x290>)
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	099b      	lsrs	r3, r3, #6
 8001c8e:	4a87      	ldr	r2, [pc, #540]	; (8001eac <HAL_ADC_Init+0x294>)
 8001c90:	fba2 2303 	umull	r2, r3, r2, r3
 8001c94:	099b      	lsrs	r3, r3, #6
 8001c96:	3301      	adds	r3, #1
 8001c98:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001c9a:	e002      	b.n	8001ca2 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	3b01      	subs	r3, #1
 8001ca0:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001ca2:	68bb      	ldr	r3, [r7, #8]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d1f9      	bne.n	8001c9c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff65 	bl	8001b7c <LL_ADC_IsInternalRegulatorEnabled>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cbc:	f043 0210 	orr.w	r2, r3, #16
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cc8:	f043 0201 	orr.w	r2, r3, #1
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f7ff ff76 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001cde:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce4:	f003 0310 	and.w	r3, r3, #16
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f040 8129 	bne.w	8001f40 <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	f040 8125 	bne.w	8001f40 <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfa:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001cfe:	f043 0202 	orr.w	r2, r3, #2
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f7ff ff4a 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d10:	4603      	mov	r3, r0
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d136      	bne.n	8001d84 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	4a65      	ldr	r2, [pc, #404]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d004      	beq.n	8001d2a <HAL_ADC_Init+0x112>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a63      	ldr	r2, [pc, #396]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d10e      	bne.n	8001d48 <HAL_ADC_Init+0x130>
 8001d2a:	4861      	ldr	r0, [pc, #388]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d2c:	f7ff ff3a 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d30:	4604      	mov	r4, r0
 8001d32:	4860      	ldr	r0, [pc, #384]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d34:	f7ff ff36 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	4323      	orrs	r3, r4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e008      	b.n	8001d5a <HAL_ADC_Init+0x142>
 8001d48:	485b      	ldr	r0, [pc, #364]	; (8001eb8 <HAL_ADC_Init+0x2a0>)
 8001d4a:	f7ff ff2b 	bl	8001ba4 <LL_ADC_IsEnabled>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	bf0c      	ite	eq
 8001d54:	2301      	moveq	r3, #1
 8001d56:	2300      	movne	r3, #0
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d012      	beq.n	8001d84 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a53      	ldr	r2, [pc, #332]	; (8001eb0 <HAL_ADC_Init+0x298>)
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d004      	beq.n	8001d72 <HAL_ADC_Init+0x15a>
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	4a51      	ldr	r2, [pc, #324]	; (8001eb4 <HAL_ADC_Init+0x29c>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x15e>
 8001d72:	4a52      	ldr	r2, [pc, #328]	; (8001ebc <HAL_ADC_Init+0x2a4>)
 8001d74:	e000      	b.n	8001d78 <HAL_ADC_Init+0x160>
 8001d76:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_ADC_Init+0x2a8>)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4610      	mov	r0, r2
 8001d80:	f7ff fdbe 	bl	8001900 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8001d84:	f7ff fd9a 	bl	80018bc <HAL_GetREVID>
 8001d88:	4603      	mov	r3, r0
 8001d8a:	f241 0203 	movw	r2, #4099	; 0x1003
 8001d8e:	4293      	cmp	r3, r2
 8001d90:	d914      	bls.n	8001dbc <HAL_ADC_Init+0x1a4>
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	2b10      	cmp	r3, #16
 8001d98:	d110      	bne.n	8001dbc <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	7d5b      	ldrb	r3, [r3, #21]
 8001d9e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001da4:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001daa:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	7f1b      	ldrb	r3, [r3, #28]
 8001db0:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8001db2:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001db4:	f043 030c 	orr.w	r3, r3, #12
 8001db8:	61bb      	str	r3, [r7, #24]
 8001dba:	e00d      	b.n	8001dd8 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	7d5b      	ldrb	r3, [r3, #21]
 8001dc0:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dc6:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001dcc:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	7f1b      	ldrb	r3, [r3, #28]
 8001dd2:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001dd4:	4313      	orrs	r3, r2
 8001dd6:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	7f1b      	ldrb	r3, [r3, #28]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d106      	bne.n	8001dee <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6a1b      	ldr	r3, [r3, #32]
 8001de4:	3b01      	subs	r3, #1
 8001de6:	045b      	lsls	r3, r3, #17
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4313      	orrs	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d009      	beq.n	8001e0a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dfa:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e02:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001e04:	69ba      	ldr	r2, [r7, #24]
 8001e06:	4313      	orrs	r3, r2
 8001e08:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68da      	ldr	r2, [r3, #12]
 8001e10:	4b2c      	ldr	r3, [pc, #176]	; (8001ec4 <HAL_ADC_Init+0x2ac>)
 8001e12:	4013      	ands	r3, r2
 8001e14:	687a      	ldr	r2, [r7, #4]
 8001e16:	6812      	ldr	r2, [r2, #0]
 8001e18:	69b9      	ldr	r1, [r7, #24]
 8001e1a:	430b      	orrs	r3, r1
 8001e1c:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	4618      	mov	r0, r3
 8001e24:	f7ff fed1 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001e28:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4618      	mov	r0, r3
 8001e30:	f7ff fede 	bl	8001bf0 <LL_ADC_INJ_IsConversionOngoing>
 8001e34:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d15f      	bne.n	8001efc <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d15c      	bne.n	8001efc <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	7d1b      	ldrb	r3, [r3, #20]
 8001e46:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68da      	ldr	r2, [r3, #12]
 8001e56:	4b1c      	ldr	r3, [pc, #112]	; (8001ec8 <HAL_ADC_Init+0x2b0>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	687a      	ldr	r2, [r7, #4]
 8001e5c:	6812      	ldr	r2, [r2, #0]
 8001e5e:	69b9      	ldr	r1, [r7, #24]
 8001e60:	430b      	orrs	r3, r1
 8001e62:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e6a:	2b01      	cmp	r3, #1
 8001e6c:	d130      	bne.n	8001ed0 <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e72:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	691a      	ldr	r2, [r3, #16]
 8001e7a:	4b14      	ldr	r3, [pc, #80]	; (8001ecc <HAL_ADC_Init+0x2b4>)
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e82:	3a01      	subs	r2, #1
 8001e84:	0411      	lsls	r1, r2, #16
 8001e86:	687a      	ldr	r2, [r7, #4]
 8001e88:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e8a:	4311      	orrs	r1, r2
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001e90:	4311      	orrs	r1, r2
 8001e92:	687a      	ldr	r2, [r7, #4]
 8001e94:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e96:	430a      	orrs	r2, r1
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f042 0201 	orr.w	r2, r2, #1
 8001ea2:	611a      	str	r2, [r3, #16]
 8001ea4:	e01c      	b.n	8001ee0 <HAL_ADC_Init+0x2c8>
 8001ea6:	bf00      	nop
 8001ea8:	240000cc 	.word	0x240000cc
 8001eac:	053e2d63 	.word	0x053e2d63
 8001eb0:	40022000 	.word	0x40022000
 8001eb4:	40022100 	.word	0x40022100
 8001eb8:	58026000 	.word	0x58026000
 8001ebc:	40022300 	.word	0x40022300
 8001ec0:	58026300 	.word	0x58026300
 8001ec4:	fff0c003 	.word	0xfff0c003
 8001ec8:	ffffbffc 	.word	0xffffbffc
 8001ecc:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f022 0201 	bic.w	r2, r2, #1
 8001ede:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001ef6:	6878      	ldr	r0, [r7, #4]
 8001ef8:	f000 fb8c 	bl	8002614 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	68db      	ldr	r3, [r3, #12]
 8001f00:	2b01      	cmp	r3, #1
 8001f02:	d10c      	bne.n	8001f1e <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f023 010f 	bic.w	r1, r3, #15
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	699b      	ldr	r3, [r3, #24]
 8001f12:	1e5a      	subs	r2, r3, #1
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	631a      	str	r2, [r3, #48]	; 0x30
 8001f1c:	e007      	b.n	8001f2e <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f022 020f 	bic.w	r2, r2, #15
 8001f2c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f32:	f023 0303 	bic.w	r3, r3, #3
 8001f36:	f043 0201 	orr.w	r2, r3, #1
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	655a      	str	r2, [r3, #84]	; 0x54
 8001f3e:	e007      	b.n	8001f50 <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f44:	f043 0210 	orr.w	r2, r3, #16
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f50:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3724      	adds	r7, #36	; 0x24
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd90      	pop	{r4, r7, pc}
 8001f5a:	bf00      	nop

08001f5c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001f5c:	b590      	push	{r4, r7, lr}
 8001f5e:	b0a1      	sub	sp, #132	; 0x84
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001f70:	683b      	ldr	r3, [r7, #0]
 8001f72:	68db      	ldr	r3, [r3, #12]
 8001f74:	4a65      	ldr	r2, [pc, #404]	; (800210c <HAL_ADC_ConfigChannel+0x1b0>)
 8001f76:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d101      	bne.n	8001f86 <HAL_ADC_ConfigChannel+0x2a>
 8001f82:	2302      	movs	r3, #2
 8001f84:	e32e      	b.n	80025e4 <HAL_ADC_ConfigChannel+0x688>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	2201      	movs	r2, #1
 8001f8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4618      	mov	r0, r3
 8001f94:	f7ff fe19 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	f040 8313 	bne.w	80025c6 <HAL_ADC_ConfigChannel+0x66a>
  {
    if (!(__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel)))
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	db2c      	blt.n	8002002 <HAL_ADC_ConfigChannel+0xa6>
        /* ADC channels preselection */
        hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
      }
#else
      /* ADC channels preselection */
      hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d108      	bne.n	8001fc6 <HAL_ADC_ConfigChannel+0x6a>
 8001fb4:	683b      	ldr	r3, [r7, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	0e9b      	lsrs	r3, r3, #26
 8001fba:	f003 031f 	and.w	r3, r3, #31
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc4:	e016      	b.n	8001ff4 <HAL_ADC_ConfigChannel+0x98>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fcc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001fce:	fa93 f3a3 	rbit	r3, r3
 8001fd2:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001fd4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001fd6:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d101      	bne.n	8001fe2 <HAL_ADC_ConfigChannel+0x86>
  {
    return 32U;
 8001fde:	2320      	movs	r3, #32
 8001fe0:	e003      	b.n	8001fea <HAL_ADC_ConfigChannel+0x8e>
  }
  return __builtin_clz(value);
 8001fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001fe4:	fab3 f383 	clz	r3, r3
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f003 031f 	and.w	r3, r3, #31
 8001fee:	2201      	movs	r2, #1
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	687a      	ldr	r2, [r7, #4]
 8001ff6:	6812      	ldr	r2, [r2, #0]
 8001ff8:	69d1      	ldr	r1, [r2, #28]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	6812      	ldr	r2, [r2, #0]
 8001ffe:	430b      	orrs	r3, r1
 8002000:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */
    }

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6818      	ldr	r0, [r3, #0]
 8002006:	683b      	ldr	r3, [r7, #0]
 8002008:	6859      	ldr	r1, [r3, #4]
 800200a:	683b      	ldr	r3, [r7, #0]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	461a      	mov	r2, r3
 8002010:	f7ff fcfe 	bl	8001a10 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fdd6 	bl	8001bca <LL_ADC_REG_IsConversionOngoing>
 800201e:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	4618      	mov	r0, r3
 8002026:	f7ff fde3 	bl	8001bf0 <LL_ADC_INJ_IsConversionOngoing>
 800202a:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800202c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800202e:	2b00      	cmp	r3, #0
 8002030:	f040 80b8 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x248>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002034:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002036:	2b00      	cmp	r3, #0
 8002038:	f040 80b4 	bne.w	80021a4 <HAL_ADC_ConfigChannel+0x248>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6818      	ldr	r0, [r3, #0]
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	6819      	ldr	r1, [r3, #0]
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	461a      	mov	r2, r3
 800204a:	f7ff fd0d 	bl	8001a68 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800204e:	4b30      	ldr	r3, [pc, #192]	; (8002110 <HAL_ADC_ConfigChannel+0x1b4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8002056:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800205a:	d10b      	bne.n	8002074 <HAL_ADC_ConfigChannel+0x118>
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	695a      	ldr	r2, [r3, #20]
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	089b      	lsrs	r3, r3, #2
 8002068:	f003 0307 	and.w	r3, r3, #7
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	fa02 f303 	lsl.w	r3, r2, r3
 8002072:	e01d      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x154>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68db      	ldr	r3, [r3, #12]
 800207a:	f003 0310 	and.w	r3, r3, #16
 800207e:	2b00      	cmp	r3, #0
 8002080:	d10b      	bne.n	800209a <HAL_ADC_ConfigChannel+0x13e>
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	695a      	ldr	r2, [r3, #20]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	089b      	lsrs	r3, r3, #2
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	005b      	lsls	r3, r3, #1
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	e00a      	b.n	80020b0 <HAL_ADC_ConfigChannel+0x154>
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695a      	ldr	r2, [r3, #20]
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	089b      	lsrs	r3, r3, #2
 80020a6:	f003 0304 	and.w	r3, r3, #4
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	fa02 f303 	lsl.w	r3, r2, r3
 80020b0:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80020b2:	683b      	ldr	r3, [r7, #0]
 80020b4:	691b      	ldr	r3, [r3, #16]
 80020b6:	2b04      	cmp	r3, #4
 80020b8:	d02c      	beq.n	8002114 <HAL_ADC_ConfigChannel+0x1b8>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	6919      	ldr	r1, [r3, #16]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	681a      	ldr	r2, [r3, #0]
 80020c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80020c8:	f7ff fc4e 	bl	8001968 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6818      	ldr	r0, [r3, #0]
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	6919      	ldr	r1, [r3, #16]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	7e5b      	ldrb	r3, [r3, #25]
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x186>
 80020dc:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80020e0:	e000      	b.n	80020e4 <HAL_ADC_ConfigChannel+0x188>
 80020e2:	2300      	movs	r3, #0
 80020e4:	461a      	mov	r2, r3
 80020e6:	f7ff fc78 	bl	80019da <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6818      	ldr	r0, [r3, #0]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	6919      	ldr	r1, [r3, #16]
 80020f2:	683b      	ldr	r3, [r7, #0]
 80020f4:	7e1b      	ldrb	r3, [r3, #24]
 80020f6:	2b01      	cmp	r3, #1
 80020f8:	d102      	bne.n	8002100 <HAL_ADC_ConfigChannel+0x1a4>
 80020fa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80020fe:	e000      	b.n	8002102 <HAL_ADC_ConfigChannel+0x1a6>
 8002100:	2300      	movs	r3, #0
 8002102:	461a      	mov	r2, r3
 8002104:	f7ff fc50 	bl	80019a8 <LL_ADC_SetDataRightShift>
 8002108:	e04c      	b.n	80021a4 <HAL_ADC_ConfigChannel+0x248>
 800210a:	bf00      	nop
 800210c:	47ff0000 	.word	0x47ff0000
 8002110:	5c001000 	.word	0x5c001000
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800211a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	069b      	lsls	r3, r3, #26
 8002124:	429a      	cmp	r2, r3
 8002126:	d107      	bne.n	8002138 <HAL_ADC_ConfigChannel+0x1dc>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002136:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800213e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	069b      	lsls	r3, r3, #26
 8002148:	429a      	cmp	r2, r3
 800214a:	d107      	bne.n	800215c <HAL_ADC_ConfigChannel+0x200>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800215a:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002162:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	069b      	lsls	r3, r3, #26
 800216c:	429a      	cmp	r2, r3
 800216e:	d107      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x224>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800217e:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002186:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	069b      	lsls	r3, r3, #26
 8002190:	429a      	cmp	r2, r3
 8002192:	d107      	bne.n	80021a4 <HAL_ADC_ConfigChannel+0x248>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80021a2:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fcfb 	bl	8001ba4 <LL_ADC_IsEnabled>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 8211 	bne.w	80025d8 <HAL_ADC_ConfigChannel+0x67c>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6818      	ldr	r0, [r3, #0]
 80021ba:	683b      	ldr	r3, [r7, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	461a      	mov	r2, r3
 80021c4:	f7ff fc7c 	bl	8001ac0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	4aa1      	ldr	r2, [pc, #644]	; (8002454 <HAL_ADC_ConfigChannel+0x4f8>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	f040 812e 	bne.w	8002430 <HAL_ADC_ConfigChannel+0x4d4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80021d8:	683b      	ldr	r3, [r7, #0]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10b      	bne.n	80021fc <HAL_ADC_ConfigChannel+0x2a0>
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	0e9b      	lsrs	r3, r3, #26
 80021ea:	3301      	adds	r3, #1
 80021ec:	f003 031f 	and.w	r3, r3, #31
 80021f0:	2b09      	cmp	r3, #9
 80021f2:	bf94      	ite	ls
 80021f4:	2301      	movls	r3, #1
 80021f6:	2300      	movhi	r3, #0
 80021f8:	b2db      	uxtb	r3, r3
 80021fa:	e019      	b.n	8002230 <HAL_ADC_ConfigChannel+0x2d4>
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 800220a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800220c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 800220e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002210:	2b00      	cmp	r3, #0
 8002212:	d101      	bne.n	8002218 <HAL_ADC_ConfigChannel+0x2bc>
    return 32U;
 8002214:	2320      	movs	r3, #32
 8002216:	e003      	b.n	8002220 <HAL_ADC_ConfigChannel+0x2c4>
  return __builtin_clz(value);
 8002218:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800221a:	fab3 f383 	clz	r3, r3
 800221e:	b2db      	uxtb	r3, r3
 8002220:	3301      	adds	r3, #1
 8002222:	f003 031f 	and.w	r3, r3, #31
 8002226:	2b09      	cmp	r3, #9
 8002228:	bf94      	ite	ls
 800222a:	2301      	movls	r3, #1
 800222c:	2300      	movhi	r3, #0
 800222e:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002230:	2b00      	cmp	r3, #0
 8002232:	d079      	beq.n	8002328 <HAL_ADC_ConfigChannel+0x3cc>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800223c:	2b00      	cmp	r3, #0
 800223e:	d107      	bne.n	8002250 <HAL_ADC_ConfigChannel+0x2f4>
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	0e9b      	lsrs	r3, r3, #26
 8002246:	3301      	adds	r3, #1
 8002248:	069b      	lsls	r3, r3, #26
 800224a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800224e:	e015      	b.n	800227c <HAL_ADC_ConfigChannel+0x320>
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002256:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002258:	fa93 f3a3 	rbit	r3, r3
 800225c:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 800225e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002260:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 8002262:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002264:	2b00      	cmp	r3, #0
 8002266:	d101      	bne.n	800226c <HAL_ADC_ConfigChannel+0x310>
    return 32U;
 8002268:	2320      	movs	r3, #32
 800226a:	e003      	b.n	8002274 <HAL_ADC_ConfigChannel+0x318>
  return __builtin_clz(value);
 800226c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3301      	adds	r3, #1
 8002276:	069b      	lsls	r3, r3, #26
 8002278:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002284:	2b00      	cmp	r3, #0
 8002286:	d109      	bne.n	800229c <HAL_ADC_ConfigChannel+0x340>
 8002288:	683b      	ldr	r3, [r7, #0]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	0e9b      	lsrs	r3, r3, #26
 800228e:	3301      	adds	r3, #1
 8002290:	f003 031f 	and.w	r3, r3, #31
 8002294:	2101      	movs	r1, #1
 8002296:	fa01 f303 	lsl.w	r3, r1, r3
 800229a:	e017      	b.n	80022cc <HAL_ADC_ConfigChannel+0x370>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80022a4:	fa93 f3a3 	rbit	r3, r3
 80022a8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 80022aa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80022ac:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 80022ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d101      	bne.n	80022b8 <HAL_ADC_ConfigChannel+0x35c>
    return 32U;
 80022b4:	2320      	movs	r3, #32
 80022b6:	e003      	b.n	80022c0 <HAL_ADC_ConfigChannel+0x364>
  return __builtin_clz(value);
 80022b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80022ba:	fab3 f383 	clz	r3, r3
 80022be:	b2db      	uxtb	r3, r3
 80022c0:	3301      	adds	r3, #1
 80022c2:	f003 031f 	and.w	r3, r3, #31
 80022c6:	2101      	movs	r1, #1
 80022c8:	fa01 f303 	lsl.w	r3, r1, r3
 80022cc:	ea42 0103 	orr.w	r1, r2, r3
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d10a      	bne.n	80022f2 <HAL_ADC_ConfigChannel+0x396>
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	0e9b      	lsrs	r3, r3, #26
 80022e2:	3301      	adds	r3, #1
 80022e4:	f003 021f 	and.w	r2, r3, #31
 80022e8:	4613      	mov	r3, r2
 80022ea:	005b      	lsls	r3, r3, #1
 80022ec:	4413      	add	r3, r2
 80022ee:	051b      	lsls	r3, r3, #20
 80022f0:	e018      	b.n	8002324 <HAL_ADC_ConfigChannel+0x3c8>
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80022fa:	fa93 f3a3 	rbit	r3, r3
 80022fe:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002302:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 8002304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_ADC_ConfigChannel+0x3b2>
    return 32U;
 800230a:	2320      	movs	r3, #32
 800230c:	e003      	b.n	8002316 <HAL_ADC_ConfigChannel+0x3ba>
  return __builtin_clz(value);
 800230e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002310:	fab3 f383 	clz	r3, r3
 8002314:	b2db      	uxtb	r3, r3
 8002316:	3301      	adds	r3, #1
 8002318:	f003 021f 	and.w	r2, r3, #31
 800231c:	4613      	mov	r3, r2
 800231e:	005b      	lsls	r3, r3, #1
 8002320:	4413      	add	r3, r2
 8002322:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002324:	430b      	orrs	r3, r1
 8002326:	e07e      	b.n	8002426 <HAL_ADC_ConfigChannel+0x4ca>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002330:	2b00      	cmp	r3, #0
 8002332:	d107      	bne.n	8002344 <HAL_ADC_ConfigChannel+0x3e8>
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	0e9b      	lsrs	r3, r3, #26
 800233a:	3301      	adds	r3, #1
 800233c:	069b      	lsls	r3, r3, #26
 800233e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002342:	e015      	b.n	8002370 <HAL_ADC_ConfigChannel+0x414>
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800234c:	fa93 f3a3 	rbit	r3, r3
 8002350:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8002352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8002356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002358:	2b00      	cmp	r3, #0
 800235a:	d101      	bne.n	8002360 <HAL_ADC_ConfigChannel+0x404>
    return 32U;
 800235c:	2320      	movs	r3, #32
 800235e:	e003      	b.n	8002368 <HAL_ADC_ConfigChannel+0x40c>
  return __builtin_clz(value);
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	3301      	adds	r3, #1
 800236a:	069b      	lsls	r3, r3, #26
 800236c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002378:	2b00      	cmp	r3, #0
 800237a:	d109      	bne.n	8002390 <HAL_ADC_ConfigChannel+0x434>
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	0e9b      	lsrs	r3, r3, #26
 8002382:	3301      	adds	r3, #1
 8002384:	f003 031f 	and.w	r3, r3, #31
 8002388:	2101      	movs	r1, #1
 800238a:	fa01 f303 	lsl.w	r3, r1, r3
 800238e:	e017      	b.n	80023c0 <HAL_ADC_ConfigChannel+0x464>
 8002390:	683b      	ldr	r3, [r7, #0]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	fa93 f3a3 	rbit	r3, r3
 800239c:	61bb      	str	r3, [r7, #24]
  return result;
 800239e:	69bb      	ldr	r3, [r7, #24]
 80023a0:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80023a2:	6a3b      	ldr	r3, [r7, #32]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d101      	bne.n	80023ac <HAL_ADC_ConfigChannel+0x450>
    return 32U;
 80023a8:	2320      	movs	r3, #32
 80023aa:	e003      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x458>
  return __builtin_clz(value);
 80023ac:	6a3b      	ldr	r3, [r7, #32]
 80023ae:	fab3 f383 	clz	r3, r3
 80023b2:	b2db      	uxtb	r3, r3
 80023b4:	3301      	adds	r3, #1
 80023b6:	f003 031f 	and.w	r3, r3, #31
 80023ba:	2101      	movs	r1, #1
 80023bc:	fa01 f303 	lsl.w	r3, r1, r3
 80023c0:	ea42 0103 	orr.w	r1, r2, r3
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80023cc:	2b00      	cmp	r3, #0
 80023ce:	d10d      	bne.n	80023ec <HAL_ADC_ConfigChannel+0x490>
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	0e9b      	lsrs	r3, r3, #26
 80023d6:	3301      	adds	r3, #1
 80023d8:	f003 021f 	and.w	r2, r3, #31
 80023dc:	4613      	mov	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	4413      	add	r3, r2
 80023e2:	3b1e      	subs	r3, #30
 80023e4:	051b      	lsls	r3, r3, #20
 80023e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80023ea:	e01b      	b.n	8002424 <HAL_ADC_ConfigChannel+0x4c8>
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f2:	693b      	ldr	r3, [r7, #16]
 80023f4:	fa93 f3a3 	rbit	r3, r3
 80023f8:	60fb      	str	r3, [r7, #12]
  return result;
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80023fe:	697b      	ldr	r3, [r7, #20]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_ConfigChannel+0x4ac>
    return 32U;
 8002404:	2320      	movs	r3, #32
 8002406:	e003      	b.n	8002410 <HAL_ADC_ConfigChannel+0x4b4>
  return __builtin_clz(value);
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	fab3 f383 	clz	r3, r3
 800240e:	b2db      	uxtb	r3, r3
 8002410:	3301      	adds	r3, #1
 8002412:	f003 021f 	and.w	r2, r3, #31
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	3b1e      	subs	r3, #30
 800241e:	051b      	lsls	r3, r3, #20
 8002420:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002424:	430b      	orrs	r3, r1
 8002426:	683a      	ldr	r2, [r7, #0]
 8002428:	6892      	ldr	r2, [r2, #8]
 800242a:	4619      	mov	r1, r3
 800242c:	f7ff fb1c 	bl	8001a68 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	2b00      	cmp	r3, #0
 8002436:	f280 80cf 	bge.w	80025d8 <HAL_ADC_ConfigChannel+0x67c>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a06      	ldr	r2, [pc, #24]	; (8002458 <HAL_ADC_ConfigChannel+0x4fc>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d004      	beq.n	800244e <HAL_ADC_ConfigChannel+0x4f2>
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	4a04      	ldr	r2, [pc, #16]	; (800245c <HAL_ADC_ConfigChannel+0x500>)
 800244a:	4293      	cmp	r3, r2
 800244c:	d10a      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x508>
 800244e:	4b04      	ldr	r3, [pc, #16]	; (8002460 <HAL_ADC_ConfigChannel+0x504>)
 8002450:	e009      	b.n	8002466 <HAL_ADC_ConfigChannel+0x50a>
 8002452:	bf00      	nop
 8002454:	47ff0000 	.word	0x47ff0000
 8002458:	40022000 	.word	0x40022000
 800245c:	40022100 	.word	0x40022100
 8002460:	40022300 	.word	0x40022300
 8002464:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_ADC_ConfigChannel+0x690>)
 8002466:	4618      	mov	r0, r3
 8002468:	f7ff fa70 	bl	800194c <LL_ADC_GetCommonPathInternalCh>
 800246c:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a5f      	ldr	r2, [pc, #380]	; (80025f0 <HAL_ADC_ConfigChannel+0x694>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d004      	beq.n	8002482 <HAL_ADC_ConfigChannel+0x526>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a5d      	ldr	r2, [pc, #372]	; (80025f4 <HAL_ADC_ConfigChannel+0x698>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d10e      	bne.n	80024a0 <HAL_ADC_ConfigChannel+0x544>
 8002482:	485b      	ldr	r0, [pc, #364]	; (80025f0 <HAL_ADC_ConfigChannel+0x694>)
 8002484:	f7ff fb8e 	bl	8001ba4 <LL_ADC_IsEnabled>
 8002488:	4604      	mov	r4, r0
 800248a:	485a      	ldr	r0, [pc, #360]	; (80025f4 <HAL_ADC_ConfigChannel+0x698>)
 800248c:	f7ff fb8a 	bl	8001ba4 <LL_ADC_IsEnabled>
 8002490:	4603      	mov	r3, r0
 8002492:	4323      	orrs	r3, r4
 8002494:	2b00      	cmp	r3, #0
 8002496:	bf0c      	ite	eq
 8002498:	2301      	moveq	r3, #1
 800249a:	2300      	movne	r3, #0
 800249c:	b2db      	uxtb	r3, r3
 800249e:	e008      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x556>
 80024a0:	4855      	ldr	r0, [pc, #340]	; (80025f8 <HAL_ADC_ConfigChannel+0x69c>)
 80024a2:	f7ff fb7f 	bl	8001ba4 <LL_ADC_IsEnabled>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	bf0c      	ite	eq
 80024ac:	2301      	moveq	r3, #1
 80024ae:	2300      	movne	r3, #0
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d07d      	beq.n	80025b2 <HAL_ADC_ConfigChannel+0x656>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80024b6:	683b      	ldr	r3, [r7, #0]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_ADC_ConfigChannel+0x6a0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d130      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x5c6>
 80024c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024c2:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d12b      	bne.n	8002522 <HAL_ADC_ConfigChannel+0x5c6>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a4a      	ldr	r2, [pc, #296]	; (80025f8 <HAL_ADC_ConfigChannel+0x69c>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	f040 8081 	bne.w	80025d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4a45      	ldr	r2, [pc, #276]	; (80025f0 <HAL_ADC_ConfigChannel+0x694>)
 80024dc:	4293      	cmp	r3, r2
 80024de:	d004      	beq.n	80024ea <HAL_ADC_ConfigChannel+0x58e>
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a43      	ldr	r2, [pc, #268]	; (80025f4 <HAL_ADC_ConfigChannel+0x698>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d101      	bne.n	80024ee <HAL_ADC_ConfigChannel+0x592>
 80024ea:	4a45      	ldr	r2, [pc, #276]	; (8002600 <HAL_ADC_ConfigChannel+0x6a4>)
 80024ec:	e000      	b.n	80024f0 <HAL_ADC_ConfigChannel+0x594>
 80024ee:	4a3f      	ldr	r2, [pc, #252]	; (80025ec <HAL_ADC_ConfigChannel+0x690>)
 80024f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024f2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80024f6:	4619      	mov	r1, r3
 80024f8:	4610      	mov	r0, r2
 80024fa:	f7ff fa14 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80024fe:	4b41      	ldr	r3, [pc, #260]	; (8002604 <HAL_ADC_ConfigChannel+0x6a8>)
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	099b      	lsrs	r3, r3, #6
 8002504:	4a40      	ldr	r2, [pc, #256]	; (8002608 <HAL_ADC_ConfigChannel+0x6ac>)
 8002506:	fba2 2303 	umull	r2, r3, r2, r3
 800250a:	099b      	lsrs	r3, r3, #6
 800250c:	3301      	adds	r3, #1
 800250e:	005b      	lsls	r3, r3, #1
 8002510:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002512:	e002      	b.n	800251a <HAL_ADC_ConfigChannel+0x5be>
              {
                wait_loop_index--;
 8002514:	68bb      	ldr	r3, [r7, #8]
 8002516:	3b01      	subs	r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d1f9      	bne.n	8002514 <HAL_ADC_ConfigChannel+0x5b8>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002520:	e05a      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002522:	683b      	ldr	r3, [r7, #0]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4a39      	ldr	r2, [pc, #228]	; (800260c <HAL_ADC_ConfigChannel+0x6b0>)
 8002528:	4293      	cmp	r3, r2
 800252a:	d11e      	bne.n	800256a <HAL_ADC_ConfigChannel+0x60e>
 800252c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800252e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d119      	bne.n	800256a <HAL_ADC_ConfigChannel+0x60e>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4a2f      	ldr	r2, [pc, #188]	; (80025f8 <HAL_ADC_ConfigChannel+0x69c>)
 800253c:	4293      	cmp	r3, r2
 800253e:	d14b      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a2a      	ldr	r2, [pc, #168]	; (80025f0 <HAL_ADC_ConfigChannel+0x694>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d004      	beq.n	8002554 <HAL_ADC_ConfigChannel+0x5f8>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a29      	ldr	r2, [pc, #164]	; (80025f4 <HAL_ADC_ConfigChannel+0x698>)
 8002550:	4293      	cmp	r3, r2
 8002552:	d101      	bne.n	8002558 <HAL_ADC_ConfigChannel+0x5fc>
 8002554:	4a2a      	ldr	r2, [pc, #168]	; (8002600 <HAL_ADC_ConfigChannel+0x6a4>)
 8002556:	e000      	b.n	800255a <HAL_ADC_ConfigChannel+0x5fe>
 8002558:	4a24      	ldr	r2, [pc, #144]	; (80025ec <HAL_ADC_ConfigChannel+0x690>)
 800255a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002560:	4619      	mov	r1, r3
 8002562:	4610      	mov	r0, r2
 8002564:	f7ff f9df 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002568:	e036      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4a28      	ldr	r2, [pc, #160]	; (8002610 <HAL_ADC_ConfigChannel+0x6b4>)
 8002570:	4293      	cmp	r3, r2
 8002572:	d131      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
 8002574:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d12c      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	4a1d      	ldr	r2, [pc, #116]	; (80025f8 <HAL_ADC_ConfigChannel+0x69c>)
 8002584:	4293      	cmp	r3, r2
 8002586:	d127      	bne.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a18      	ldr	r2, [pc, #96]	; (80025f0 <HAL_ADC_ConfigChannel+0x694>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_ADC_ConfigChannel+0x640>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a17      	ldr	r2, [pc, #92]	; (80025f4 <HAL_ADC_ConfigChannel+0x698>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d101      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x644>
 800259c:	4a18      	ldr	r2, [pc, #96]	; (8002600 <HAL_ADC_ConfigChannel+0x6a4>)
 800259e:	e000      	b.n	80025a2 <HAL_ADC_ConfigChannel+0x646>
 80025a0:	4a12      	ldr	r2, [pc, #72]	; (80025ec <HAL_ADC_ConfigChannel+0x690>)
 80025a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80025a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025a8:	4619      	mov	r1, r3
 80025aa:	4610      	mov	r0, r2
 80025ac:	f7ff f9bb 	bl	8001926 <LL_ADC_SetCommonPathInternalCh>
 80025b0:	e012      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025b6:	f043 0220 	orr.w	r2, r3, #32
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80025c4:	e008      	b.n	80025d8 <HAL_ADC_ConfigChannel+0x67c>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2200      	movs	r2, #0
 80025dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 80025e0:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80025e4:	4618      	mov	r0, r3
 80025e6:	3784      	adds	r7, #132	; 0x84
 80025e8:	46bd      	mov	sp, r7
 80025ea:	bd90      	pop	{r4, r7, pc}
 80025ec:	58026300 	.word	0x58026300
 80025f0:	40022000 	.word	0x40022000
 80025f4:	40022100 	.word	0x40022100
 80025f8:	58026000 	.word	0x58026000
 80025fc:	cb840000 	.word	0xcb840000
 8002600:	40022300 	.word	0x40022300
 8002604:	240000cc 	.word	0x240000cc
 8002608:	053e2d63 	.word	0x053e2d63
 800260c:	c7520000 	.word	0xc7520000
 8002610:	cfb80000 	.word	0xcfb80000

08002614 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b084      	sub	sp, #16
 8002618:	af00      	add	r7, sp, #0
 800261a:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a7a      	ldr	r2, [pc, #488]	; (800280c <ADC_ConfigureBoostMode+0x1f8>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d004      	beq.n	8002630 <ADC_ConfigureBoostMode+0x1c>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4a79      	ldr	r2, [pc, #484]	; (8002810 <ADC_ConfigureBoostMode+0x1fc>)
 800262c:	4293      	cmp	r3, r2
 800262e:	d109      	bne.n	8002644 <ADC_ConfigureBoostMode+0x30>
 8002630:	4b78      	ldr	r3, [pc, #480]	; (8002814 <ADC_ConfigureBoostMode+0x200>)
 8002632:	689b      	ldr	r3, [r3, #8]
 8002634:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002638:	2b00      	cmp	r3, #0
 800263a:	bf14      	ite	ne
 800263c:	2301      	movne	r3, #1
 800263e:	2300      	moveq	r3, #0
 8002640:	b2db      	uxtb	r3, r3
 8002642:	e008      	b.n	8002656 <ADC_ConfigureBoostMode+0x42>
 8002644:	4b74      	ldr	r3, [pc, #464]	; (8002818 <ADC_ConfigureBoostMode+0x204>)
 8002646:	689b      	ldr	r3, [r3, #8]
 8002648:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800264c:	2b00      	cmp	r3, #0
 800264e:	bf14      	ite	ne
 8002650:	2301      	movne	r3, #1
 8002652:	2300      	moveq	r3, #0
 8002654:	b2db      	uxtb	r3, r3
 8002656:	2b00      	cmp	r3, #0
 8002658:	d01c      	beq.n	8002694 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 800265a:	f001 fb59 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 800265e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	685b      	ldr	r3, [r3, #4]
 8002664:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002668:	d010      	beq.n	800268c <ADC_ConfigureBoostMode+0x78>
 800266a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 800266e:	d873      	bhi.n	8002758 <ADC_ConfigureBoostMode+0x144>
 8002670:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002674:	d002      	beq.n	800267c <ADC_ConfigureBoostMode+0x68>
 8002676:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800267a:	d16d      	bne.n	8002758 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	0c1b      	lsrs	r3, r3, #16
 8002682:	68fa      	ldr	r2, [r7, #12]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60fb      	str	r3, [r7, #12]
        break;
 800268a:	e068      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	089b      	lsrs	r3, r3, #2
 8002690:	60fb      	str	r3, [r7, #12]
        break;
 8002692:	e064      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002694:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	f002 fd9e 	bl	80051dc <HAL_RCCEx_GetPeriphCLKFreq>
 80026a0:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026aa:	d051      	beq.n	8002750 <ADC_ConfigureBoostMode+0x13c>
 80026ac:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 80026b0:	d854      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026b2:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026b6:	d047      	beq.n	8002748 <ADC_ConfigureBoostMode+0x134>
 80026b8:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 80026bc:	d84e      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026be:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026c2:	d03d      	beq.n	8002740 <ADC_ConfigureBoostMode+0x12c>
 80026c4:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 80026c8:	d848      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026ca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026ce:	d033      	beq.n	8002738 <ADC_ConfigureBoostMode+0x124>
 80026d0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80026d4:	d842      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026d6:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026da:	d029      	beq.n	8002730 <ADC_ConfigureBoostMode+0x11c>
 80026dc:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 80026e0:	d83c      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026e2:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026e6:	d01a      	beq.n	800271e <ADC_ConfigureBoostMode+0x10a>
 80026e8:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 80026ec:	d836      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026ee:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80026f2:	d014      	beq.n	800271e <ADC_ConfigureBoostMode+0x10a>
 80026f4:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 80026f8:	d830      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 80026fa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026fe:	d00e      	beq.n	800271e <ADC_ConfigureBoostMode+0x10a>
 8002700:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002704:	d82a      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 8002706:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800270a:	d008      	beq.n	800271e <ADC_ConfigureBoostMode+0x10a>
 800270c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002710:	d824      	bhi.n	800275c <ADC_ConfigureBoostMode+0x148>
 8002712:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002716:	d002      	beq.n	800271e <ADC_ConfigureBoostMode+0x10a>
 8002718:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800271c:	d11e      	bne.n	800275c <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	0c9b      	lsrs	r3, r3, #18
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	68fa      	ldr	r2, [r7, #12]
 8002728:	fbb2 f3f3 	udiv	r3, r2, r3
 800272c:	60fb      	str	r3, [r7, #12]
        break;
 800272e:	e016      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	091b      	lsrs	r3, r3, #4
 8002734:	60fb      	str	r3, [r7, #12]
        break;
 8002736:	e012      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	095b      	lsrs	r3, r3, #5
 800273c:	60fb      	str	r3, [r7, #12]
        break;
 800273e:	e00e      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	099b      	lsrs	r3, r3, #6
 8002744:	60fb      	str	r3, [r7, #12]
        break;
 8002746:	e00a      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	09db      	lsrs	r3, r3, #7
 800274c:	60fb      	str	r3, [r7, #12]
        break;
 800274e:	e006      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	0a1b      	lsrs	r3, r3, #8
 8002754:	60fb      	str	r3, [r7, #12]
        break;
 8002756:	e002      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
        break;
 8002758:	bf00      	nop
 800275a:	e000      	b.n	800275e <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 800275c:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 800275e:	f7ff f8ad 	bl	80018bc <HAL_GetREVID>
 8002762:	4603      	mov	r3, r0
 8002764:	f241 0203 	movw	r2, #4099	; 0x1003
 8002768:	4293      	cmp	r3, r2
 800276a:	d815      	bhi.n	8002798 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	4a2b      	ldr	r2, [pc, #172]	; (800281c <ADC_ConfigureBoostMode+0x208>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d908      	bls.n	8002786 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	689a      	ldr	r2, [r3, #8]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002782:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8002784:	e03e      	b.n	8002804 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	689a      	ldr	r2, [r3, #8]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	e035      	b.n	8002804 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	085b      	lsrs	r3, r3, #1
 800279c:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	4a1f      	ldr	r2, [pc, #124]	; (8002820 <ADC_ConfigureBoostMode+0x20c>)
 80027a2:	4293      	cmp	r3, r2
 80027a4:	d808      	bhi.n	80027b8 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	689a      	ldr	r2, [r3, #8]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80027b4:	609a      	str	r2, [r3, #8]
}
 80027b6:	e025      	b.n	8002804 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <ADC_ConfigureBoostMode+0x210>)
 80027bc:	4293      	cmp	r3, r2
 80027be:	d80a      	bhi.n	80027d6 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d2:	609a      	str	r2, [r3, #8]
}
 80027d4:	e016      	b.n	8002804 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	4a13      	ldr	r2, [pc, #76]	; (8002828 <ADC_ConfigureBoostMode+0x214>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d80a      	bhi.n	80027f4 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027f0:	609a      	str	r2, [r3, #8]
}
 80027f2:	e007      	b.n	8002804 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	689a      	ldr	r2, [r3, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8002802:	609a      	str	r2, [r3, #8]
}
 8002804:	bf00      	nop
 8002806:	3710      	adds	r7, #16
 8002808:	46bd      	mov	sp, r7
 800280a:	bd80      	pop	{r7, pc}
 800280c:	40022000 	.word	0x40022000
 8002810:	40022100 	.word	0x40022100
 8002814:	40022300 	.word	0x40022300
 8002818:	58026300 	.word	0x58026300
 800281c:	01312d00 	.word	0x01312d00
 8002820:	005f5e10 	.word	0x005f5e10
 8002824:	00bebc20 	.word	0x00bebc20
 8002828:	017d7840 	.word	0x017d7840

0800282c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800282c:	b480      	push	{r7}
 800282e:	b085      	sub	sp, #20
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	f003 0307 	and.w	r3, r3, #7
 800283a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800283c:	4b0b      	ldr	r3, [pc, #44]	; (800286c <__NVIC_SetPriorityGrouping+0x40>)
 800283e:	68db      	ldr	r3, [r3, #12]
 8002840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002842:	68ba      	ldr	r2, [r7, #8]
 8002844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002848:	4013      	ands	r3, r2
 800284a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002850:	68bb      	ldr	r3, [r7, #8]
 8002852:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <__NVIC_SetPriorityGrouping+0x44>)
 8002856:	4313      	orrs	r3, r2
 8002858:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800285a:	4a04      	ldr	r2, [pc, #16]	; (800286c <__NVIC_SetPriorityGrouping+0x40>)
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	60d3      	str	r3, [r2, #12]
}
 8002860:	bf00      	nop
 8002862:	3714      	adds	r7, #20
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr
 800286c:	e000ed00 	.word	0xe000ed00
 8002870:	05fa0000 	.word	0x05fa0000

08002874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002878:	4b04      	ldr	r3, [pc, #16]	; (800288c <__NVIC_GetPriorityGrouping+0x18>)
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	0a1b      	lsrs	r3, r3, #8
 800287e:	f003 0307 	and.w	r3, r3, #7
}
 8002882:	4618      	mov	r0, r3
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	e000ed00 	.word	0xe000ed00

08002890 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002890:	b480      	push	{r7}
 8002892:	b083      	sub	sp, #12
 8002894:	af00      	add	r7, sp, #0
 8002896:	4603      	mov	r3, r0
 8002898:	6039      	str	r1, [r7, #0]
 800289a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800289c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	db0a      	blt.n	80028ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	b2da      	uxtb	r2, r3
 80028a8:	490c      	ldr	r1, [pc, #48]	; (80028dc <__NVIC_SetPriority+0x4c>)
 80028aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028ae:	0112      	lsls	r2, r2, #4
 80028b0:	b2d2      	uxtb	r2, r2
 80028b2:	440b      	add	r3, r1
 80028b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80028b8:	e00a      	b.n	80028d0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	b2da      	uxtb	r2, r3
 80028be:	4908      	ldr	r1, [pc, #32]	; (80028e0 <__NVIC_SetPriority+0x50>)
 80028c0:	88fb      	ldrh	r3, [r7, #6]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	3b04      	subs	r3, #4
 80028c8:	0112      	lsls	r2, r2, #4
 80028ca:	b2d2      	uxtb	r2, r2
 80028cc:	440b      	add	r3, r1
 80028ce:	761a      	strb	r2, [r3, #24]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr
 80028dc:	e000e100 	.word	0xe000e100
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b089      	sub	sp, #36	; 0x24
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	60f8      	str	r0, [r7, #12]
 80028ec:	60b9      	str	r1, [r7, #8]
 80028ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f003 0307 	and.w	r3, r3, #7
 80028f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	f1c3 0307 	rsb	r3, r3, #7
 80028fe:	2b04      	cmp	r3, #4
 8002900:	bf28      	it	cs
 8002902:	2304      	movcs	r3, #4
 8002904:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002906:	69fb      	ldr	r3, [r7, #28]
 8002908:	3304      	adds	r3, #4
 800290a:	2b06      	cmp	r3, #6
 800290c:	d902      	bls.n	8002914 <NVIC_EncodePriority+0x30>
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	3b03      	subs	r3, #3
 8002912:	e000      	b.n	8002916 <NVIC_EncodePriority+0x32>
 8002914:	2300      	movs	r3, #0
 8002916:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002918:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800291c:	69bb      	ldr	r3, [r7, #24]
 800291e:	fa02 f303 	lsl.w	r3, r2, r3
 8002922:	43da      	mvns	r2, r3
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	401a      	ands	r2, r3
 8002928:	697b      	ldr	r3, [r7, #20]
 800292a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800292c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	fa01 f303 	lsl.w	r3, r1, r3
 8002936:	43d9      	mvns	r1, r3
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800293c:	4313      	orrs	r3, r2
         );
}
 800293e:	4618      	mov	r0, r3
 8002940:	3724      	adds	r7, #36	; 0x24
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr
	...

0800294c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800294c:	b580      	push	{r7, lr}
 800294e:	b082      	sub	sp, #8
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	3b01      	subs	r3, #1
 8002958:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800295c:	d301      	bcc.n	8002962 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800295e:	2301      	movs	r3, #1
 8002960:	e00f      	b.n	8002982 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002962:	4a0a      	ldr	r2, [pc, #40]	; (800298c <SysTick_Config+0x40>)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	3b01      	subs	r3, #1
 8002968:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800296a:	210f      	movs	r1, #15
 800296c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002970:	f7ff ff8e 	bl	8002890 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002974:	4b05      	ldr	r3, [pc, #20]	; (800298c <SysTick_Config+0x40>)
 8002976:	2200      	movs	r2, #0
 8002978:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800297a:	4b04      	ldr	r3, [pc, #16]	; (800298c <SysTick_Config+0x40>)
 800297c:	2207      	movs	r2, #7
 800297e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002980:	2300      	movs	r3, #0
}
 8002982:	4618      	mov	r0, r3
 8002984:	3708      	adds	r7, #8
 8002986:	46bd      	mov	sp, r7
 8002988:	bd80      	pop	{r7, pc}
 800298a:	bf00      	nop
 800298c:	e000e010 	.word	0xe000e010

08002990 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f7ff ff47 	bl	800282c <__NVIC_SetPriorityGrouping>
}
 800299e:	bf00      	nop
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}

080029a6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029a6:	b580      	push	{r7, lr}
 80029a8:	b086      	sub	sp, #24
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	4603      	mov	r3, r0
 80029ae:	60b9      	str	r1, [r7, #8]
 80029b0:	607a      	str	r2, [r7, #4]
 80029b2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80029b4:	f7ff ff5e 	bl	8002874 <__NVIC_GetPriorityGrouping>
 80029b8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	6978      	ldr	r0, [r7, #20]
 80029c0:	f7ff ff90 	bl	80028e4 <NVIC_EncodePriority>
 80029c4:	4602      	mov	r2, r0
 80029c6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80029ca:	4611      	mov	r1, r2
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7ff ff5f 	bl	8002890 <__NVIC_SetPriority>
}
 80029d2:	bf00      	nop
 80029d4:	3718      	adds	r7, #24
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80029da:	b580      	push	{r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80029e2:	6878      	ldr	r0, [r7, #4]
 80029e4:	f7ff ffb2 	bl	800294c <SysTick_Config>
 80029e8:	4603      	mov	r3, r0
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
	...

080029f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b089      	sub	sp, #36	; 0x24
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
 80029fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80029fe:	2300      	movs	r3, #0
 8002a00:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002a02:	4b89      	ldr	r3, [pc, #548]	; (8002c28 <HAL_GPIO_Init+0x234>)
 8002a04:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002a06:	e194      	b.n	8002d32 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	2101      	movs	r1, #1
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	fa01 f303 	lsl.w	r3, r1, r3
 8002a14:	4013      	ands	r3, r2
 8002a16:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002a18:	693b      	ldr	r3, [r7, #16]
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	f000 8186 	beq.w	8002d2c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f003 0303 	and.w	r3, r3, #3
 8002a28:	2b01      	cmp	r3, #1
 8002a2a:	d005      	beq.n	8002a38 <HAL_GPIO_Init+0x44>
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f003 0303 	and.w	r3, r3, #3
 8002a34:	2b02      	cmp	r3, #2
 8002a36:	d130      	bne.n	8002a9a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002a3e:	69fb      	ldr	r3, [r7, #28]
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	2203      	movs	r2, #3
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	69ba      	ldr	r2, [r7, #24]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	68da      	ldr	r2, [r3, #12]
 8002a54:	69fb      	ldr	r3, [r7, #28]
 8002a56:	005b      	lsls	r3, r3, #1
 8002a58:	fa02 f303 	lsl.w	r3, r2, r3
 8002a5c:	69ba      	ldr	r2, [r7, #24]
 8002a5e:	4313      	orrs	r3, r2
 8002a60:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	69ba      	ldr	r2, [r7, #24]
 8002a66:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002a6e:	2201      	movs	r2, #1
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	fa02 f303 	lsl.w	r3, r2, r3
 8002a76:	43db      	mvns	r3, r3
 8002a78:	69ba      	ldr	r2, [r7, #24]
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	685b      	ldr	r3, [r3, #4]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f003 0201 	and.w	r2, r3, #1
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f003 0303 	and.w	r3, r3, #3
 8002aa2:	2b03      	cmp	r3, #3
 8002aa4:	d017      	beq.n	8002ad6 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002aac:	69fb      	ldr	r3, [r7, #28]
 8002aae:	005b      	lsls	r3, r3, #1
 8002ab0:	2203      	movs	r2, #3
 8002ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	689a      	ldr	r2, [r3, #8]
 8002ac2:	69fb      	ldr	r3, [r7, #28]
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	69ba      	ldr	r2, [r7, #24]
 8002ad4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f003 0303 	and.w	r3, r3, #3
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d123      	bne.n	8002b2a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002ae2:	69fb      	ldr	r3, [r7, #28]
 8002ae4:	08da      	lsrs	r2, r3, #3
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	3208      	adds	r2, #8
 8002aea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002aee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	f003 0307 	and.w	r3, r3, #7
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	220f      	movs	r2, #15
 8002afa:	fa02 f303 	lsl.w	r3, r2, r3
 8002afe:	43db      	mvns	r3, r3
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	4013      	ands	r3, r2
 8002b04:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691a      	ldr	r2, [r3, #16]
 8002b0a:	69fb      	ldr	r3, [r7, #28]
 8002b0c:	f003 0307 	and.w	r3, r3, #7
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	fa02 f303 	lsl.w	r3, r2, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	08da      	lsrs	r2, r3, #3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	3208      	adds	r2, #8
 8002b24:	69b9      	ldr	r1, [r7, #24]
 8002b26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	005b      	lsls	r3, r3, #1
 8002b34:	2203      	movs	r2, #3
 8002b36:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3a:	43db      	mvns	r3, r3
 8002b3c:	69ba      	ldr	r2, [r7, #24]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	685b      	ldr	r3, [r3, #4]
 8002b46:	f003 0203 	and.w	r2, r3, #3
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b52:	69ba      	ldr	r2, [r7, #24]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	69ba      	ldr	r2, [r7, #24]
 8002b5c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f000 80e0 	beq.w	8002d2c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b6c:	4b2f      	ldr	r3, [pc, #188]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b6e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b72:	4a2e      	ldr	r2, [pc, #184]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b74:	f043 0302 	orr.w	r3, r3, #2
 8002b78:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002b7c:	4b2b      	ldr	r3, [pc, #172]	; (8002c2c <HAL_GPIO_Init+0x238>)
 8002b7e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60fb      	str	r3, [r7, #12]
 8002b88:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002b8a:	4a29      	ldr	r2, [pc, #164]	; (8002c30 <HAL_GPIO_Init+0x23c>)
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	089b      	lsrs	r3, r3, #2
 8002b90:	3302      	adds	r3, #2
 8002b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	009b      	lsls	r3, r3, #2
 8002ba0:	220f      	movs	r2, #15
 8002ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ba6:	43db      	mvns	r3, r3
 8002ba8:	69ba      	ldr	r2, [r7, #24]
 8002baa:	4013      	ands	r3, r2
 8002bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a20      	ldr	r2, [pc, #128]	; (8002c34 <HAL_GPIO_Init+0x240>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d052      	beq.n	8002c5c <HAL_GPIO_Init+0x268>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <HAL_GPIO_Init+0x244>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d031      	beq.n	8002c22 <HAL_GPIO_Init+0x22e>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a1e      	ldr	r2, [pc, #120]	; (8002c3c <HAL_GPIO_Init+0x248>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d02b      	beq.n	8002c1e <HAL_GPIO_Init+0x22a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a1d      	ldr	r2, [pc, #116]	; (8002c40 <HAL_GPIO_Init+0x24c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d025      	beq.n	8002c1a <HAL_GPIO_Init+0x226>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a1c      	ldr	r2, [pc, #112]	; (8002c44 <HAL_GPIO_Init+0x250>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d01f      	beq.n	8002c16 <HAL_GPIO_Init+0x222>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a1b      	ldr	r2, [pc, #108]	; (8002c48 <HAL_GPIO_Init+0x254>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d019      	beq.n	8002c12 <HAL_GPIO_Init+0x21e>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a1a      	ldr	r2, [pc, #104]	; (8002c4c <HAL_GPIO_Init+0x258>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d013      	beq.n	8002c0e <HAL_GPIO_Init+0x21a>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_GPIO_Init+0x25c>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d00d      	beq.n	8002c0a <HAL_GPIO_Init+0x216>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a18      	ldr	r2, [pc, #96]	; (8002c54 <HAL_GPIO_Init+0x260>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d007      	beq.n	8002c06 <HAL_GPIO_Init+0x212>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a17      	ldr	r2, [pc, #92]	; (8002c58 <HAL_GPIO_Init+0x264>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d101      	bne.n	8002c02 <HAL_GPIO_Init+0x20e>
 8002bfe:	2309      	movs	r3, #9
 8002c00:	e02d      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c02:	230a      	movs	r3, #10
 8002c04:	e02b      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c06:	2308      	movs	r3, #8
 8002c08:	e029      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c0a:	2307      	movs	r3, #7
 8002c0c:	e027      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c0e:	2306      	movs	r3, #6
 8002c10:	e025      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c12:	2305      	movs	r3, #5
 8002c14:	e023      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c16:	2304      	movs	r3, #4
 8002c18:	e021      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e01f      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c1e:	2302      	movs	r3, #2
 8002c20:	e01d      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c22:	2301      	movs	r3, #1
 8002c24:	e01b      	b.n	8002c5e <HAL_GPIO_Init+0x26a>
 8002c26:	bf00      	nop
 8002c28:	58000080 	.word	0x58000080
 8002c2c:	58024400 	.word	0x58024400
 8002c30:	58000400 	.word	0x58000400
 8002c34:	58020000 	.word	0x58020000
 8002c38:	58020400 	.word	0x58020400
 8002c3c:	58020800 	.word	0x58020800
 8002c40:	58020c00 	.word	0x58020c00
 8002c44:	58021000 	.word	0x58021000
 8002c48:	58021400 	.word	0x58021400
 8002c4c:	58021800 	.word	0x58021800
 8002c50:	58021c00 	.word	0x58021c00
 8002c54:	58022000 	.word	0x58022000
 8002c58:	58022400 	.word	0x58022400
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	f002 0203 	and.w	r2, r2, #3
 8002c64:	0092      	lsls	r2, r2, #2
 8002c66:	4093      	lsls	r3, r2
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c6e:	4938      	ldr	r1, [pc, #224]	; (8002d50 <HAL_GPIO_Init+0x35c>)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	089b      	lsrs	r3, r3, #2
 8002c74:	3302      	adds	r3, #2
 8002c76:	69ba      	ldr	r2, [r7, #24]
 8002c78:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002c7c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002c84:	693b      	ldr	r3, [r7, #16]
 8002c86:	43db      	mvns	r3, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4013      	ands	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c8e:	683b      	ldr	r3, [r7, #0]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d003      	beq.n	8002ca2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002c9a:	69ba      	ldr	r2, [r7, #24]
 8002c9c:	693b      	ldr	r3, [r7, #16]
 8002c9e:	4313      	orrs	r3, r2
 8002ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002ca2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ca6:	69bb      	ldr	r3, [r7, #24]
 8002ca8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002caa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	43db      	mvns	r3, r3
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4013      	ands	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d003      	beq.n	8002cd0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002cc8:	69ba      	ldr	r2, [r7, #24]
 8002cca:	693b      	ldr	r3, [r7, #16]
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002cd0:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002cd4:	69bb      	ldr	r3, [r7, #24]
 8002cd6:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8002cd8:	697b      	ldr	r3, [r7, #20]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	43db      	mvns	r3, r3
 8002ce2:	69ba      	ldr	r2, [r7, #24]
 8002ce4:	4013      	ands	r3, r2
 8002ce6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d003      	beq.n	8002cfc <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8002cf4:	69ba      	ldr	r2, [r7, #24]
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002cfc:	697b      	ldr	r3, [r7, #20]
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	43db      	mvns	r3, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4013      	ands	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d003      	beq.n	8002d26 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8002d1e:	69ba      	ldr	r2, [r7, #24]
 8002d20:	693b      	ldr	r3, [r7, #16]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d2c:	69fb      	ldr	r3, [r7, #28]
 8002d2e:	3301      	adds	r3, #1
 8002d30:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	69fb      	ldr	r3, [r7, #28]
 8002d38:	fa22 f303 	lsr.w	r3, r2, r3
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f47f ae63 	bne.w	8002a08 <HAL_GPIO_Init+0x14>
  }
}
 8002d42:	bf00      	nop
 8002d44:	bf00      	nop
 8002d46:	3724      	adds	r7, #36	; 0x24
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4e:	4770      	bx	lr
 8002d50:	58000400 	.word	0x58000400

08002d54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	460b      	mov	r3, r1
 8002d5e:	807b      	strh	r3, [r7, #2]
 8002d60:	4613      	mov	r3, r2
 8002d62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d64:	787b      	ldrb	r3, [r7, #1]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d003      	beq.n	8002d72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d6a:	887a      	ldrh	r2, [r7, #2]
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8002d70:	e003      	b.n	8002d7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002d72:	887b      	ldrh	r3, [r7, #2]
 8002d74:	041a      	lsls	r2, r3, #16
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	619a      	str	r2, [r3, #24]
}
 8002d7a:	bf00      	nop
 8002d7c:	370c      	adds	r7, #12
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d84:	4770      	bx	lr
	...

08002d88 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 8002d90:	4b19      	ldr	r3, [pc, #100]	; (8002df8 <HAL_PWREx_ConfigSupply+0x70>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	f003 0304 	and.w	r3, r3, #4
 8002d98:	2b04      	cmp	r3, #4
 8002d9a:	d00a      	beq.n	8002db2 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002d9c:	4b16      	ldr	r3, [pc, #88]	; (8002df8 <HAL_PWREx_ConfigSupply+0x70>)
 8002d9e:	68db      	ldr	r3, [r3, #12]
 8002da0:	f003 0307 	and.w	r3, r3, #7
 8002da4:	687a      	ldr	r2, [r7, #4]
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d001      	beq.n	8002dae <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e01f      	b.n	8002dee <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e01d      	b.n	8002dee <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002db2:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <HAL_PWREx_ConfigSupply+0x70>)
 8002db4:	68db      	ldr	r3, [r3, #12]
 8002db6:	f023 0207 	bic.w	r2, r3, #7
 8002dba:	490f      	ldr	r1, [pc, #60]	; (8002df8 <HAL_PWREx_ConfigSupply+0x70>)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002dc2:	f7fe fd6f 	bl	80018a4 <HAL_GetTick>
 8002dc6:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dc8:	e009      	b.n	8002dde <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002dca:	f7fe fd6b 	bl	80018a4 <HAL_GetTick>
 8002dce:	4602      	mov	r2, r0
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	1ad3      	subs	r3, r2, r3
 8002dd4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002dd8:	d901      	bls.n	8002dde <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002dda:	2301      	movs	r3, #1
 8002ddc:	e007      	b.n	8002dee <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002dde:	4b06      	ldr	r3, [pc, #24]	; (8002df8 <HAL_PWREx_ConfigSupply+0x70>)
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002de6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dea:	d1ee      	bne.n	8002dca <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3710      	adds	r7, #16
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	58024800 	.word	0x58024800

08002dfc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b08c      	sub	sp, #48	; 0x30
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d102      	bne.n	8002e10 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	f000 bc48 	b.w	80036a0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 8088 	beq.w	8002f2e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002e1e:	4b99      	ldr	r3, [pc, #612]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e26:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002e28:	4b96      	ldr	r3, [pc, #600]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d007      	beq.n	8002e44 <HAL_RCC_OscConfig+0x48>
 8002e34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e36:	2b18      	cmp	r3, #24
 8002e38:	d111      	bne.n	8002e5e <HAL_RCC_OscConfig+0x62>
 8002e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d10c      	bne.n	8002e5e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e44:	4b8f      	ldr	r3, [pc, #572]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d06d      	beq.n	8002f2c <HAL_RCC_OscConfig+0x130>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d169      	bne.n	8002f2c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	f000 bc21 	b.w	80036a0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e66:	d106      	bne.n	8002e76 <HAL_RCC_OscConfig+0x7a>
 8002e68:	4b86      	ldr	r3, [pc, #536]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a85      	ldr	r2, [pc, #532]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	e02e      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd8>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	685b      	ldr	r3, [r3, #4]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d10c      	bne.n	8002e98 <HAL_RCC_OscConfig+0x9c>
 8002e7e:	4b81      	ldr	r3, [pc, #516]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4a80      	ldr	r2, [pc, #512]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e84:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e88:	6013      	str	r3, [r2, #0]
 8002e8a:	4b7e      	ldr	r3, [pc, #504]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a7d      	ldr	r2, [pc, #500]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002e90:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd8>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0xc0>
 8002ea2:	4b78      	ldr	r3, [pc, #480]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a77      	ldr	r2, [pc, #476]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b75      	ldr	r3, [pc, #468]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a74      	ldr	r2, [pc, #464]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xd8>
 8002ebc:	4b71      	ldr	r3, [pc, #452]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a70      	ldr	r2, [pc, #448]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b6e      	ldr	r3, [pc, #440]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a6d      	ldr	r2, [pc, #436]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002edc:	f7fe fce2 	bl	80018a4 <HAL_GetTick>
 8002ee0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fcde 	bl	80018a4 <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e3d4      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xe8>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f04:	f7fe fcce 	bl	80018a4 <HAL_GetTick>
 8002f08:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe fcca 	bl	80018a4 <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e3c0      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002f1e:	4b59      	ldr	r3, [pc, #356]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0x110>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	f000 80ca 	beq.w	80030d0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002f3c:	4b51      	ldr	r3, [pc, #324]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f3e:	691b      	ldr	r3, [r3, #16]
 8002f40:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002f44:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002f46:	4b4f      	ldr	r3, [pc, #316]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f4a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8002f4c:	6a3b      	ldr	r3, [r7, #32]
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d007      	beq.n	8002f62 <HAL_RCC_OscConfig+0x166>
 8002f52:	6a3b      	ldr	r3, [r7, #32]
 8002f54:	2b18      	cmp	r3, #24
 8002f56:	d156      	bne.n	8003006 <HAL_RCC_OscConfig+0x20a>
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d151      	bne.n	8003006 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002f62:	4b48      	ldr	r3, [pc, #288]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0304 	and.w	r3, r3, #4
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d005      	beq.n	8002f7a <HAL_RCC_OscConfig+0x17e>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	68db      	ldr	r3, [r3, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e392      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8002f7a:	4b42      	ldr	r3, [pc, #264]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f023 0219 	bic.w	r2, r3, #25
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	68db      	ldr	r3, [r3, #12]
 8002f86:	493f      	ldr	r1, [pc, #252]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f8c:	f7fe fc8a 	bl	80018a4 <HAL_GetTick>
 8002f90:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002f92:	e008      	b.n	8002fa6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f94:	f7fe fc86 	bl	80018a4 <HAL_GetTick>
 8002f98:	4602      	mov	r2, r0
 8002f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e37c      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002fa6:	4b37      	ldr	r3, [pc, #220]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d0f0      	beq.n	8002f94 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fb2:	f7fe fc83 	bl	80018bc <HAL_GetREVID>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	f241 0203 	movw	r2, #4099	; 0x1003
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d817      	bhi.n	8002ff0 <HAL_RCC_OscConfig+0x1f4>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	691b      	ldr	r3, [r3, #16]
 8002fc4:	2b40      	cmp	r3, #64	; 0x40
 8002fc6:	d108      	bne.n	8002fda <HAL_RCC_OscConfig+0x1de>
 8002fc8:	4b2e      	ldr	r3, [pc, #184]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002fd0:	4a2c      	ldr	r2, [pc, #176]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002fd2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002fd6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fd8:	e07a      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fda:	4b2a      	ldr	r3, [pc, #168]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002fdc:	685b      	ldr	r3, [r3, #4]
 8002fde:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	691b      	ldr	r3, [r3, #16]
 8002fe6:	031b      	lsls	r3, r3, #12
 8002fe8:	4926      	ldr	r1, [pc, #152]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002fea:	4313      	orrs	r3, r2
 8002fec:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002fee:	e06f      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ff0:	4b24      	ldr	r3, [pc, #144]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	061b      	lsls	r3, r3, #24
 8002ffe:	4921      	ldr	r1, [pc, #132]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8003000:	4313      	orrs	r3, r2
 8003002:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003004:	e064      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68db      	ldr	r3, [r3, #12]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d047      	beq.n	800309e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800300e:	4b1d      	ldr	r3, [pc, #116]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f023 0219 	bic.w	r2, r3, #25
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	68db      	ldr	r3, [r3, #12]
 800301a:	491a      	ldr	r1, [pc, #104]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 800301c:	4313      	orrs	r3, r2
 800301e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003020:	f7fe fc40 	bl	80018a4 <HAL_GetTick>
 8003024:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003026:	e008      	b.n	800303a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003028:	f7fe fc3c 	bl	80018a4 <HAL_GetTick>
 800302c:	4602      	mov	r2, r0
 800302e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003030:	1ad3      	subs	r3, r2, r3
 8003032:	2b02      	cmp	r3, #2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e332      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800303a:	4b12      	ldr	r3, [pc, #72]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f003 0304 	and.w	r3, r3, #4
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0f0      	beq.n	8003028 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003046:	f7fe fc39 	bl	80018bc <HAL_GetREVID>
 800304a:	4603      	mov	r3, r0
 800304c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003050:	4293      	cmp	r3, r2
 8003052:	d819      	bhi.n	8003088 <HAL_RCC_OscConfig+0x28c>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	691b      	ldr	r3, [r3, #16]
 8003058:	2b40      	cmp	r3, #64	; 0x40
 800305a:	d108      	bne.n	800306e <HAL_RCC_OscConfig+0x272>
 800305c:	4b09      	ldr	r3, [pc, #36]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 800305e:	685b      	ldr	r3, [r3, #4]
 8003060:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003064:	4a07      	ldr	r2, [pc, #28]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8003066:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800306a:	6053      	str	r3, [r2, #4]
 800306c:	e030      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
 800306e:	4b05      	ldr	r3, [pc, #20]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	691b      	ldr	r3, [r3, #16]
 800307a:	031b      	lsls	r3, r3, #12
 800307c:	4901      	ldr	r1, [pc, #4]	; (8003084 <HAL_RCC_OscConfig+0x288>)
 800307e:	4313      	orrs	r3, r2
 8003080:	604b      	str	r3, [r1, #4]
 8003082:	e025      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
 8003084:	58024400 	.word	0x58024400
 8003088:	4b9a      	ldr	r3, [pc, #616]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	691b      	ldr	r3, [r3, #16]
 8003094:	061b      	lsls	r3, r3, #24
 8003096:	4997      	ldr	r1, [pc, #604]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003098:	4313      	orrs	r3, r2
 800309a:	604b      	str	r3, [r1, #4]
 800309c:	e018      	b.n	80030d0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800309e:	4b95      	ldr	r3, [pc, #596]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4a94      	ldr	r2, [pc, #592]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80030a4:	f023 0301 	bic.w	r3, r3, #1
 80030a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030aa:	f7fe fbfb 	bl	80018a4 <HAL_GetTick>
 80030ae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030b0:	e008      	b.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030b2:	f7fe fbf7 	bl	80018a4 <HAL_GetTick>
 80030b6:	4602      	mov	r2, r0
 80030b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030ba:	1ad3      	subs	r3, r2, r3
 80030bc:	2b02      	cmp	r3, #2
 80030be:	d901      	bls.n	80030c4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80030c0:	2303      	movs	r3, #3
 80030c2:	e2ed      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80030c4:	4b8b      	ldr	r3, [pc, #556]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f003 0304 	and.w	r3, r3, #4
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1f0      	bne.n	80030b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	f003 0310 	and.w	r3, r3, #16
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f000 80a9 	beq.w	8003230 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030de:	4b85      	ldr	r3, [pc, #532]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80030e0:	691b      	ldr	r3, [r3, #16]
 80030e2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030e6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030e8:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80030ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ec:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80030ee:	69bb      	ldr	r3, [r7, #24]
 80030f0:	2b08      	cmp	r3, #8
 80030f2:	d007      	beq.n	8003104 <HAL_RCC_OscConfig+0x308>
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	2b18      	cmp	r3, #24
 80030f8:	d13a      	bne.n	8003170 <HAL_RCC_OscConfig+0x374>
 80030fa:	697b      	ldr	r3, [r7, #20]
 80030fc:	f003 0303 	and.w	r3, r3, #3
 8003100:	2b01      	cmp	r3, #1
 8003102:	d135      	bne.n	8003170 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003104:	4b7b      	ldr	r3, [pc, #492]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800310c:	2b00      	cmp	r3, #0
 800310e:	d005      	beq.n	800311c <HAL_RCC_OscConfig+0x320>
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	69db      	ldr	r3, [r3, #28]
 8003114:	2b80      	cmp	r3, #128	; 0x80
 8003116:	d001      	beq.n	800311c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	e2c1      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800311c:	f7fe fbce 	bl	80018bc <HAL_GetREVID>
 8003120:	4603      	mov	r3, r0
 8003122:	f241 0203 	movw	r2, #4099	; 0x1003
 8003126:	4293      	cmp	r3, r2
 8003128:	d817      	bhi.n	800315a <HAL_RCC_OscConfig+0x35e>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6a1b      	ldr	r3, [r3, #32]
 800312e:	2b20      	cmp	r3, #32
 8003130:	d108      	bne.n	8003144 <HAL_RCC_OscConfig+0x348>
 8003132:	4b70      	ldr	r3, [pc, #448]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800313a:	4a6e      	ldr	r2, [pc, #440]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800313c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003140:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003142:	e075      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003144:	4b6b      	ldr	r3, [pc, #428]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a1b      	ldr	r3, [r3, #32]
 8003150:	069b      	lsls	r3, r3, #26
 8003152:	4968      	ldr	r1, [pc, #416]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003154:	4313      	orrs	r3, r2
 8003156:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003158:	e06a      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800315a:	4b66      	ldr	r3, [pc, #408]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800315c:	68db      	ldr	r3, [r3, #12]
 800315e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6a1b      	ldr	r3, [r3, #32]
 8003166:	061b      	lsls	r3, r3, #24
 8003168:	4962      	ldr	r1, [pc, #392]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800316a:	4313      	orrs	r3, r2
 800316c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800316e:	e05f      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	69db      	ldr	r3, [r3, #28]
 8003174:	2b00      	cmp	r3, #0
 8003176:	d042      	beq.n	80031fe <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003178:	4b5e      	ldr	r3, [pc, #376]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a5d      	ldr	r2, [pc, #372]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800317e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe fb8e 	bl	80018a4 <HAL_GetTick>
 8003188:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800318c:	f7fe fb8a 	bl	80018a4 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e280      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800319e:	4b55      	ldr	r3, [pc, #340]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d0f0      	beq.n	800318c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80031aa:	f7fe fb87 	bl	80018bc <HAL_GetREVID>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f241 0203 	movw	r2, #4099	; 0x1003
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d817      	bhi.n	80031e8 <HAL_RCC_OscConfig+0x3ec>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a1b      	ldr	r3, [r3, #32]
 80031bc:	2b20      	cmp	r3, #32
 80031be:	d108      	bne.n	80031d2 <HAL_RCC_OscConfig+0x3d6>
 80031c0:	4b4c      	ldr	r3, [pc, #304]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80031c8:	4a4a      	ldr	r2, [pc, #296]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ca:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80031ce:	6053      	str	r3, [r2, #4]
 80031d0:	e02e      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
 80031d2:	4b48      	ldr	r3, [pc, #288]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6a1b      	ldr	r3, [r3, #32]
 80031de:	069b      	lsls	r3, r3, #26
 80031e0:	4944      	ldr	r1, [pc, #272]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031e2:	4313      	orrs	r3, r2
 80031e4:	604b      	str	r3, [r1, #4]
 80031e6:	e023      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
 80031e8:	4b42      	ldr	r3, [pc, #264]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031ea:	68db      	ldr	r3, [r3, #12]
 80031ec:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	6a1b      	ldr	r3, [r3, #32]
 80031f4:	061b      	lsls	r3, r3, #24
 80031f6:	493f      	ldr	r1, [pc, #252]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	e018      	b.n	8003230 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80031fe:	4b3d      	ldr	r3, [pc, #244]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a3c      	ldr	r2, [pc, #240]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003204:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003208:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800320a:	f7fe fb4b 	bl	80018a4 <HAL_GetTick>
 800320e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003210:	e008      	b.n	8003224 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003212:	f7fe fb47 	bl	80018a4 <HAL_GetTick>
 8003216:	4602      	mov	r2, r0
 8003218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321a:	1ad3      	subs	r3, r2, r3
 800321c:	2b02      	cmp	r3, #2
 800321e:	d901      	bls.n	8003224 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003220:	2303      	movs	r3, #3
 8003222:	e23d      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003224:	4b33      	ldr	r3, [pc, #204]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1f0      	bne.n	8003212 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d036      	beq.n	80032aa <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	695b      	ldr	r3, [r3, #20]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d019      	beq.n	8003278 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003244:	4b2b      	ldr	r3, [pc, #172]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 8003246:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003248:	4a2a      	ldr	r2, [pc, #168]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800324a:	f043 0301 	orr.w	r3, r3, #1
 800324e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7fe fb28 	bl	80018a4 <HAL_GetTick>
 8003254:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7fe fb24 	bl	80018a4 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e21a      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800326a:	4b22      	ldr	r3, [pc, #136]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x45c>
 8003276:	e018      	b.n	80032aa <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003278:	4b1e      	ldr	r3, [pc, #120]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800327a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800327c:	4a1d      	ldr	r2, [pc, #116]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 800327e:	f023 0301 	bic.w	r3, r3, #1
 8003282:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003284:	f7fe fb0e 	bl	80018a4 <HAL_GetTick>
 8003288:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800328a:	e008      	b.n	800329e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800328c:	f7fe fb0a 	bl	80018a4 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e200      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800329e:	4b15      	ldr	r3, [pc, #84]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80032a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1f0      	bne.n	800328c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d039      	beq.n	800332a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d01c      	beq.n	80032f8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80032be:	4b0d      	ldr	r3, [pc, #52]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a0c      	ldr	r2, [pc, #48]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80032c4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80032c8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80032ca:	f7fe faeb 	bl	80018a4 <HAL_GetTick>
 80032ce:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032d0:	e008      	b.n	80032e4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80032d2:	f7fe fae7 	bl	80018a4 <HAL_GetTick>
 80032d6:	4602      	mov	r2, r0
 80032d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032da:	1ad3      	subs	r3, r2, r3
 80032dc:	2b02      	cmp	r3, #2
 80032de:	d901      	bls.n	80032e4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 80032e0:	2303      	movs	r3, #3
 80032e2:	e1dd      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80032e4:	4b03      	ldr	r3, [pc, #12]	; (80032f4 <HAL_RCC_OscConfig+0x4f8>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d0f0      	beq.n	80032d2 <HAL_RCC_OscConfig+0x4d6>
 80032f0:	e01b      	b.n	800332a <HAL_RCC_OscConfig+0x52e>
 80032f2:	bf00      	nop
 80032f4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80032f8:	4b9b      	ldr	r3, [pc, #620]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a9a      	ldr	r2, [pc, #616]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80032fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003302:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003304:	f7fe face 	bl	80018a4 <HAL_GetTick>
 8003308:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800330c:	f7fe faca 	bl	80018a4 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e1c0      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800331e:	4b92      	ldr	r3, [pc, #584]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003326:	2b00      	cmp	r3, #0
 8003328:	d1f0      	bne.n	800330c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0304 	and.w	r3, r3, #4
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8081 	beq.w	800343a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003338:	4b8c      	ldr	r3, [pc, #560]	; (800356c <HAL_RCC_OscConfig+0x770>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a8b      	ldr	r2, [pc, #556]	; (800356c <HAL_RCC_OscConfig+0x770>)
 800333e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003344:	f7fe faae 	bl	80018a4 <HAL_GetTick>
 8003348:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800334a:	e008      	b.n	800335e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800334c:	f7fe faaa 	bl	80018a4 <HAL_GetTick>
 8003350:	4602      	mov	r2, r0
 8003352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003354:	1ad3      	subs	r3, r2, r3
 8003356:	2b64      	cmp	r3, #100	; 0x64
 8003358:	d901      	bls.n	800335e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800335a:	2303      	movs	r3, #3
 800335c:	e1a0      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800335e:	4b83      	ldr	r3, [pc, #524]	; (800356c <HAL_RCC_OscConfig+0x770>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003366:	2b00      	cmp	r3, #0
 8003368:	d0f0      	beq.n	800334c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	2b01      	cmp	r3, #1
 8003370:	d106      	bne.n	8003380 <HAL_RCC_OscConfig+0x584>
 8003372:	4b7d      	ldr	r3, [pc, #500]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003374:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003376:	4a7c      	ldr	r2, [pc, #496]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003378:	f043 0301 	orr.w	r3, r3, #1
 800337c:	6713      	str	r3, [r2, #112]	; 0x70
 800337e:	e02d      	b.n	80033dc <HAL_RCC_OscConfig+0x5e0>
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d10c      	bne.n	80033a2 <HAL_RCC_OscConfig+0x5a6>
 8003388:	4b77      	ldr	r3, [pc, #476]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4a76      	ldr	r2, [pc, #472]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800338e:	f023 0301 	bic.w	r3, r3, #1
 8003392:	6713      	str	r3, [r2, #112]	; 0x70
 8003394:	4b74      	ldr	r3, [pc, #464]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003396:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003398:	4a73      	ldr	r2, [pc, #460]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800339a:	f023 0304 	bic.w	r3, r3, #4
 800339e:	6713      	str	r3, [r2, #112]	; 0x70
 80033a0:	e01c      	b.n	80033dc <HAL_RCC_OscConfig+0x5e0>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	689b      	ldr	r3, [r3, #8]
 80033a6:	2b05      	cmp	r3, #5
 80033a8:	d10c      	bne.n	80033c4 <HAL_RCC_OscConfig+0x5c8>
 80033aa:	4b6f      	ldr	r3, [pc, #444]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ae:	4a6e      	ldr	r2, [pc, #440]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033b0:	f043 0304 	orr.w	r3, r3, #4
 80033b4:	6713      	str	r3, [r2, #112]	; 0x70
 80033b6:	4b6c      	ldr	r3, [pc, #432]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ba:	4a6b      	ldr	r2, [pc, #428]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033bc:	f043 0301 	orr.w	r3, r3, #1
 80033c0:	6713      	str	r3, [r2, #112]	; 0x70
 80033c2:	e00b      	b.n	80033dc <HAL_RCC_OscConfig+0x5e0>
 80033c4:	4b68      	ldr	r3, [pc, #416]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033c8:	4a67      	ldr	r2, [pc, #412]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033ca:	f023 0301 	bic.w	r3, r3, #1
 80033ce:	6713      	str	r3, [r2, #112]	; 0x70
 80033d0:	4b65      	ldr	r3, [pc, #404]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d4:	4a64      	ldr	r2, [pc, #400]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80033d6:	f023 0304 	bic.w	r3, r3, #4
 80033da:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d015      	beq.n	8003410 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e4:	f7fe fa5e 	bl	80018a4 <HAL_GetTick>
 80033e8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80033ea:	e00a      	b.n	8003402 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033ec:	f7fe fa5a 	bl	80018a4 <HAL_GetTick>
 80033f0:	4602      	mov	r2, r0
 80033f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f4:	1ad3      	subs	r3, r2, r3
 80033f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d901      	bls.n	8003402 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e14e      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003402:	4b59      	ldr	r3, [pc, #356]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003404:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d0ee      	beq.n	80033ec <HAL_RCC_OscConfig+0x5f0>
 800340e:	e014      	b.n	800343a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003410:	f7fe fa48 	bl	80018a4 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003416:	e00a      	b.n	800342e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003418:	f7fe fa44 	bl	80018a4 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	f241 3288 	movw	r2, #5000	; 0x1388
 8003426:	4293      	cmp	r3, r2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e138      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800342e:	4b4e      	ldr	r3, [pc, #312]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003430:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1ee      	bne.n	8003418 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	2b00      	cmp	r3, #0
 8003440:	f000 812d 	beq.w	800369e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8003444:	4b48      	ldr	r3, [pc, #288]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800344c:	2b18      	cmp	r3, #24
 800344e:	f000 80bd 	beq.w	80035cc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003456:	2b02      	cmp	r3, #2
 8003458:	f040 809e 	bne.w	8003598 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800345c:	4b42      	ldr	r3, [pc, #264]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	4a41      	ldr	r2, [pc, #260]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003462:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003466:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003468:	f7fe fa1c 	bl	80018a4 <HAL_GetTick>
 800346c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800346e:	e008      	b.n	8003482 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003470:	f7fe fa18 	bl	80018a4 <HAL_GetTick>
 8003474:	4602      	mov	r2, r0
 8003476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003478:	1ad3      	subs	r3, r2, r3
 800347a:	2b02      	cmp	r3, #2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e10e      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003482:	4b39      	ldr	r3, [pc, #228]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1f0      	bne.n	8003470 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003490:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003492:	4b37      	ldr	r3, [pc, #220]	; (8003570 <HAL_RCC_OscConfig+0x774>)
 8003494:	4013      	ands	r3, r2
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6a91      	ldr	r1, [r2, #40]	; 0x28
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800349e:	0112      	lsls	r2, r2, #4
 80034a0:	430a      	orrs	r2, r1
 80034a2:	4931      	ldr	r1, [pc, #196]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034a4:	4313      	orrs	r3, r2
 80034a6:	628b      	str	r3, [r1, #40]	; 0x28
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ac:	3b01      	subs	r3, #1
 80034ae:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034b6:	3b01      	subs	r3, #1
 80034b8:	025b      	lsls	r3, r3, #9
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	431a      	orrs	r2, r3
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c2:	3b01      	subs	r3, #1
 80034c4:	041b      	lsls	r3, r3, #16
 80034c6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80034ca:	431a      	orrs	r2, r3
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034d0:	3b01      	subs	r3, #1
 80034d2:	061b      	lsls	r3, r3, #24
 80034d4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80034d8:	4923      	ldr	r1, [pc, #140]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034da:	4313      	orrs	r3, r2
 80034dc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80034de:	4b22      	ldr	r3, [pc, #136]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e2:	4a21      	ldr	r2, [pc, #132]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034e4:	f023 0301 	bic.w	r3, r3, #1
 80034e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 80034ea:	4b1f      	ldr	r3, [pc, #124]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034ec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80034ee:	4b21      	ldr	r3, [pc, #132]	; (8003574 <HAL_RCC_OscConfig+0x778>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	687a      	ldr	r2, [r7, #4]
 80034f4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80034f6:	00d2      	lsls	r2, r2, #3
 80034f8:	491b      	ldr	r1, [pc, #108]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 80034fa:	4313      	orrs	r3, r2
 80034fc:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 80034fe:	4b1a      	ldr	r3, [pc, #104]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003502:	f023 020c 	bic.w	r2, r3, #12
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350a:	4917      	ldr	r1, [pc, #92]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800350c:	4313      	orrs	r3, r2
 800350e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8003510:	4b15      	ldr	r3, [pc, #84]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003512:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003514:	f023 0202 	bic.w	r2, r3, #2
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800351c:	4912      	ldr	r1, [pc, #72]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800351e:	4313      	orrs	r3, r2
 8003520:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003522:	4b11      	ldr	r3, [pc, #68]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003524:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003526:	4a10      	ldr	r2, [pc, #64]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800352c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800352e:	4b0e      	ldr	r3, [pc, #56]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003530:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003532:	4a0d      	ldr	r2, [pc, #52]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003534:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003538:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800353a:	4b0b      	ldr	r3, [pc, #44]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800353c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800353e:	4a0a      	ldr	r2, [pc, #40]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003540:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003544:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8003546:	4b08      	ldr	r3, [pc, #32]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800354a:	4a07      	ldr	r2, [pc, #28]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 800354c:	f043 0301 	orr.w	r3, r3, #1
 8003550:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003552:	4b05      	ldr	r3, [pc, #20]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4a04      	ldr	r2, [pc, #16]	; (8003568 <HAL_RCC_OscConfig+0x76c>)
 8003558:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800355c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800355e:	f7fe f9a1 	bl	80018a4 <HAL_GetTick>
 8003562:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003564:	e011      	b.n	800358a <HAL_RCC_OscConfig+0x78e>
 8003566:	bf00      	nop
 8003568:	58024400 	.word	0x58024400
 800356c:	58024800 	.word	0x58024800
 8003570:	fffffc0c 	.word	0xfffffc0c
 8003574:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003578:	f7fe f994 	bl	80018a4 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	2b02      	cmp	r3, #2
 8003584:	d901      	bls.n	800358a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8003586:	2303      	movs	r3, #3
 8003588:	e08a      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800358a:	4b47      	ldr	r3, [pc, #284]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d0f0      	beq.n	8003578 <HAL_RCC_OscConfig+0x77c>
 8003596:	e082      	b.n	800369e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003598:	4b43      	ldr	r3, [pc, #268]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a42      	ldr	r2, [pc, #264]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 800359e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a4:	f7fe f97e 	bl	80018a4 <HAL_GetTick>
 80035a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035aa:	e008      	b.n	80035be <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80035ac:	f7fe f97a 	bl	80018a4 <HAL_GetTick>
 80035b0:	4602      	mov	r2, r0
 80035b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	2b02      	cmp	r3, #2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e070      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035be:	4b3a      	ldr	r3, [pc, #232]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d1f0      	bne.n	80035ac <HAL_RCC_OscConfig+0x7b0>
 80035ca:	e068      	b.n	800369e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80035cc:	4b36      	ldr	r3, [pc, #216]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 80035ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80035d2:	4b35      	ldr	r3, [pc, #212]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d031      	beq.n	8003644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	f003 0203 	and.w	r2, r3, #3
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d12a      	bne.n	8003644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	091b      	lsrs	r3, r3, #4
 80035f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035fa:	429a      	cmp	r2, r3
 80035fc:	d122      	bne.n	8003644 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003608:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800360a:	429a      	cmp	r2, r3
 800360c:	d11a      	bne.n	8003644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	0a5b      	lsrs	r3, r3, #9
 8003612:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800361a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800361c:	429a      	cmp	r2, r3
 800361e:	d111      	bne.n	8003644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	0c1b      	lsrs	r3, r3, #16
 8003624:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800362c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800362e:	429a      	cmp	r2, r3
 8003630:	d108      	bne.n	8003644 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	0e1b      	lsrs	r3, r3, #24
 8003636:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8003640:	429a      	cmp	r2, r3
 8003642:	d001      	beq.n	8003648 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8003644:	2301      	movs	r3, #1
 8003646:	e02b      	b.n	80036a0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8003648:	4b17      	ldr	r3, [pc, #92]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 800364a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800364c:	08db      	lsrs	r3, r3, #3
 800364e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003652:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003658:	693a      	ldr	r2, [r7, #16]
 800365a:	429a      	cmp	r2, r3
 800365c:	d01f      	beq.n	800369e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800365e:	4b12      	ldr	r3, [pc, #72]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 8003660:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003662:	4a11      	ldr	r2, [pc, #68]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 8003664:	f023 0301 	bic.w	r3, r3, #1
 8003668:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800366a:	f7fe f91b 	bl	80018a4 <HAL_GetTick>
 800366e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003670:	bf00      	nop
 8003672:	f7fe f917 	bl	80018a4 <HAL_GetTick>
 8003676:	4602      	mov	r2, r0
 8003678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367a:	4293      	cmp	r3, r2
 800367c:	d0f9      	beq.n	8003672 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800367e:	4b0a      	ldr	r3, [pc, #40]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 8003680:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003682:	4b0a      	ldr	r3, [pc, #40]	; (80036ac <HAL_RCC_OscConfig+0x8b0>)
 8003684:	4013      	ands	r3, r2
 8003686:	687a      	ldr	r2, [r7, #4]
 8003688:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800368a:	00d2      	lsls	r2, r2, #3
 800368c:	4906      	ldr	r1, [pc, #24]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 800368e:	4313      	orrs	r3, r2
 8003690:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003692:	4b05      	ldr	r3, [pc, #20]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 8003694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003696:	4a04      	ldr	r2, [pc, #16]	; (80036a8 <HAL_RCC_OscConfig+0x8ac>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800369e:	2300      	movs	r3, #0
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3730      	adds	r7, #48	; 0x30
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}
 80036a8:	58024400 	.word	0x58024400
 80036ac:	ffff0007 	.word	0xffff0007

080036b0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d101      	bne.n	80036c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e19c      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80036c4:	4b8a      	ldr	r3, [pc, #552]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	f003 030f 	and.w	r3, r3, #15
 80036cc:	683a      	ldr	r2, [r7, #0]
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d910      	bls.n	80036f4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036d2:	4b87      	ldr	r3, [pc, #540]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f023 020f 	bic.w	r2, r3, #15
 80036da:	4985      	ldr	r1, [pc, #532]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	4313      	orrs	r3, r2
 80036e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80036e2:	4b83      	ldr	r3, [pc, #524]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 030f 	and.w	r3, r3, #15
 80036ea:	683a      	ldr	r2, [r7, #0]
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d001      	beq.n	80036f4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	e184      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d010      	beq.n	8003722 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	691a      	ldr	r2, [r3, #16]
 8003704:	4b7b      	ldr	r3, [pc, #492]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003706:	699b      	ldr	r3, [r3, #24]
 8003708:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800370c:	429a      	cmp	r2, r3
 800370e:	d908      	bls.n	8003722 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003710:	4b78      	ldr	r3, [pc, #480]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	691b      	ldr	r3, [r3, #16]
 800371c:	4975      	ldr	r1, [pc, #468]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800371e:	4313      	orrs	r3, r2
 8003720:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f003 0308 	and.w	r3, r3, #8
 800372a:	2b00      	cmp	r3, #0
 800372c:	d010      	beq.n	8003750 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695a      	ldr	r2, [r3, #20]
 8003732:	4b70      	ldr	r3, [pc, #448]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003734:	69db      	ldr	r3, [r3, #28]
 8003736:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800373a:	429a      	cmp	r2, r3
 800373c:	d908      	bls.n	8003750 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800373e:	4b6d      	ldr	r3, [pc, #436]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003740:	69db      	ldr	r3, [r3, #28]
 8003742:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	496a      	ldr	r1, [pc, #424]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800374c:	4313      	orrs	r3, r2
 800374e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	f003 0310 	and.w	r3, r3, #16
 8003758:	2b00      	cmp	r3, #0
 800375a:	d010      	beq.n	800377e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	699a      	ldr	r2, [r3, #24]
 8003760:	4b64      	ldr	r3, [pc, #400]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003762:	69db      	ldr	r3, [r3, #28]
 8003764:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003768:	429a      	cmp	r2, r3
 800376a:	d908      	bls.n	800377e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800376c:	4b61      	ldr	r3, [pc, #388]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800376e:	69db      	ldr	r3, [r3, #28]
 8003770:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	699b      	ldr	r3, [r3, #24]
 8003778:	495e      	ldr	r1, [pc, #376]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800377a:	4313      	orrs	r3, r2
 800377c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0320 	and.w	r3, r3, #32
 8003786:	2b00      	cmp	r3, #0
 8003788:	d010      	beq.n	80037ac <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	69da      	ldr	r2, [r3, #28]
 800378e:	4b59      	ldr	r3, [pc, #356]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003790:	6a1b      	ldr	r3, [r3, #32]
 8003792:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003796:	429a      	cmp	r2, r3
 8003798:	d908      	bls.n	80037ac <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800379a:	4b56      	ldr	r3, [pc, #344]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800379c:	6a1b      	ldr	r3, [r3, #32]
 800379e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	69db      	ldr	r3, [r3, #28]
 80037a6:	4953      	ldr	r1, [pc, #332]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037a8:	4313      	orrs	r3, r2
 80037aa:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d010      	beq.n	80037da <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	68da      	ldr	r2, [r3, #12]
 80037bc:	4b4d      	ldr	r3, [pc, #308]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037be:	699b      	ldr	r3, [r3, #24]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d908      	bls.n	80037da <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c8:	4b4a      	ldr	r3, [pc, #296]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037ca:	699b      	ldr	r3, [r3, #24]
 80037cc:	f023 020f 	bic.w	r2, r3, #15
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68db      	ldr	r3, [r3, #12]
 80037d4:	4947      	ldr	r1, [pc, #284]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037d6:	4313      	orrs	r3, r2
 80037d8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0301 	and.w	r3, r3, #1
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d055      	beq.n	8003892 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80037e6:	4b43      	ldr	r3, [pc, #268]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037e8:	699b      	ldr	r3, [r3, #24]
 80037ea:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	689b      	ldr	r3, [r3, #8]
 80037f2:	4940      	ldr	r1, [pc, #256]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80037f4:	4313      	orrs	r3, r2
 80037f6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	2b02      	cmp	r3, #2
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003800:	4b3c      	ldr	r3, [pc, #240]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003808:	2b00      	cmp	r3, #0
 800380a:	d121      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800380c:	2301      	movs	r3, #1
 800380e:	e0f6      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	2b03      	cmp	r3, #3
 8003816:	d107      	bne.n	8003828 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003818:	4b36      	ldr	r3, [pc, #216]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d115      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003824:	2301      	movs	r3, #1
 8003826:	e0ea      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	685b      	ldr	r3, [r3, #4]
 800382c:	2b01      	cmp	r3, #1
 800382e:	d107      	bne.n	8003840 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003830:	4b30      	ldr	r3, [pc, #192]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003838:	2b00      	cmp	r3, #0
 800383a:	d109      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e0de      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003840:	4b2c      	ldr	r3, [pc, #176]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 0304 	and.w	r3, r3, #4
 8003848:	2b00      	cmp	r3, #0
 800384a:	d101      	bne.n	8003850 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e0d6      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003850:	4b28      	ldr	r3, [pc, #160]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003852:	691b      	ldr	r3, [r3, #16]
 8003854:	f023 0207 	bic.w	r2, r3, #7
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	685b      	ldr	r3, [r3, #4]
 800385c:	4925      	ldr	r1, [pc, #148]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 800385e:	4313      	orrs	r3, r2
 8003860:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003862:	f7fe f81f 	bl	80018a4 <HAL_GetTick>
 8003866:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003868:	e00a      	b.n	8003880 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800386a:	f7fe f81b 	bl	80018a4 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	f241 3288 	movw	r2, #5000	; 0x1388
 8003878:	4293      	cmp	r3, r2
 800387a:	d901      	bls.n	8003880 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800387c:	2303      	movs	r3, #3
 800387e:	e0be      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003880:	4b1c      	ldr	r3, [pc, #112]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 8003882:	691b      	ldr	r3, [r3, #16]
 8003884:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	00db      	lsls	r3, r3, #3
 800388e:	429a      	cmp	r2, r3
 8003890:	d1eb      	bne.n	800386a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 0302 	and.w	r3, r3, #2
 800389a:	2b00      	cmp	r3, #0
 800389c:	d010      	beq.n	80038c0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68da      	ldr	r2, [r3, #12]
 80038a2:	4b14      	ldr	r3, [pc, #80]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80038a4:	699b      	ldr	r3, [r3, #24]
 80038a6:	f003 030f 	and.w	r3, r3, #15
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d208      	bcs.n	80038c0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ae:	4b11      	ldr	r3, [pc, #68]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	f023 020f 	bic.w	r2, r3, #15
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	490e      	ldr	r1, [pc, #56]	; (80038f4 <HAL_RCC_ClockConfig+0x244>)
 80038bc:	4313      	orrs	r3, r2
 80038be:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038c0:	4b0b      	ldr	r3, [pc, #44]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	683a      	ldr	r2, [r7, #0]
 80038ca:	429a      	cmp	r2, r3
 80038cc:	d214      	bcs.n	80038f8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ce:	4b08      	ldr	r3, [pc, #32]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 020f 	bic.w	r2, r3, #15
 80038d6:	4906      	ldr	r1, [pc, #24]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	4313      	orrs	r3, r2
 80038dc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <HAL_RCC_ClockConfig+0x240>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d005      	beq.n	80038f8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e086      	b.n	80039fe <HAL_RCC_ClockConfig+0x34e>
 80038f0:	52002000 	.word	0x52002000
 80038f4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	f003 0304 	and.w	r3, r3, #4
 8003900:	2b00      	cmp	r3, #0
 8003902:	d010      	beq.n	8003926 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691a      	ldr	r2, [r3, #16]
 8003908:	4b3f      	ldr	r3, [pc, #252]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003910:	429a      	cmp	r2, r3
 8003912:	d208      	bcs.n	8003926 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003914:	4b3c      	ldr	r3, [pc, #240]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	691b      	ldr	r3, [r3, #16]
 8003920:	4939      	ldr	r1, [pc, #228]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003922:	4313      	orrs	r3, r2
 8003924:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0308 	and.w	r3, r3, #8
 800392e:	2b00      	cmp	r3, #0
 8003930:	d010      	beq.n	8003954 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	695a      	ldr	r2, [r3, #20]
 8003936:	4b34      	ldr	r3, [pc, #208]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003938:	69db      	ldr	r3, [r3, #28]
 800393a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800393e:	429a      	cmp	r2, r3
 8003940:	d208      	bcs.n	8003954 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003942:	4b31      	ldr	r3, [pc, #196]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003944:	69db      	ldr	r3, [r3, #28]
 8003946:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	695b      	ldr	r3, [r3, #20]
 800394e:	492e      	ldr	r1, [pc, #184]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003950:	4313      	orrs	r3, r2
 8003952:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0310 	and.w	r3, r3, #16
 800395c:	2b00      	cmp	r3, #0
 800395e:	d010      	beq.n	8003982 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699a      	ldr	r2, [r3, #24]
 8003964:	4b28      	ldr	r3, [pc, #160]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003966:	69db      	ldr	r3, [r3, #28]
 8003968:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800396c:	429a      	cmp	r2, r3
 800396e:	d208      	bcs.n	8003982 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003970:	4b25      	ldr	r3, [pc, #148]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003972:	69db      	ldr	r3, [r3, #28]
 8003974:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	699b      	ldr	r3, [r3, #24]
 800397c:	4922      	ldr	r1, [pc, #136]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 800397e:	4313      	orrs	r3, r2
 8003980:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0320 	and.w	r3, r3, #32
 800398a:	2b00      	cmp	r3, #0
 800398c:	d010      	beq.n	80039b0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	69da      	ldr	r2, [r3, #28]
 8003992:	4b1d      	ldr	r3, [pc, #116]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 8003994:	6a1b      	ldr	r3, [r3, #32]
 8003996:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800399a:	429a      	cmp	r2, r3
 800399c:	d208      	bcs.n	80039b0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800399e:	4b1a      	ldr	r3, [pc, #104]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	69db      	ldr	r3, [r3, #28]
 80039aa:	4917      	ldr	r1, [pc, #92]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 80039ac:	4313      	orrs	r3, r2
 80039ae:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80039b0:	f000 f834 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 80039b4:	4602      	mov	r2, r0
 80039b6:	4b14      	ldr	r3, [pc, #80]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 80039b8:	699b      	ldr	r3, [r3, #24]
 80039ba:	0a1b      	lsrs	r3, r3, #8
 80039bc:	f003 030f 	and.w	r3, r3, #15
 80039c0:	4912      	ldr	r1, [pc, #72]	; (8003a0c <HAL_RCC_ClockConfig+0x35c>)
 80039c2:	5ccb      	ldrb	r3, [r1, r3]
 80039c4:	f003 031f 	and.w	r3, r3, #31
 80039c8:	fa22 f303 	lsr.w	r3, r2, r3
 80039cc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <HAL_RCC_ClockConfig+0x358>)
 80039d0:	699b      	ldr	r3, [r3, #24]
 80039d2:	f003 030f 	and.w	r3, r3, #15
 80039d6:	4a0d      	ldr	r2, [pc, #52]	; (8003a0c <HAL_RCC_ClockConfig+0x35c>)
 80039d8:	5cd3      	ldrb	r3, [r2, r3]
 80039da:	f003 031f 	and.w	r3, r3, #31
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	fa22 f303 	lsr.w	r3, r2, r3
 80039e4:	4a0a      	ldr	r2, [pc, #40]	; (8003a10 <HAL_RCC_ClockConfig+0x360>)
 80039e6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80039e8:	4a0a      	ldr	r2, [pc, #40]	; (8003a14 <HAL_RCC_ClockConfig+0x364>)
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80039ee:	4b0a      	ldr	r3, [pc, #40]	; (8003a18 <HAL_RCC_ClockConfig+0x368>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fd ff0c 	bl	8001810 <HAL_InitTick>
 80039f8:	4603      	mov	r3, r0
 80039fa:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}
 8003a06:	bf00      	nop
 8003a08:	58024400 	.word	0x58024400
 8003a0c:	080085c0 	.word	0x080085c0
 8003a10:	240000d0 	.word	0x240000d0
 8003a14:	240000cc 	.word	0x240000cc
 8003a18:	240000d4 	.word	0x240000d4

08003a1c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a1c:	b480      	push	{r7}
 8003a1e:	b089      	sub	sp, #36	; 0x24
 8003a20:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a22:	4bb3      	ldr	r3, [pc, #716]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a24:	691b      	ldr	r3, [r3, #16]
 8003a26:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003a2a:	2b18      	cmp	r3, #24
 8003a2c:	f200 8155 	bhi.w	8003cda <HAL_RCC_GetSysClockFreq+0x2be>
 8003a30:	a201      	add	r2, pc, #4	; (adr r2, 8003a38 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a36:	bf00      	nop
 8003a38:	08003a9d 	.word	0x08003a9d
 8003a3c:	08003cdb 	.word	0x08003cdb
 8003a40:	08003cdb 	.word	0x08003cdb
 8003a44:	08003cdb 	.word	0x08003cdb
 8003a48:	08003cdb 	.word	0x08003cdb
 8003a4c:	08003cdb 	.word	0x08003cdb
 8003a50:	08003cdb 	.word	0x08003cdb
 8003a54:	08003cdb 	.word	0x08003cdb
 8003a58:	08003ac3 	.word	0x08003ac3
 8003a5c:	08003cdb 	.word	0x08003cdb
 8003a60:	08003cdb 	.word	0x08003cdb
 8003a64:	08003cdb 	.word	0x08003cdb
 8003a68:	08003cdb 	.word	0x08003cdb
 8003a6c:	08003cdb 	.word	0x08003cdb
 8003a70:	08003cdb 	.word	0x08003cdb
 8003a74:	08003cdb 	.word	0x08003cdb
 8003a78:	08003ac9 	.word	0x08003ac9
 8003a7c:	08003cdb 	.word	0x08003cdb
 8003a80:	08003cdb 	.word	0x08003cdb
 8003a84:	08003cdb 	.word	0x08003cdb
 8003a88:	08003cdb 	.word	0x08003cdb
 8003a8c:	08003cdb 	.word	0x08003cdb
 8003a90:	08003cdb 	.word	0x08003cdb
 8003a94:	08003cdb 	.word	0x08003cdb
 8003a98:	08003acf 	.word	0x08003acf
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003a9c:	4b94      	ldr	r3, [pc, #592]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	f003 0320 	and.w	r3, r3, #32
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d009      	beq.n	8003abc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003aa8:	4b91      	ldr	r3, [pc, #580]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	08db      	lsrs	r3, r3, #3
 8003aae:	f003 0303 	and.w	r3, r3, #3
 8003ab2:	4a90      	ldr	r2, [pc, #576]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ab4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003aba:	e111      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003abc:	4b8d      	ldr	r3, [pc, #564]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003abe:	61bb      	str	r3, [r7, #24]
      break;
 8003ac0:	e10e      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003ac2:	4b8d      	ldr	r3, [pc, #564]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003ac4:	61bb      	str	r3, [r7, #24]
      break;
 8003ac6:	e10b      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003ac8:	4b8c      	ldr	r3, [pc, #560]	; (8003cfc <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003aca:	61bb      	str	r3, [r7, #24]
      break;
 8003acc:	e108      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003ace:	4b88      	ldr	r3, [pc, #544]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ad0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ad2:	f003 0303 	and.w	r3, r3, #3
 8003ad6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003ad8:	4b85      	ldr	r3, [pc, #532]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003adc:	091b      	lsrs	r3, r3, #4
 8003ade:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ae2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003ae4:	4b82      	ldr	r3, [pc, #520]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003aee:	4b80      	ldr	r3, [pc, #512]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003af0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003af2:	08db      	lsrs	r3, r3, #3
 8003af4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003af8:	68fa      	ldr	r2, [r7, #12]
 8003afa:	fb02 f303 	mul.w	r3, r2, r3
 8003afe:	ee07 3a90 	vmov	s15, r3
 8003b02:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b06:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 80e1 	beq.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003b12:	697b      	ldr	r3, [r7, #20]
 8003b14:	2b02      	cmp	r3, #2
 8003b16:	f000 8083 	beq.w	8003c20 <HAL_RCC_GetSysClockFreq+0x204>
 8003b1a:	697b      	ldr	r3, [r7, #20]
 8003b1c:	2b02      	cmp	r3, #2
 8003b1e:	f200 80a1 	bhi.w	8003c64 <HAL_RCC_GetSysClockFreq+0x248>
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <HAL_RCC_GetSysClockFreq+0x114>
 8003b28:	697b      	ldr	r3, [r7, #20]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d056      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0x1c0>
 8003b2e:	e099      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b30:	4b6f      	ldr	r3, [pc, #444]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f003 0320 	and.w	r3, r3, #32
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d02d      	beq.n	8003b98 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b3c:	4b6c      	ldr	r3, [pc, #432]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	08db      	lsrs	r3, r3, #3
 8003b42:	f003 0303 	and.w	r3, r3, #3
 8003b46:	4a6b      	ldr	r2, [pc, #428]	; (8003cf4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003b48:	fa22 f303 	lsr.w	r3, r2, r3
 8003b4c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	ee07 3a90 	vmov	s15, r3
 8003b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	ee07 3a90 	vmov	s15, r3
 8003b5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b62:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b66:	4b62      	ldr	r3, [pc, #392]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b76:	ed97 6a02 	vldr	s12, [r7, #8]
 8003b7a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003b7e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b82:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b86:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003b8a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b8e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b92:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003b96:	e087      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	ee07 3a90 	vmov	s15, r3
 8003b9e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003d04 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003ba6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003baa:	4b51      	ldr	r3, [pc, #324]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bba:	ed97 6a02 	vldr	s12, [r7, #8]
 8003bbe:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003bc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003bca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003bce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bd6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003bda:	e065      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	ee07 3a90 	vmov	s15, r3
 8003be2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003be6:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003bea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bee:	4b40      	ldr	r3, [pc, #256]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bfe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c02:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c1a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c1e:	e043      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	ee07 3a90 	vmov	s15, r3
 8003c26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c2a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003d0c <HAL_RCC_GetSysClockFreq+0x2f0>
 8003c2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c32:	4b2f      	ldr	r3, [pc, #188]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c42:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c46:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003c62:	e021      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003c64:	693b      	ldr	r3, [r7, #16]
 8003c66:	ee07 3a90 	vmov	s15, r3
 8003c6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c6e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003d08 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003c72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c76:	4b1e      	ldr	r3, [pc, #120]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c86:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c8a:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003d00 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ca2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ca6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8003ca8:	4b11      	ldr	r3, [pc, #68]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cac:	0a5b      	lsrs	r3, r3, #9
 8003cae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8003cb6:	683b      	ldr	r3, [r7, #0]
 8003cb8:	ee07 3a90 	vmov	s15, r3
 8003cbc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003cc0:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ccc:	ee17 3a90 	vmov	r3, s15
 8003cd0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8003cd2:	e005      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	61bb      	str	r3, [r7, #24]
      break;
 8003cd8:	e002      	b.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8003cda:	4b07      	ldr	r3, [pc, #28]	; (8003cf8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003cdc:	61bb      	str	r3, [r7, #24]
      break;
 8003cde:	bf00      	nop
  }

  return sysclockfreq;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3724      	adds	r7, #36	; 0x24
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cec:	4770      	bx	lr
 8003cee:	bf00      	nop
 8003cf0:	58024400 	.word	0x58024400
 8003cf4:	03d09000 	.word	0x03d09000
 8003cf8:	003d0900 	.word	0x003d0900
 8003cfc:	017d7840 	.word	0x017d7840
 8003d00:	46000000 	.word	0x46000000
 8003d04:	4c742400 	.word	0x4c742400
 8003d08:	4a742400 	.word	0x4a742400
 8003d0c:	4bbebc20 	.word	0x4bbebc20

08003d10 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b082      	sub	sp, #8
 8003d14:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003d16:	f7ff fe81 	bl	8003a1c <HAL_RCC_GetSysClockFreq>
 8003d1a:	4602      	mov	r2, r0
 8003d1c:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d1e:	699b      	ldr	r3, [r3, #24]
 8003d20:	0a1b      	lsrs	r3, r3, #8
 8003d22:	f003 030f 	and.w	r3, r3, #15
 8003d26:	490f      	ldr	r1, [pc, #60]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d28:	5ccb      	ldrb	r3, [r1, r3]
 8003d2a:	f003 031f 	and.w	r3, r3, #31
 8003d2e:	fa22 f303 	lsr.w	r3, r2, r3
 8003d32:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d34:	4b0a      	ldr	r3, [pc, #40]	; (8003d60 <HAL_RCC_GetHCLKFreq+0x50>)
 8003d36:	699b      	ldr	r3, [r3, #24]
 8003d38:	f003 030f 	and.w	r3, r3, #15
 8003d3c:	4a09      	ldr	r2, [pc, #36]	; (8003d64 <HAL_RCC_GetHCLKFreq+0x54>)
 8003d3e:	5cd3      	ldrb	r3, [r2, r3]
 8003d40:	f003 031f 	and.w	r3, r3, #31
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	fa22 f303 	lsr.w	r3, r2, r3
 8003d4a:	4a07      	ldr	r2, [pc, #28]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d4c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d4e:	4a07      	ldr	r2, [pc, #28]	; (8003d6c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003d54:	4b04      	ldr	r3, [pc, #16]	; (8003d68 <HAL_RCC_GetHCLKFreq+0x58>)
 8003d56:	681b      	ldr	r3, [r3, #0]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3708      	adds	r7, #8
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	58024400 	.word	0x58024400
 8003d64:	080085c0 	.word	0x080085c0
 8003d68:	240000d0 	.word	0x240000d0
 8003d6c:	240000cc 	.word	0x240000cc

08003d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003d74:	f7ff ffcc 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003d78:	4602      	mov	r2, r0
 8003d7a:	4b06      	ldr	r3, [pc, #24]	; (8003d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d7c:	69db      	ldr	r3, [r3, #28]
 8003d7e:	091b      	lsrs	r3, r3, #4
 8003d80:	f003 0307 	and.w	r3, r3, #7
 8003d84:	4904      	ldr	r1, [pc, #16]	; (8003d98 <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d86:	5ccb      	ldrb	r3, [r1, r3]
 8003d88:	f003 031f 	and.w	r3, r3, #31
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	58024400 	.word	0x58024400
 8003d98:	080085c0 	.word	0x080085c0

08003d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003da0:	f7ff ffb6 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b06      	ldr	r3, [pc, #24]	; (8003dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003da8:	69db      	ldr	r3, [r3, #28]
 8003daa:	0a1b      	lsrs	r3, r3, #8
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4904      	ldr	r1, [pc, #16]	; (8003dc4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	f003 031f 	and.w	r3, r3, #31
 8003db8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003dbc:	4618      	mov	r0, r3
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	58024400 	.word	0x58024400
 8003dc4:	080085c0 	.word	0x080085c0

08003dc8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003dcc:	b0ca      	sub	sp, #296	; 0x128
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003dda:	2300      	movs	r3, #0
 8003ddc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003de0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003de4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003de8:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8003dec:	2500      	movs	r5, #0
 8003dee:	ea54 0305 	orrs.w	r3, r4, r5
 8003df2:	d049      	beq.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003df4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003dfa:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dfe:	d02f      	beq.n	8003e60 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003e00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003e04:	d828      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e06:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e0a:	d01a      	beq.n	8003e42 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8003e0c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003e10:	d822      	bhi.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d003      	beq.n	8003e1e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003e16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003e1a:	d007      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003e1c:	e01c      	b.n	8003e58 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003e1e:	4bb8      	ldr	r3, [pc, #736]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e22:	4ab7      	ldr	r2, [pc, #732]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e28:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e2a:	e01a      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003e2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e30:	3308      	adds	r3, #8
 8003e32:	2102      	movs	r1, #2
 8003e34:	4618      	mov	r0, r3
 8003e36:	f002 fb61 	bl	80064fc <RCCEx_PLL2_Config>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e40:	e00f      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	3328      	adds	r3, #40	; 0x28
 8003e48:	2102      	movs	r1, #2
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f002 fc08 	bl	8006660 <RCCEx_PLL3_Config>
 8003e50:	4603      	mov	r3, r0
 8003e52:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003e56:	e004      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e5e:	e000      	b.n	8003e62 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003e60:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e62:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	d10a      	bne.n	8003e80 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003e6a:	4ba5      	ldr	r3, [pc, #660]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e6e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003e72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e76:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003e78:	4aa1      	ldr	r2, [pc, #644]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003e7a:	430b      	orrs	r3, r1
 8003e7c:	6513      	str	r3, [r2, #80]	; 0x50
 8003e7e:	e003      	b.n	8003e88 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e80:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e84:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003e88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e90:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8003e94:	f04f 0900 	mov.w	r9, #0
 8003e98:	ea58 0309 	orrs.w	r3, r8, r9
 8003e9c:	d047      	beq.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8003e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ea2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ea4:	2b04      	cmp	r3, #4
 8003ea6:	d82a      	bhi.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x136>
 8003ea8:	a201      	add	r2, pc, #4	; (adr r2, 8003eb0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8003eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003eae:	bf00      	nop
 8003eb0:	08003ec5 	.word	0x08003ec5
 8003eb4:	08003ed3 	.word	0x08003ed3
 8003eb8:	08003ee9 	.word	0x08003ee9
 8003ebc:	08003f07 	.word	0x08003f07
 8003ec0:	08003f07 	.word	0x08003f07
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003ec4:	4b8e      	ldr	r3, [pc, #568]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ec8:	4a8d      	ldr	r2, [pc, #564]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003eca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ece:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e01a      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	3308      	adds	r3, #8
 8003ed8:	2100      	movs	r1, #0
 8003eda:	4618      	mov	r0, r3
 8003edc:	f002 fb0e 	bl	80064fc <RCCEx_PLL2_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e00f      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003eec:	3328      	adds	r3, #40	; 0x28
 8003eee:	2100      	movs	r1, #0
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f002 fbb5 	bl	8006660 <RCCEx_PLL3_Config>
 8003ef6:	4603      	mov	r3, r0
 8003ef8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003efc:	e004      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003efe:	2301      	movs	r3, #1
 8003f00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003f04:	e000      	b.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003f06:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003f10:	4b7b      	ldr	r3, [pc, #492]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f14:	f023 0107 	bic.w	r1, r3, #7
 8003f18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f1e:	4a78      	ldr	r2, [pc, #480]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f20:	430b      	orrs	r3, r1
 8003f22:	6513      	str	r3, [r2, #80]	; 0x50
 8003f24:	e003      	b.n	8003f2e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f26:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f2a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003f2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f32:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f36:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8003f3a:	f04f 0b00 	mov.w	fp, #0
 8003f3e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003f42:	d04c      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003f44:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f4e:	d030      	beq.n	8003fb2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f54:	d829      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f56:	2bc0      	cmp	r3, #192	; 0xc0
 8003f58:	d02d      	beq.n	8003fb6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 8003f5a:	2bc0      	cmp	r3, #192	; 0xc0
 8003f5c:	d825      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f5e:	2b80      	cmp	r3, #128	; 0x80
 8003f60:	d018      	beq.n	8003f94 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003f62:	2b80      	cmp	r3, #128	; 0x80
 8003f64:	d821      	bhi.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d007      	beq.n	8003f7e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8003f6e:	e01c      	b.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f70:	4b63      	ldr	r3, [pc, #396]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f74:	4a62      	ldr	r2, [pc, #392]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003f76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f7c:	e01c      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f82:	3308      	adds	r3, #8
 8003f84:	2100      	movs	r1, #0
 8003f86:	4618      	mov	r0, r3
 8003f88:	f002 fab8 	bl	80064fc <RCCEx_PLL2_Config>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003f92:	e011      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003f94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f98:	3328      	adds	r3, #40	; 0x28
 8003f9a:	2100      	movs	r1, #0
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f002 fb5f 	bl	8006660 <RCCEx_PLL3_Config>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8003fa8:	e006      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fb0:	e002      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003fb2:	bf00      	nop
 8003fb4:	e000      	b.n	8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8003fb6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fb8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10a      	bne.n	8003fd6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8003fc0:	4b4f      	ldr	r3, [pc, #316]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8003fc8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fce:	4a4c      	ldr	r2, [pc, #304]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003fd0:	430b      	orrs	r3, r1
 8003fd2:	6513      	str	r3, [r2, #80]	; 0x50
 8003fd4:	e003      	b.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fd6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fda:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe6:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8003fea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8003fee:	2300      	movs	r3, #0
 8003ff0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003ff4:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	d053      	beq.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8003ffe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004002:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004006:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800400a:	d035      	beq.n	8004078 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800400c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004010:	d82e      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8004012:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8004016:	d031      	beq.n	800407c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8004018:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800401c:	d828      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800401e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004022:	d01a      	beq.n	800405a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8004024:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004028:	d822      	bhi.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800402a:	2b00      	cmp	r3, #0
 800402c:	d003      	beq.n	8004036 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800402e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004032:	d007      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8004034:	e01c      	b.n	8004070 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004036:	4b32      	ldr	r3, [pc, #200]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004038:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403a:	4a31      	ldr	r2, [pc, #196]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800403c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004040:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004042:	e01c      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004044:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004048:	3308      	adds	r3, #8
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f002 fa55 	bl	80064fc <RCCEx_PLL2_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004058:	e011      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800405a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405e:	3328      	adds	r3, #40	; 0x28
 8004060:	2100      	movs	r1, #0
 8004062:	4618      	mov	r0, r3
 8004064:	f002 fafc 	bl	8006660 <RCCEx_PLL3_Config>
 8004068:	4603      	mov	r3, r0
 800406a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800406e:	e006      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004070:	2301      	movs	r3, #1
 8004072:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004076:	e002      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004078:	bf00      	nop
 800407a:	e000      	b.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800407c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800407e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004082:	2b00      	cmp	r3, #0
 8004084:	d10b      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004086:	4b1e      	ldr	r3, [pc, #120]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800408a:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 800408e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004092:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004096:	4a1a      	ldr	r2, [pc, #104]	; (8004100 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004098:	430b      	orrs	r3, r1
 800409a:	6593      	str	r3, [r2, #88]	; 0x58
 800409c:	e003      	b.n	80040a6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800409e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80040a2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040ae:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80040b2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80040bc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80040c0:	460b      	mov	r3, r1
 80040c2:	4313      	orrs	r3, r2
 80040c4:	d056      	beq.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80040c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040ca:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80040ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d2:	d038      	beq.n	8004146 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80040d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80040d8:	d831      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040da:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040de:	d034      	beq.n	800414a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80040e0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80040e4:	d82b      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040e6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040ea:	d01d      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80040ec:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80040f0:	d825      	bhi.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d006      	beq.n	8004104 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 80040f6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80040fa:	d00a      	beq.n	8004112 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80040fc:	e01f      	b.n	800413e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80040fe:	bf00      	nop
 8004100:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004104:	4ba2      	ldr	r3, [pc, #648]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4aa1      	ldr	r2, [pc, #644]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800410a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800410e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004110:	e01c      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004112:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004116:	3308      	adds	r3, #8
 8004118:	2100      	movs	r1, #0
 800411a:	4618      	mov	r0, r3
 800411c:	f002 f9ee 	bl	80064fc <RCCEx_PLL2_Config>
 8004120:	4603      	mov	r3, r0
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8004126:	e011      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004128:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800412c:	3328      	adds	r3, #40	; 0x28
 800412e:	2100      	movs	r1, #0
 8004130:	4618      	mov	r0, r3
 8004132:	f002 fa95 	bl	8006660 <RCCEx_PLL3_Config>
 8004136:	4603      	mov	r3, r0
 8004138:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800413c:	e006      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800413e:	2301      	movs	r3, #1
 8004140:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004144:	e002      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8004146:	bf00      	nop
 8004148:	e000      	b.n	800414c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800414a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800414c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004150:	2b00      	cmp	r3, #0
 8004152:	d10b      	bne.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8004154:	4b8e      	ldr	r3, [pc, #568]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004158:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800415c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004160:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004164:	4a8a      	ldr	r2, [pc, #552]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004166:	430b      	orrs	r3, r1
 8004168:	6593      	str	r3, [r2, #88]	; 0x58
 800416a:	e003      	b.n	8004174 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800416c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004170:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004174:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004178:	e9d3 2300 	ldrd	r2, r3, [r3]
 800417c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8004184:	2300      	movs	r3, #0
 8004186:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800418a:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 800418e:	460b      	mov	r3, r1
 8004190:	4313      	orrs	r3, r2
 8004192:	d03a      	beq.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8004194:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004198:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800419a:	2b30      	cmp	r3, #48	; 0x30
 800419c:	d01f      	beq.n	80041de <HAL_RCCEx_PeriphCLKConfig+0x416>
 800419e:	2b30      	cmp	r3, #48	; 0x30
 80041a0:	d819      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80041a2:	2b20      	cmp	r3, #32
 80041a4:	d00c      	beq.n	80041c0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80041a6:	2b20      	cmp	r3, #32
 80041a8:	d815      	bhi.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d019      	beq.n	80041e2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80041ae:	2b10      	cmp	r3, #16
 80041b0:	d111      	bne.n	80041d6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b2:	4b77      	ldr	r3, [pc, #476]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041b6:	4a76      	ldr	r2, [pc, #472]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80041be:	e011      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041c4:	3308      	adds	r3, #8
 80041c6:	2102      	movs	r1, #2
 80041c8:	4618      	mov	r0, r3
 80041ca:	f002 f997 	bl	80064fc <RCCEx_PLL2_Config>
 80041ce:	4603      	mov	r3, r0
 80041d0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80041d4:	e006      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041dc:	e002      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041de:	bf00      	nop
 80041e0:	e000      	b.n	80041e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80041e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d10a      	bne.n	8004202 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80041ec:	4b68      	ldr	r3, [pc, #416]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041f0:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 80041f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041fa:	4a65      	ldr	r2, [pc, #404]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80041fc:	430b      	orrs	r3, r1
 80041fe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004200:	e003      	b.n	800420a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004202:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004206:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800420a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800420e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004212:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8004216:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800421a:	2300      	movs	r3, #0
 800421c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8004220:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004224:	460b      	mov	r3, r1
 8004226:	4313      	orrs	r3, r2
 8004228:	d051      	beq.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800422a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800422e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004234:	d035      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8004236:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423a:	d82e      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800423c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004240:	d031      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8004242:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004246:	d828      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004248:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800424c:	d01a      	beq.n	8004284 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800424e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004252:	d822      	bhi.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8004254:	2b00      	cmp	r3, #0
 8004256:	d003      	beq.n	8004260 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8004258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425c:	d007      	beq.n	800426e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800425e:	e01c      	b.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004260:	4b4b      	ldr	r3, [pc, #300]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004264:	4a4a      	ldr	r2, [pc, #296]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800426a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800426c:	e01c      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004272:	3308      	adds	r3, #8
 8004274:	2100      	movs	r1, #0
 8004276:	4618      	mov	r0, r3
 8004278:	f002 f940 	bl	80064fc <RCCEx_PLL2_Config>
 800427c:	4603      	mov	r3, r0
 800427e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004282:	e011      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004288:	3328      	adds	r3, #40	; 0x28
 800428a:	2100      	movs	r1, #0
 800428c:	4618      	mov	r0, r3
 800428e:	f002 f9e7 	bl	8006660 <RCCEx_PLL3_Config>
 8004292:	4603      	mov	r3, r0
 8004294:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004298:	e006      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800429a:	2301      	movs	r3, #1
 800429c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042a0:	e002      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80042a2:	bf00      	nop
 80042a4:	e000      	b.n	80042a8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80042a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042b0:	4b37      	ldr	r3, [pc, #220]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80042b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042be:	4a34      	ldr	r2, [pc, #208]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80042c0:	430b      	orrs	r3, r1
 80042c2:	6513      	str	r3, [r2, #80]	; 0x50
 80042c4:	e003      	b.n	80042ce <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042c6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80042ca:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042d6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80042da:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80042de:	2300      	movs	r3, #0
 80042e0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80042e4:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 80042e8:	460b      	mov	r3, r1
 80042ea:	4313      	orrs	r3, r2
 80042ec:	d056      	beq.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 80042ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80042f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f8:	d033      	beq.n	8004362 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 80042fa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042fe:	d82c      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004300:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004304:	d02f      	beq.n	8004366 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8004306:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800430a:	d826      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800430c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004310:	d02b      	beq.n	800436a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8004312:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004316:	d820      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004318:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800431c:	d012      	beq.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800431e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004322:	d81a      	bhi.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004324:	2b00      	cmp	r3, #0
 8004326:	d022      	beq.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8004328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800432c:	d115      	bne.n	800435a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800432e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004332:	3308      	adds	r3, #8
 8004334:	2101      	movs	r1, #1
 8004336:	4618      	mov	r0, r3
 8004338:	f002 f8e0 	bl	80064fc <RCCEx_PLL2_Config>
 800433c:	4603      	mov	r3, r0
 800433e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004342:	e015      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004344:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004348:	3328      	adds	r3, #40	; 0x28
 800434a:	2101      	movs	r1, #1
 800434c:	4618      	mov	r0, r3
 800434e:	f002 f987 	bl	8006660 <RCCEx_PLL3_Config>
 8004352:	4603      	mov	r3, r0
 8004354:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8004358:	e00a      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004360:	e006      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004362:	bf00      	nop
 8004364:	e004      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004366:	bf00      	nop
 8004368:	e002      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800436a:	bf00      	nop
 800436c:	e000      	b.n	8004370 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800436e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004370:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004374:	2b00      	cmp	r3, #0
 8004376:	d10d      	bne.n	8004394 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004378:	4b05      	ldr	r3, [pc, #20]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800437a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800437c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004380:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004384:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004386:	4a02      	ldr	r2, [pc, #8]	; (8004390 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004388:	430b      	orrs	r3, r1
 800438a:	6513      	str	r3, [r2, #80]	; 0x50
 800438c:	e006      	b.n	800439c <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800438e:	bf00      	nop
 8004390:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004394:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004398:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800439c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043a4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80043a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80043ac:	2300      	movs	r3, #0
 80043ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80043b2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80043b6:	460b      	mov	r3, r1
 80043b8:	4313      	orrs	r3, r2
 80043ba:	d055      	beq.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80043bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80043c4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043c8:	d033      	beq.n	8004432 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80043ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80043ce:	d82c      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043d4:	d02f      	beq.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80043d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043da:	d826      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043dc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043e0:	d02b      	beq.n	800443a <HAL_RCCEx_PeriphCLKConfig+0x672>
 80043e2:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043e6:	d820      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043ec:	d012      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 80043ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043f2:	d81a      	bhi.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d022      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x676>
 80043f8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043fc:	d115      	bne.n	800442a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80043fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004402:	3308      	adds	r3, #8
 8004404:	2101      	movs	r1, #1
 8004406:	4618      	mov	r0, r3
 8004408:	f002 f878 	bl	80064fc <RCCEx_PLL2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004412:	e015      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004414:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004418:	3328      	adds	r3, #40	; 0x28
 800441a:	2101      	movs	r1, #1
 800441c:	4618      	mov	r0, r3
 800441e:	f002 f91f 	bl	8006660 <RCCEx_PLL3_Config>
 8004422:	4603      	mov	r3, r0
 8004424:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8004428:	e00a      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004430:	e006      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004432:	bf00      	nop
 8004434:	e004      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8004436:	bf00      	nop
 8004438:	e002      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800443a:	bf00      	nop
 800443c:	e000      	b.n	8004440 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004440:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004444:	2b00      	cmp	r3, #0
 8004446:	d10b      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004448:	4ba3      	ldr	r3, [pc, #652]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800444a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800444c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004458:	4a9f      	ldr	r2, [pc, #636]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6593      	str	r3, [r2, #88]	; 0x58
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800446c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004470:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004474:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004478:	2300      	movs	r3, #0
 800447a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800447e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004482:	460b      	mov	r3, r1
 8004484:	4313      	orrs	r3, r2
 8004486:	d037      	beq.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800448c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800448e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004492:	d00e      	beq.n	80044b2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8004494:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004498:	d816      	bhi.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 800449a:	2b00      	cmp	r3, #0
 800449c:	d018      	beq.n	80044d0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 800449e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80044a2:	d111      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044a4:	4b8c      	ldr	r3, [pc, #560]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a8:	4a8b      	ldr	r2, [pc, #556]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044b0:	e00f      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044b6:	3308      	adds	r3, #8
 80044b8:	2101      	movs	r1, #1
 80044ba:	4618      	mov	r0, r3
 80044bc:	f002 f81e 	bl	80064fc <RCCEx_PLL2_Config>
 80044c0:	4603      	mov	r3, r0
 80044c2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80044c6:	e004      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80044ce:	e000      	b.n	80044d2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80044d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10a      	bne.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80044da:	4b7f      	ldr	r3, [pc, #508]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80044e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80044e8:	4a7b      	ldr	r2, [pc, #492]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80044ea:	430b      	orrs	r3, r1
 80044ec:	6513      	str	r3, [r2, #80]	; 0x50
 80044ee:	e003      	b.n	80044f8 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044f4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80044f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004500:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004504:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004508:	2300      	movs	r3, #0
 800450a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800450e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004512:	460b      	mov	r3, r1
 8004514:	4313      	orrs	r3, r2
 8004516:	d039      	beq.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004518:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800451c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800451e:	2b03      	cmp	r3, #3
 8004520:	d81c      	bhi.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8004522:	a201      	add	r2, pc, #4	; (adr r2, 8004528 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8004524:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004528:	08004565 	.word	0x08004565
 800452c:	08004539 	.word	0x08004539
 8004530:	08004547 	.word	0x08004547
 8004534:	08004565 	.word	0x08004565
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004538:	4b67      	ldr	r3, [pc, #412]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800453c:	4a66      	ldr	r2, [pc, #408]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800453e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004542:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004544:	e00f      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004546:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800454a:	3308      	adds	r3, #8
 800454c:	2102      	movs	r1, #2
 800454e:	4618      	mov	r0, r3
 8004550:	f001 ffd4 	bl	80064fc <RCCEx_PLL2_Config>
 8004554:	4603      	mov	r3, r0
 8004556:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800455a:	e004      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004562:	e000      	b.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8004564:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004566:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800456a:	2b00      	cmp	r3, #0
 800456c:	d10a      	bne.n	8004584 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800456e:	4b5a      	ldr	r3, [pc, #360]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004570:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004572:	f023 0103 	bic.w	r1, r3, #3
 8004576:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800457c:	4a56      	ldr	r2, [pc, #344]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800457e:	430b      	orrs	r3, r1
 8004580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004582:	e003      	b.n	800458c <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004584:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004588:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800458c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004594:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8004598:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800459c:	2300      	movs	r3, #0
 800459e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80045a2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80045a6:	460b      	mov	r3, r1
 80045a8:	4313      	orrs	r3, r2
 80045aa:	f000 809f 	beq.w	80046ec <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045ae:	4b4b      	ldr	r3, [pc, #300]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a4a      	ldr	r2, [pc, #296]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045b8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80045ba:	f7fd f973 	bl	80018a4 <HAL_GetTick>
 80045be:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045c2:	e00b      	b.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c4:	f7fd f96e 	bl	80018a4 <HAL_GetTick>
 80045c8:	4602      	mov	r2, r0
 80045ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b64      	cmp	r3, #100	; 0x64
 80045d2:	d903      	bls.n	80045dc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80045da:	e005      	b.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80045dc:	4b3f      	ldr	r3, [pc, #252]	; (80046dc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d0ed      	beq.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 80045e8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d179      	bne.n	80046e4 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80045f0:	4b39      	ldr	r3, [pc, #228]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80045f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045f8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80045fc:	4053      	eors	r3, r2
 80045fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004602:	2b00      	cmp	r3, #0
 8004604:	d015      	beq.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004606:	4b34      	ldr	r3, [pc, #208]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800460a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800460e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004612:	4b31      	ldr	r3, [pc, #196]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004614:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004616:	4a30      	ldr	r2, [pc, #192]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800461c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800461e:	4b2e      	ldr	r3, [pc, #184]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004620:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004622:	4a2d      	ldr	r2, [pc, #180]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004624:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004628:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800462a:	4a2b      	ldr	r2, [pc, #172]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800462c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004630:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004632:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004636:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800463a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800463e:	d118      	bne.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004640:	f7fd f930 	bl	80018a4 <HAL_GetTick>
 8004644:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004648:	e00d      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800464a:	f7fd f92b 	bl	80018a4 <HAL_GetTick>
 800464e:	4602      	mov	r2, r0
 8004650:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8004654:	1ad2      	subs	r2, r2, r3
 8004656:	f241 3388 	movw	r3, #5000	; 0x1388
 800465a:	429a      	cmp	r2, r3
 800465c:	d903      	bls.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8004664:	e005      	b.n	8004672 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8004668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800466a:	f003 0302 	and.w	r3, r3, #2
 800466e:	2b00      	cmp	r3, #0
 8004670:	d0eb      	beq.n	800464a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8004672:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004676:	2b00      	cmp	r3, #0
 8004678:	d129      	bne.n	80046ce <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800467a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800467e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004686:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800468a:	d10e      	bne.n	80046aa <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 800468c:	4b12      	ldr	r3, [pc, #72]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004694:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004698:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800469c:	091a      	lsrs	r2, r3, #4
 800469e:	4b10      	ldr	r3, [pc, #64]	; (80046e0 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 80046a0:	4013      	ands	r3, r2
 80046a2:	4a0d      	ldr	r2, [pc, #52]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046a4:	430b      	orrs	r3, r1
 80046a6:	6113      	str	r3, [r2, #16]
 80046a8:	e005      	b.n	80046b6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80046b4:	6113      	str	r3, [r2, #16]
 80046b6:	4b08      	ldr	r3, [pc, #32]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046b8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80046ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046be:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80046c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80046c6:	4a04      	ldr	r2, [pc, #16]	; (80046d8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80046c8:	430b      	orrs	r3, r1
 80046ca:	6713      	str	r3, [r2, #112]	; 0x70
 80046cc:	e00e      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80046ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046d2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 80046d6:	e009      	b.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x924>
 80046d8:	58024400 	.word	0x58024400
 80046dc:	58024800 	.word	0x58024800
 80046e0:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80046e4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80046e8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80046ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80046f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80046f4:	f002 0301 	and.w	r3, r2, #1
 80046f8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80046fc:	2300      	movs	r3, #0
 80046fe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004702:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004706:	460b      	mov	r3, r1
 8004708:	4313      	orrs	r3, r2
 800470a:	f000 8089 	beq.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800470e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004714:	2b28      	cmp	r3, #40	; 0x28
 8004716:	d86b      	bhi.n	80047f0 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8004718:	a201      	add	r2, pc, #4	; (adr r2, 8004720 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 800471a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800471e:	bf00      	nop
 8004720:	080047f9 	.word	0x080047f9
 8004724:	080047f1 	.word	0x080047f1
 8004728:	080047f1 	.word	0x080047f1
 800472c:	080047f1 	.word	0x080047f1
 8004730:	080047f1 	.word	0x080047f1
 8004734:	080047f1 	.word	0x080047f1
 8004738:	080047f1 	.word	0x080047f1
 800473c:	080047f1 	.word	0x080047f1
 8004740:	080047c5 	.word	0x080047c5
 8004744:	080047f1 	.word	0x080047f1
 8004748:	080047f1 	.word	0x080047f1
 800474c:	080047f1 	.word	0x080047f1
 8004750:	080047f1 	.word	0x080047f1
 8004754:	080047f1 	.word	0x080047f1
 8004758:	080047f1 	.word	0x080047f1
 800475c:	080047f1 	.word	0x080047f1
 8004760:	080047db 	.word	0x080047db
 8004764:	080047f1 	.word	0x080047f1
 8004768:	080047f1 	.word	0x080047f1
 800476c:	080047f1 	.word	0x080047f1
 8004770:	080047f1 	.word	0x080047f1
 8004774:	080047f1 	.word	0x080047f1
 8004778:	080047f1 	.word	0x080047f1
 800477c:	080047f1 	.word	0x080047f1
 8004780:	080047f9 	.word	0x080047f9
 8004784:	080047f1 	.word	0x080047f1
 8004788:	080047f1 	.word	0x080047f1
 800478c:	080047f1 	.word	0x080047f1
 8004790:	080047f1 	.word	0x080047f1
 8004794:	080047f1 	.word	0x080047f1
 8004798:	080047f1 	.word	0x080047f1
 800479c:	080047f1 	.word	0x080047f1
 80047a0:	080047f9 	.word	0x080047f9
 80047a4:	080047f1 	.word	0x080047f1
 80047a8:	080047f1 	.word	0x080047f1
 80047ac:	080047f1 	.word	0x080047f1
 80047b0:	080047f1 	.word	0x080047f1
 80047b4:	080047f1 	.word	0x080047f1
 80047b8:	080047f1 	.word	0x080047f1
 80047bc:	080047f1 	.word	0x080047f1
 80047c0:	080047f9 	.word	0x080047f9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80047c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047c8:	3308      	adds	r3, #8
 80047ca:	2101      	movs	r1, #1
 80047cc:	4618      	mov	r0, r3
 80047ce:	f001 fe95 	bl	80064fc <RCCEx_PLL2_Config>
 80047d2:	4603      	mov	r3, r0
 80047d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047d8:	e00f      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80047de:	3328      	adds	r3, #40	; 0x28
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f001 ff3c 	bl	8006660 <RCCEx_PLL3_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80047ee:	e004      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80047f6:	e000      	b.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 80047f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004802:	4bbf      	ldr	r3, [pc, #764]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004804:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004806:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 800480a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800480e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004810:	4abb      	ldr	r2, [pc, #748]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004812:	430b      	orrs	r3, r1
 8004814:	6553      	str	r3, [r2, #84]	; 0x54
 8004816:	e003      	b.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004818:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800481c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004820:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004828:	f002 0302 	and.w	r3, r2, #2
 800482c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004836:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 800483a:	460b      	mov	r3, r1
 800483c:	4313      	orrs	r3, r2
 800483e:	d041      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004840:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004844:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004846:	2b05      	cmp	r3, #5
 8004848:	d824      	bhi.n	8004894 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 800484a:	a201      	add	r2, pc, #4	; (adr r2, 8004850 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 800484c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004850:	0800489d 	.word	0x0800489d
 8004854:	08004869 	.word	0x08004869
 8004858:	0800487f 	.word	0x0800487f
 800485c:	0800489d 	.word	0x0800489d
 8004860:	0800489d 	.word	0x0800489d
 8004864:	0800489d 	.word	0x0800489d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004868:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800486c:	3308      	adds	r3, #8
 800486e:	2101      	movs	r1, #1
 8004870:	4618      	mov	r0, r3
 8004872:	f001 fe43 	bl	80064fc <RCCEx_PLL2_Config>
 8004876:	4603      	mov	r3, r0
 8004878:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800487c:	e00f      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800487e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004882:	3328      	adds	r3, #40	; 0x28
 8004884:	2101      	movs	r1, #1
 8004886:	4618      	mov	r0, r3
 8004888:	f001 feea 	bl	8006660 <RCCEx_PLL3_Config>
 800488c:	4603      	mov	r3, r0
 800488e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004892:	e004      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004894:	2301      	movs	r3, #1
 8004896:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800489a:	e000      	b.n	800489e <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 800489c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800489e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d10a      	bne.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 80048a6:	4b96      	ldr	r3, [pc, #600]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f023 0107 	bic.w	r1, r3, #7
 80048ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048b4:	4a92      	ldr	r2, [pc, #584]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80048b6:	430b      	orrs	r3, r1
 80048b8:	6553      	str	r3, [r2, #84]	; 0x54
 80048ba:	e003      	b.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048bc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80048c0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048cc:	f002 0304 	and.w	r3, r2, #4
 80048d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048d4:	2300      	movs	r3, #0
 80048d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048da:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80048de:	460b      	mov	r3, r1
 80048e0:	4313      	orrs	r3, r2
 80048e2:	d044      	beq.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80048e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80048e8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80048ec:	2b05      	cmp	r3, #5
 80048ee:	d825      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 80048f0:	a201      	add	r2, pc, #4	; (adr r2, 80048f8 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 80048f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048f6:	bf00      	nop
 80048f8:	08004945 	.word	0x08004945
 80048fc:	08004911 	.word	0x08004911
 8004900:	08004927 	.word	0x08004927
 8004904:	08004945 	.word	0x08004945
 8004908:	08004945 	.word	0x08004945
 800490c:	08004945 	.word	0x08004945
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004910:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004914:	3308      	adds	r3, #8
 8004916:	2101      	movs	r1, #1
 8004918:	4618      	mov	r0, r3
 800491a:	f001 fdef 	bl	80064fc <RCCEx_PLL2_Config>
 800491e:	4603      	mov	r3, r0
 8004920:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004924:	e00f      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004926:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800492a:	3328      	adds	r3, #40	; 0x28
 800492c:	2101      	movs	r1, #1
 800492e:	4618      	mov	r0, r3
 8004930:	f001 fe96 	bl	8006660 <RCCEx_PLL3_Config>
 8004934:	4603      	mov	r3, r0
 8004936:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800493a:	e004      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004942:	e000      	b.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8004944:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004946:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800494a:	2b00      	cmp	r3, #0
 800494c:	d10b      	bne.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800494e:	4b6c      	ldr	r3, [pc, #432]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004952:	f023 0107 	bic.w	r1, r3, #7
 8004956:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800495a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800495e:	4a68      	ldr	r2, [pc, #416]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004960:	430b      	orrs	r3, r1
 8004962:	6593      	str	r3, [r2, #88]	; 0x58
 8004964:	e003      	b.n	800496e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004966:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800496a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800496e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004972:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004976:	f002 0320 	and.w	r3, r2, #32
 800497a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800497e:	2300      	movs	r3, #0
 8004980:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004984:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004988:	460b      	mov	r3, r1
 800498a:	4313      	orrs	r3, r2
 800498c:	d055      	beq.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800498e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004996:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800499a:	d033      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 800499c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80049a0:	d82c      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049a6:	d02f      	beq.n	8004a08 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 80049a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049ac:	d826      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049ae:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049b2:	d02b      	beq.n	8004a0c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 80049b4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80049b8:	d820      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049ba:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049be:	d012      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 80049c0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80049c4:	d81a      	bhi.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d022      	beq.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 80049ca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80049ce:	d115      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80049d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049d4:	3308      	adds	r3, #8
 80049d6:	2100      	movs	r1, #0
 80049d8:	4618      	mov	r0, r3
 80049da:	f001 fd8f 	bl	80064fc <RCCEx_PLL2_Config>
 80049de:	4603      	mov	r3, r0
 80049e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049e4:	e015      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80049e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80049ea:	3328      	adds	r3, #40	; 0x28
 80049ec:	2102      	movs	r1, #2
 80049ee:	4618      	mov	r0, r3
 80049f0:	f001 fe36 	bl	8006660 <RCCEx_PLL3_Config>
 80049f4:	4603      	mov	r3, r0
 80049f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80049fa:	e00a      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80049fc:	2301      	movs	r3, #1
 80049fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004a02:	e006      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a04:	bf00      	nop
 8004a06:	e004      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a08:	bf00      	nop
 8004a0a:	e002      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a0c:	bf00      	nop
 8004a0e:	e000      	b.n	8004a12 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8004a10:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d10b      	bne.n	8004a32 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004a1a:	4b39      	ldr	r3, [pc, #228]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a1e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a2a:	4a35      	ldr	r2, [pc, #212]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004a2c:	430b      	orrs	r3, r1
 8004a2e:	6553      	str	r3, [r2, #84]	; 0x54
 8004a30:	e003      	b.n	8004a3a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004a36:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004a3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a42:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004a46:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004a4a:	2300      	movs	r3, #0
 8004a4c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004a50:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004a54:	460b      	mov	r3, r1
 8004a56:	4313      	orrs	r3, r2
 8004a58:	d058      	beq.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004a5e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a62:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a66:	d033      	beq.n	8004ad0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8004a68:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004a6c:	d82c      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a72:	d02f      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8004a74:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a78:	d826      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a7a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a7e:	d02b      	beq.n	8004ad8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8004a80:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004a84:	d820      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a86:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a8a:	d012      	beq.n	8004ab2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8004a8c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a90:	d81a      	bhi.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d022      	beq.n	8004adc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8004a96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004a9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004aa0:	3308      	adds	r3, #8
 8004aa2:	2100      	movs	r1, #0
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f001 fd29 	bl	80064fc <RCCEx_PLL2_Config>
 8004aaa:	4603      	mov	r3, r0
 8004aac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ab0:	e015      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ab2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ab6:	3328      	adds	r3, #40	; 0x28
 8004ab8:	2102      	movs	r1, #2
 8004aba:	4618      	mov	r0, r3
 8004abc:	f001 fdd0 	bl	8006660 <RCCEx_PLL3_Config>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ac6:	e00a      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ac8:	2301      	movs	r3, #1
 8004aca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ace:	e006      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ad0:	bf00      	nop
 8004ad2:	e004      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ad4:	bf00      	nop
 8004ad6:	e002      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004ad8:	bf00      	nop
 8004ada:	e000      	b.n	8004ade <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8004adc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ade:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d10e      	bne.n	8004b04 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004ae6:	4b06      	ldr	r3, [pc, #24]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aea:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004aee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004af2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004af6:	4a02      	ldr	r2, [pc, #8]	; (8004b00 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8004af8:	430b      	orrs	r3, r1
 8004afa:	6593      	str	r3, [r2, #88]	; 0x58
 8004afc:	e006      	b.n	8004b0c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8004afe:	bf00      	nop
 8004b00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b14:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004b18:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004b22:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004b26:	460b      	mov	r3, r1
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	d055      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004b2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b30:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b34:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b38:	d033      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8004b3a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004b3e:	d82c      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b44:	d02f      	beq.n	8004ba6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8004b46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b4a:	d826      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b4c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b50:	d02b      	beq.n	8004baa <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8004b52:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004b56:	d820      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b5c:	d012      	beq.n	8004b84 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8004b5e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b62:	d81a      	bhi.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d022      	beq.n	8004bae <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8004b68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b6c:	d115      	bne.n	8004b9a <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004b6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b72:	3308      	adds	r3, #8
 8004b74:	2100      	movs	r1, #0
 8004b76:	4618      	mov	r0, r3
 8004b78:	f001 fcc0 	bl	80064fc <RCCEx_PLL2_Config>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b82:	e015      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004b84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004b88:	3328      	adds	r3, #40	; 0x28
 8004b8a:	2102      	movs	r1, #2
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	f001 fd67 	bl	8006660 <RCCEx_PLL3_Config>
 8004b92:	4603      	mov	r3, r0
 8004b94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004b98:	e00a      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004ba0:	e006      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ba2:	bf00      	nop
 8004ba4:	e004      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004ba6:	bf00      	nop
 8004ba8:	e002      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004baa:	bf00      	nop
 8004bac:	e000      	b.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8004bae:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004bb0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d10b      	bne.n	8004bd0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004bb8:	4ba1      	ldr	r3, [pc, #644]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bbc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bc4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004bc8:	4a9d      	ldr	r2, [pc, #628]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bce:	e003      	b.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004bd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004bd4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004bd8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004be0:	f002 0308 	and.w	r3, r2, #8
 8004be4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004be8:	2300      	movs	r3, #0
 8004bea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004bee:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004bf2:	460b      	mov	r3, r1
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	d01e      	beq.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004bf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004bfc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c04:	d10c      	bne.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c0a:	3328      	adds	r3, #40	; 0x28
 8004c0c:	2102      	movs	r1, #2
 8004c0e:	4618      	mov	r0, r3
 8004c10:	f001 fd26 	bl	8006660 <RCCEx_PLL3_Config>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004c20:	4b87      	ldr	r3, [pc, #540]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c24:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004c28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c2c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004c30:	4a83      	ldr	r2, [pc, #524]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c32:	430b      	orrs	r3, r1
 8004c34:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004c36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f002 0310 	and.w	r3, r2, #16
 8004c42:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004c4c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d01e      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004c56:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c5a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c62:	d10c      	bne.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004c64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c68:	3328      	adds	r3, #40	; 0x28
 8004c6a:	2102      	movs	r1, #2
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f001 fcf7 	bl	8006660 <RCCEx_PLL3_Config>
 8004c72:	4603      	mov	r3, r0
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d002      	beq.n	8004c7e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004c78:	2301      	movs	r3, #1
 8004c7a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004c7e:	4b70      	ldr	r3, [pc, #448]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004c82:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004c86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c8a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004c8e:	4a6c      	ldr	r2, [pc, #432]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004c90:	430b      	orrs	r3, r1
 8004c92:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004c94:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c9c:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8004ca0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004caa:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	d03e      	beq.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8004cb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cb8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004cbc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc0:	d022      	beq.n	8004d08 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 8004cc2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004cc6:	d81b      	bhi.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d003      	beq.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8004ccc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cd0:	d00b      	beq.n	8004cea <HAL_RCCEx_PeriphCLKConfig+0xf22>
 8004cd2:	e015      	b.n	8004d00 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004cd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cd8:	3308      	adds	r3, #8
 8004cda:	2100      	movs	r1, #0
 8004cdc:	4618      	mov	r0, r3
 8004cde:	f001 fc0d 	bl	80064fc <RCCEx_PLL2_Config>
 8004ce2:	4603      	mov	r3, r0
 8004ce4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004ce8:	e00f      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004cea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004cee:	3328      	adds	r3, #40	; 0x28
 8004cf0:	2102      	movs	r1, #2
 8004cf2:	4618      	mov	r0, r3
 8004cf4:	f001 fcb4 	bl	8006660 <RCCEx_PLL3_Config>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004cfe:	e004      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d00:	2301      	movs	r3, #1
 8004d02:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d06:	e000      	b.n	8004d0a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004d08:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d10b      	bne.n	8004d2a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004d12:	4b4b      	ldr	r3, [pc, #300]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d16:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8004d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d1e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004d22:	4a47      	ldr	r2, [pc, #284]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d24:	430b      	orrs	r3, r1
 8004d26:	6593      	str	r3, [r2, #88]	; 0x58
 8004d28:	e003      	b.n	8004d32 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004d2e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004d32:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8004d3e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004d40:	2300      	movs	r3, #0
 8004d42:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004d44:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004d48:	460b      	mov	r3, r1
 8004d4a:	4313      	orrs	r3, r2
 8004d4c:	d03b      	beq.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8004d4e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d56:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d5a:	d01f      	beq.n	8004d9c <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 8004d5c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004d60:	d818      	bhi.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004d62:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d66:	d003      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004d68:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004d6c:	d007      	beq.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8004d6e:	e011      	b.n	8004d94 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004d70:	4b33      	ldr	r3, [pc, #204]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d74:	4a32      	ldr	r2, [pc, #200]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004d76:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d7a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d7c:	e00f      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004d82:	3328      	adds	r3, #40	; 0x28
 8004d84:	2101      	movs	r1, #1
 8004d86:	4618      	mov	r0, r3
 8004d88:	f001 fc6a 	bl	8006660 <RCCEx_PLL3_Config>
 8004d8c:	4603      	mov	r3, r0
 8004d8e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 8004d92:	e004      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004d9a:	e000      	b.n	8004d9e <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8004d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d10b      	bne.n	8004dbe <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004da6:	4b26      	ldr	r3, [pc, #152]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8004dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004db2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004db6:	4a22      	ldr	r2, [pc, #136]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004db8:	430b      	orrs	r3, r1
 8004dba:	6553      	str	r3, [r2, #84]	; 0x54
 8004dbc:	e003      	b.n	8004dc6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dce:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8004dd2:	673b      	str	r3, [r7, #112]	; 0x70
 8004dd4:	2300      	movs	r3, #0
 8004dd6:	677b      	str	r3, [r7, #116]	; 0x74
 8004dd8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8004ddc:	460b      	mov	r3, r1
 8004dde:	4313      	orrs	r3, r2
 8004de0:	d034      	beq.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004de2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004de6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8004dec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004df0:	d007      	beq.n	8004e02 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004df2:	e011      	b.n	8004e18 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004df4:	4b12      	ldr	r3, [pc, #72]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df8:	4a11      	ldr	r2, [pc, #68]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004dfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dfe:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e00:	e00e      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004e02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e06:	3308      	adds	r3, #8
 8004e08:	2102      	movs	r1, #2
 8004e0a:	4618      	mov	r0, r3
 8004e0c:	f001 fb76 	bl	80064fc <RCCEx_PLL2_Config>
 8004e10:	4603      	mov	r3, r0
 8004e12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004e16:	e003      	b.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004e1e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e20:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004e28:	4b05      	ldr	r3, [pc, #20]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004e30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e36:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004e38:	430b      	orrs	r3, r1
 8004e3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e3c:	e006      	b.n	8004e4c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 8004e3e:	bf00      	nop
 8004e40:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004e48:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004e4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004e58:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e5e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004e62:	460b      	mov	r3, r1
 8004e64:	4313      	orrs	r3, r2
 8004e66:	d00c      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004e68:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e6c:	3328      	adds	r3, #40	; 0x28
 8004e6e:	2102      	movs	r1, #2
 8004e70:	4618      	mov	r0, r3
 8004e72:	f001 fbf5 	bl	8006660 <RCCEx_PLL3_Config>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d002      	beq.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004e82:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8004e8e:	663b      	str	r3, [r7, #96]	; 0x60
 8004e90:	2300      	movs	r3, #0
 8004e92:	667b      	str	r3, [r7, #100]	; 0x64
 8004e94:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4313      	orrs	r3, r2
 8004e9c:	d038      	beq.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 8004e9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004ea2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004ea6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eaa:	d018      	beq.n	8004ede <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8004eac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004eb0:	d811      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004eb2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004eb6:	d014      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8004eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ebc:	d80b      	bhi.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d011      	beq.n	8004ee6 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 8004ec2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004ec6:	d106      	bne.n	8004ed6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ec8:	4bc3      	ldr	r3, [pc, #780]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004eca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ecc:	4ac2      	ldr	r2, [pc, #776]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ece:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004ed2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8004ed4:	e008      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ed6:	2301      	movs	r3, #1
 8004ed8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004edc:	e004      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ede:	bf00      	nop
 8004ee0:	e002      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ee2:	bf00      	nop
 8004ee4:	e000      	b.n	8004ee8 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004ee6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004ee8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d10b      	bne.n	8004f08 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ef0:	4bb9      	ldr	r3, [pc, #740]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ef4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004ef8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004efc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f00:	4ab5      	ldr	r2, [pc, #724]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f02:	430b      	orrs	r3, r1
 8004f04:	6553      	str	r3, [r2, #84]	; 0x54
 8004f06:	e003      	b.n	8004f10 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004f0c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f18:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8004f1c:	65bb      	str	r3, [r7, #88]	; 0x58
 8004f1e:	2300      	movs	r3, #0
 8004f20:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f22:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004f26:	460b      	mov	r3, r1
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004f2c:	4baa      	ldr	r3, [pc, #680]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f30:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004f34:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004f3a:	4aa7      	ldr	r2, [pc, #668]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004f40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f48:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8004f4c:	653b      	str	r3, [r7, #80]	; 0x50
 8004f4e:	2300      	movs	r3, #0
 8004f50:	657b      	str	r3, [r7, #84]	; 0x54
 8004f52:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004f56:	460b      	mov	r3, r1
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	d00a      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004f5c:	4b9e      	ldr	r3, [pc, #632]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f5e:	691b      	ldr	r3, [r3, #16]
 8004f60:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f68:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004f6c:	4a9a      	ldr	r2, [pc, #616]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f6e:	430b      	orrs	r3, r1
 8004f70:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004f72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8004f7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004f80:	2300      	movs	r3, #0
 8004f82:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f84:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8004f88:	460b      	mov	r3, r1
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	d009      	beq.n	8004fa2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004f8e:	4b92      	ldr	r3, [pc, #584]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f92:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8004f96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004f9a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004f9c:	4a8e      	ldr	r2, [pc, #568]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004f9e:	430b      	orrs	r3, r1
 8004fa0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004fa2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004faa:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8004fae:	643b      	str	r3, [r7, #64]	; 0x40
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	647b      	str	r3, [r7, #68]	; 0x44
 8004fb4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8004fb8:	460b      	mov	r3, r1
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	d00e      	beq.n	8004fdc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004fbe:	4b86      	ldr	r3, [pc, #536]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fc0:	691b      	ldr	r3, [r3, #16]
 8004fc2:	4a85      	ldr	r2, [pc, #532]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fc4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004fc8:	6113      	str	r3, [r2, #16]
 8004fca:	4b83      	ldr	r3, [pc, #524]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fcc:	6919      	ldr	r1, [r3, #16]
 8004fce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fd2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8004fd6:	4a80      	ldr	r2, [pc, #512]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004fd8:	430b      	orrs	r3, r1
 8004fda:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004fdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fe4:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fea:	2300      	movs	r3, #0
 8004fec:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004fee:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	d009      	beq.n	800500c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004ff8:	4b77      	ldr	r3, [pc, #476]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004ffa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ffc:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005000:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005006:	4a74      	ldr	r2, [pc, #464]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8005008:	430b      	orrs	r3, r1
 800500a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800500c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005018:	633b      	str	r3, [r7, #48]	; 0x30
 800501a:	2300      	movs	r3, #0
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
 800501e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8005022:	460b      	mov	r3, r1
 8005024:	4313      	orrs	r3, r2
 8005026:	d00a      	beq.n	800503e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005028:	4b6b      	ldr	r3, [pc, #428]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800502a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800502c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005030:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005038:	4a67      	ldr	r2, [pc, #412]	; (80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800503a:	430b      	orrs	r3, r1
 800503c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800503e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005046:	2100      	movs	r1, #0
 8005048:	62b9      	str	r1, [r7, #40]	; 0x28
 800504a:	f003 0301 	and.w	r3, r3, #1
 800504e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005050:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8005054:	460b      	mov	r3, r1
 8005056:	4313      	orrs	r3, r2
 8005058:	d011      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800505a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800505e:	3308      	adds	r3, #8
 8005060:	2100      	movs	r1, #0
 8005062:	4618      	mov	r0, r3
 8005064:	f001 fa4a 	bl	80064fc <RCCEx_PLL2_Config>
 8005068:	4603      	mov	r3, r0
 800506a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800506e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005076:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800507a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800507e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005086:	2100      	movs	r1, #0
 8005088:	6239      	str	r1, [r7, #32]
 800508a:	f003 0302 	and.w	r3, r3, #2
 800508e:	627b      	str	r3, [r7, #36]	; 0x24
 8005090:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8005094:	460b      	mov	r3, r1
 8005096:	4313      	orrs	r3, r2
 8005098:	d011      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800509a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800509e:	3308      	adds	r3, #8
 80050a0:	2101      	movs	r1, #1
 80050a2:	4618      	mov	r0, r3
 80050a4:	f001 fa2a 	bl	80064fc <RCCEx_PLL2_Config>
 80050a8:	4603      	mov	r3, r0
 80050aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80050ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d003      	beq.n	80050be <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80050be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c6:	2100      	movs	r1, #0
 80050c8:	61b9      	str	r1, [r7, #24]
 80050ca:	f003 0304 	and.w	r3, r3, #4
 80050ce:	61fb      	str	r3, [r7, #28]
 80050d0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80050d4:	460b      	mov	r3, r1
 80050d6:	4313      	orrs	r3, r2
 80050d8:	d011      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80050da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80050de:	3308      	adds	r3, #8
 80050e0:	2102      	movs	r1, #2
 80050e2:	4618      	mov	r0, r3
 80050e4:	f001 fa0a 	bl	80064fc <RCCEx_PLL2_Config>
 80050e8:	4603      	mov	r3, r0
 80050ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80050ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80050f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80050fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80050fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005106:	2100      	movs	r1, #0
 8005108:	6139      	str	r1, [r7, #16]
 800510a:	f003 0308 	and.w	r3, r3, #8
 800510e:	617b      	str	r3, [r7, #20]
 8005110:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8005114:	460b      	mov	r3, r1
 8005116:	4313      	orrs	r3, r2
 8005118:	d011      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800511a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800511e:	3328      	adds	r3, #40	; 0x28
 8005120:	2100      	movs	r1, #0
 8005122:	4618      	mov	r0, r3
 8005124:	f001 fa9c 	bl	8006660 <RCCEx_PLL3_Config>
 8005128:	4603      	mov	r3, r0
 800512a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800512e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005132:	2b00      	cmp	r3, #0
 8005134:	d003      	beq.n	800513e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005136:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800513a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800513e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	2100      	movs	r1, #0
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	f003 0310 	and.w	r3, r3, #16
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8005154:	460b      	mov	r3, r1
 8005156:	4313      	orrs	r3, r2
 8005158:	d011      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800515a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800515e:	3328      	adds	r3, #40	; 0x28
 8005160:	2101      	movs	r1, #1
 8005162:	4618      	mov	r0, r3
 8005164:	f001 fa7c 	bl	8006660 <RCCEx_PLL3_Config>
 8005168:	4603      	mov	r3, r0
 800516a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800516e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8005172:	2b00      	cmp	r3, #0
 8005174:	d003      	beq.n	800517e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005176:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800517a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800517e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	2100      	movs	r1, #0
 8005188:	6039      	str	r1, [r7, #0]
 800518a:	f003 0320 	and.w	r3, r3, #32
 800518e:	607b      	str	r3, [r7, #4]
 8005190:	e9d7 1200 	ldrd	r1, r2, [r7]
 8005194:	460b      	mov	r3, r1
 8005196:	4313      	orrs	r3, r2
 8005198:	d011      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800519a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800519e:	3328      	adds	r3, #40	; 0x28
 80051a0:	2102      	movs	r1, #2
 80051a2:	4618      	mov	r0, r3
 80051a4:	f001 fa5c 	bl	8006660 <RCCEx_PLL3_Config>
 80051a8:	4603      	mov	r3, r0
 80051aa:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80051ae:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d003      	beq.n	80051be <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80051ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80051be:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e000      	b.n	80051cc <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80051d2:	46bd      	mov	sp, r7
 80051d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80051d8:	58024400 	.word	0x58024400

080051dc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b090      	sub	sp, #64	; 0x40
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80051e6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80051ea:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 80051ee:	430b      	orrs	r3, r1
 80051f0:	f040 8094 	bne.w	800531c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 80051f4:	4b9e      	ldr	r3, [pc, #632]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80051f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051f8:	f003 0307 	and.w	r3, r3, #7
 80051fc:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80051fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005200:	2b04      	cmp	r3, #4
 8005202:	f200 8087 	bhi.w	8005314 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8005206:	a201      	add	r2, pc, #4	; (adr r2, 800520c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800520c:	08005221 	.word	0x08005221
 8005210:	08005249 	.word	0x08005249
 8005214:	08005271 	.word	0x08005271
 8005218:	0800530d 	.word	0x0800530d
 800521c:	08005299 	.word	0x08005299
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005220:	4b93      	ldr	r3, [pc, #588]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005228:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800522c:	d108      	bne.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800522e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005232:	4618      	mov	r0, r3
 8005234:	f001 f810 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800523c:	f000 bd45 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005240:	2300      	movs	r3, #0
 8005242:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005244:	f000 bd41 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005248:	4b89      	ldr	r3, [pc, #548]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005250:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005254:	d108      	bne.n	8005268 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005256:	f107 0318 	add.w	r3, r7, #24
 800525a:	4618      	mov	r0, r3
 800525c:	f000 fd54 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005260:	69bb      	ldr	r3, [r7, #24]
 8005262:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005264:	f000 bd31 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005268:	2300      	movs	r3, #0
 800526a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800526c:	f000 bd2d 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005270:	4b7f      	ldr	r3, [pc, #508]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005278:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800527c:	d108      	bne.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800527e:	f107 030c 	add.w	r3, r7, #12
 8005282:	4618      	mov	r0, r3
 8005284:	f000 fe94 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800528c:	f000 bd1d 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005290:	2300      	movs	r3, #0
 8005292:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005294:	f000 bd19 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005298:	4b75      	ldr	r3, [pc, #468]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800529a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800529c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80052a0:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80052a2:	4b73      	ldr	r3, [pc, #460]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f003 0304 	and.w	r3, r3, #4
 80052aa:	2b04      	cmp	r3, #4
 80052ac:	d10c      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d109      	bne.n	80052c8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80052b4:	4b6e      	ldr	r3, [pc, #440]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	08db      	lsrs	r3, r3, #3
 80052ba:	f003 0303 	and.w	r3, r3, #3
 80052be:	4a6d      	ldr	r2, [pc, #436]	; (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80052c0:	fa22 f303 	lsr.w	r3, r2, r3
 80052c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052c6:	e01f      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80052c8:	4b69      	ldr	r3, [pc, #420]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052d4:	d106      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80052d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80052dc:	d102      	bne.n	80052e4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80052de:	4b66      	ldr	r3, [pc, #408]	; (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80052e0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052e2:	e011      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80052e4:	4b62      	ldr	r3, [pc, #392]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052ec:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80052f0:	d106      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 80052f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80052f8:	d102      	bne.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80052fa:	4b60      	ldr	r3, [pc, #384]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 80052fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80052fe:	e003      	b.n	8005308 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005300:	2300      	movs	r3, #0
 8005302:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005304:	f000 bce1 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005308:	f000 bcdf 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800530c:	4b5c      	ldr	r3, [pc, #368]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800530e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005310:	f000 bcdb 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005314:	2300      	movs	r3, #0
 8005316:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005318:	f000 bcd7 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800531c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005320:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 8005324:	430b      	orrs	r3, r1
 8005326:	f040 80ad 	bne.w	8005484 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800532a:	4b51      	ldr	r3, [pc, #324]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800532c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800532e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8005332:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005336:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800533a:	d056      	beq.n	80053ea <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800533c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800533e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005342:	f200 8090 	bhi.w	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005346:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005348:	2bc0      	cmp	r3, #192	; 0xc0
 800534a:	f000 8088 	beq.w	800545e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800534e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005350:	2bc0      	cmp	r3, #192	; 0xc0
 8005352:	f200 8088 	bhi.w	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005356:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005358:	2b80      	cmp	r3, #128	; 0x80
 800535a:	d032      	beq.n	80053c2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800535c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800535e:	2b80      	cmp	r3, #128	; 0x80
 8005360:	f200 8081 	bhi.w	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8005364:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005366:	2b00      	cmp	r3, #0
 8005368:	d003      	beq.n	8005372 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800536a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536c:	2b40      	cmp	r3, #64	; 0x40
 800536e:	d014      	beq.n	800539a <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005370:	e079      	b.n	8005466 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005372:	4b3f      	ldr	r3, [pc, #252]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800537a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800537e:	d108      	bne.n	8005392 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005384:	4618      	mov	r0, r3
 8005386:	f000 ff67 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800538a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800538c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800538e:	f000 bc9c 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005392:	2300      	movs	r3, #0
 8005394:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005396:	f000 bc98 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800539a:	4b35      	ldr	r3, [pc, #212]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80053a2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a6:	d108      	bne.n	80053ba <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80053a8:	f107 0318 	add.w	r3, r7, #24
 80053ac:	4618      	mov	r0, r3
 80053ae:	f000 fcab 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053b6:	f000 bc88 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053ba:	2300      	movs	r3, #0
 80053bc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053be:	f000 bc84 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80053c2:	4b2b      	ldr	r3, [pc, #172]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80053ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80053ce:	d108      	bne.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80053d0:	f107 030c 	add.w	r3, r7, #12
 80053d4:	4618      	mov	r0, r3
 80053d6:	f000 fdeb 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80053de:	f000 bc74 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80053e2:	2300      	movs	r3, #0
 80053e4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80053e6:	f000 bc70 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80053ea:	4b21      	ldr	r3, [pc, #132]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80053ee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80053f2:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80053f4:	4b1e      	ldr	r3, [pc, #120]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	f003 0304 	and.w	r3, r3, #4
 80053fc:	2b04      	cmp	r3, #4
 80053fe:	d10c      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005402:	2b00      	cmp	r3, #0
 8005404:	d109      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005406:	4b1a      	ldr	r3, [pc, #104]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	08db      	lsrs	r3, r3, #3
 800540c:	f003 0303 	and.w	r3, r3, #3
 8005410:	4a18      	ldr	r2, [pc, #96]	; (8005474 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8005412:	fa22 f303 	lsr.w	r3, r2, r3
 8005416:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005418:	e01f      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800541a:	4b15      	ldr	r3, [pc, #84]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005422:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005426:	d106      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800542e:	d102      	bne.n	8005436 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005430:	4b11      	ldr	r3, [pc, #68]	; (8005478 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8005432:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005434:	e011      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005436:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005442:	d106      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8005444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005446:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800544a:	d102      	bne.n	8005452 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800544e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005450:	e003      	b.n	800545a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005452:	2300      	movs	r3, #0
 8005454:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005456:	f000 bc38 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800545a:	f000 bc36 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800545e:	4b08      	ldr	r3, [pc, #32]	; (8005480 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005460:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005462:	f000 bc32 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005466:	2300      	movs	r3, #0
 8005468:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800546a:	f000 bc2e 	b.w	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800546e:	bf00      	nop
 8005470:	58024400 	.word	0x58024400
 8005474:	03d09000 	.word	0x03d09000
 8005478:	003d0900 	.word	0x003d0900
 800547c:	017d7840 	.word	0x017d7840
 8005480:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8005484:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005488:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 800548c:	430b      	orrs	r3, r1
 800548e:	f040 809c 	bne.w	80055ca <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 8005492:	4b9e      	ldr	r3, [pc, #632]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005496:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 800549a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800549c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054a2:	d054      	beq.n	800554e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80054a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80054aa:	f200 808b 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054b4:	f000 8083 	beq.w	80055be <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80054b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ba:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80054be:	f200 8081 	bhi.w	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80054c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054c4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c8:	d02f      	beq.n	800552a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80054ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054cc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054d0:	d878      	bhi.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80054d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d004      	beq.n	80054e2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80054d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054da:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80054de:	d012      	beq.n	8005506 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80054e0:	e070      	b.n	80055c4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80054e2:	4b8a      	ldr	r3, [pc, #552]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80054ee:	d107      	bne.n	8005500 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80054f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054f4:	4618      	mov	r0, r3
 80054f6:	f000 feaf 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80054fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80054fe:	e3e4      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005500:	2300      	movs	r3, #0
 8005502:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005504:	e3e1      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005506:	4b81      	ldr	r3, [pc, #516]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800550e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005512:	d107      	bne.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005514:	f107 0318 	add.w	r3, r7, #24
 8005518:	4618      	mov	r0, r3
 800551a:	f000 fbf5 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005522:	e3d2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005524:	2300      	movs	r3, #0
 8005526:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005528:	e3cf      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800552a:	4b78      	ldr	r3, [pc, #480]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005532:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005536:	d107      	bne.n	8005548 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	4618      	mov	r0, r3
 800553e:	f000 fd37 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005546:	e3c0      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005548:	2300      	movs	r3, #0
 800554a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800554c:	e3bd      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800554e:	4b6f      	ldr	r3, [pc, #444]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005552:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005556:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005558:	4b6c      	ldr	r3, [pc, #432]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	f003 0304 	and.w	r3, r3, #4
 8005560:	2b04      	cmp	r3, #4
 8005562:	d10c      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8005564:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005566:	2b00      	cmp	r3, #0
 8005568:	d109      	bne.n	800557e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800556a:	4b68      	ldr	r3, [pc, #416]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	08db      	lsrs	r3, r3, #3
 8005570:	f003 0303 	and.w	r3, r3, #3
 8005574:	4a66      	ldr	r2, [pc, #408]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005576:	fa22 f303 	lsr.w	r3, r2, r3
 800557a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800557c:	e01e      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800557e:	4b63      	ldr	r3, [pc, #396]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005580:	681b      	ldr	r3, [r3, #0]
 8005582:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005586:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800558a:	d106      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800558c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800558e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005592:	d102      	bne.n	800559a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005594:	4b5f      	ldr	r3, [pc, #380]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005596:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005598:	e010      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800559a:	4b5c      	ldr	r3, [pc, #368]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80055a6:	d106      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80055a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80055ae:	d102      	bne.n	80055b6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80055b0:	4b59      	ldr	r3, [pc, #356]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80055b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80055b4:	e002      	b.n	80055bc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80055ba:	e386      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80055bc:	e385      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80055be:	4b57      	ldr	r3, [pc, #348]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80055c0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c2:	e382      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80055c4:	2300      	movs	r3, #0
 80055c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055c8:	e37f      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80055ca:	e9d7 2300 	ldrd	r2, r3, [r7]
 80055ce:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80055d2:	430b      	orrs	r3, r1
 80055d4:	f040 80a7 	bne.w	8005726 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80055d8:	4b4c      	ldr	r3, [pc, #304]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80055da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80055dc:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80055e0:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80055e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055e8:	d055      	beq.n	8005696 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80055ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ec:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80055f0:	f200 8096 	bhi.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 80055f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055f6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80055fa:	f000 8084 	beq.w	8005706 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 80055fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005600:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005604:	f200 808c 	bhi.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800560a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800560e:	d030      	beq.n	8005672 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005612:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005616:	f200 8083 	bhi.w	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800561a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800561c:	2b00      	cmp	r3, #0
 800561e:	d004      	beq.n	800562a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005620:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005622:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005626:	d012      	beq.n	800564e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005628:	e07a      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800562a:	4b38      	ldr	r3, [pc, #224]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005636:	d107      	bne.n	8005648 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005638:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800563c:	4618      	mov	r0, r3
 800563e:	f000 fe0b 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005642:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005644:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005646:	e340      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005648:	2300      	movs	r3, #0
 800564a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800564c:	e33d      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800564e:	4b2f      	ldr	r3, [pc, #188]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005656:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800565a:	d107      	bne.n	800566c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800565c:	f107 0318 	add.w	r3, r7, #24
 8005660:	4618      	mov	r0, r3
 8005662:	f000 fb51 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800566a:	e32e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800566c:	2300      	movs	r3, #0
 800566e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005670:	e32b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005672:	4b26      	ldr	r3, [pc, #152]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800567a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800567e:	d107      	bne.n	8005690 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005680:	f107 030c 	add.w	r3, r7, #12
 8005684:	4618      	mov	r0, r3
 8005686:	f000 fc93 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800568e:	e31c      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005690:	2300      	movs	r3, #0
 8005692:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005694:	e319      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005696:	4b1d      	ldr	r3, [pc, #116]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800569a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800569e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056a0:	4b1a      	ldr	r3, [pc, #104]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f003 0304 	and.w	r3, r3, #4
 80056a8:	2b04      	cmp	r3, #4
 80056aa:	d10c      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80056ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d109      	bne.n	80056c6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056b2:	4b16      	ldr	r3, [pc, #88]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	08db      	lsrs	r3, r3, #3
 80056b8:	f003 0303 	and.w	r3, r3, #3
 80056bc:	4a14      	ldr	r2, [pc, #80]	; (8005710 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80056be:	fa22 f303 	lsr.w	r3, r2, r3
 80056c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056c4:	e01e      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056c6:	4b11      	ldr	r3, [pc, #68]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056d2:	d106      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80056d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056da:	d102      	bne.n	80056e2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056dc:	4b0d      	ldr	r3, [pc, #52]	; (8005714 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80056de:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056e0:	e010      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056e2:	4b0a      	ldr	r3, [pc, #40]	; (800570c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ea:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80056ee:	d106      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 80056f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80056f6:	d102      	bne.n	80056fe <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80056f8:	4b07      	ldr	r3, [pc, #28]	; (8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80056fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fc:	e002      	b.n	8005704 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80056fe:	2300      	movs	r3, #0
 8005700:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005702:	e2e2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005704:	e2e1      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005706:	4b05      	ldr	r3, [pc, #20]	; (800571c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005708:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800570a:	e2de      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800570c:	58024400 	.word	0x58024400
 8005710:	03d09000 	.word	0x03d09000
 8005714:	003d0900 	.word	0x003d0900
 8005718:	017d7840 	.word	0x017d7840
 800571c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005720:	2300      	movs	r3, #0
 8005722:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005724:	e2d1      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005726:	e9d7 2300 	ldrd	r2, r3, [r7]
 800572a:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 800572e:	430b      	orrs	r3, r1
 8005730:	f040 809c 	bne.w	800586c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005734:	4b93      	ldr	r3, [pc, #588]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005738:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 800573c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 800573e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005740:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005744:	d054      	beq.n	80057f0 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005748:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800574c:	f200 808b 	bhi.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005756:	f000 8083 	beq.w	8005860 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800575a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005760:	f200 8081 	bhi.w	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005766:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800576a:	d02f      	beq.n	80057cc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800576c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800576e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005772:	d878      	bhi.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005774:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005776:	2b00      	cmp	r3, #0
 8005778:	d004      	beq.n	8005784 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800577a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800577c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005780:	d012      	beq.n	80057a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005782:	e070      	b.n	8005866 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005784:	4b7f      	ldr	r3, [pc, #508]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800578c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005790:	d107      	bne.n	80057a2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005792:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005796:	4618      	mov	r0, r3
 8005798:	f000 fd5e 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800579c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800579e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a0:	e293      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057a6:	e290      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057a8:	4b76      	ldr	r3, [pc, #472]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057b0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057b4:	d107      	bne.n	80057c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057b6:	f107 0318 	add.w	r3, r7, #24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f000 faa4 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057c0:	69bb      	ldr	r3, [r7, #24]
 80057c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057c4:	e281      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057c6:	2300      	movs	r3, #0
 80057c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ca:	e27e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057cc:	4b6d      	ldr	r3, [pc, #436]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057d8:	d107      	bne.n	80057ea <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057da:	f107 030c 	add.w	r3, r7, #12
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fbe6 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057e8:	e26f      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057ea:	2300      	movs	r3, #0
 80057ec:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ee:	e26c      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80057f0:	4b64      	ldr	r3, [pc, #400]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80057f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80057f8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80057fa:	4b62      	ldr	r3, [pc, #392]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	f003 0304 	and.w	r3, r3, #4
 8005802:	2b04      	cmp	r3, #4
 8005804:	d10c      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005806:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005808:	2b00      	cmp	r3, #0
 800580a:	d109      	bne.n	8005820 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800580c:	4b5d      	ldr	r3, [pc, #372]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	08db      	lsrs	r3, r3, #3
 8005812:	f003 0303 	and.w	r3, r3, #3
 8005816:	4a5c      	ldr	r2, [pc, #368]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005818:	fa22 f303 	lsr.w	r3, r2, r3
 800581c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800581e:	e01e      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005820:	4b58      	ldr	r3, [pc, #352]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005828:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800582c:	d106      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800582e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005830:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005834:	d102      	bne.n	800583c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005836:	4b55      	ldr	r3, [pc, #340]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005838:	63fb      	str	r3, [r7, #60]	; 0x3c
 800583a:	e010      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800583c:	4b51      	ldr	r3, [pc, #324]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005844:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005848:	d106      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800584a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800584c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005850:	d102      	bne.n	8005858 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005852:	4b4f      	ldr	r3, [pc, #316]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005854:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005856:	e002      	b.n	800585e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800585c:	e235      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800585e:	e234      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005860:	4b4c      	ldr	r3, [pc, #304]	; (8005994 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005862:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005864:	e231      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005866:	2300      	movs	r3, #0
 8005868:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800586a:	e22e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800586c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005870:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005874:	430b      	orrs	r3, r1
 8005876:	f040 808f 	bne.w	8005998 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800587a:	4b42      	ldr	r3, [pc, #264]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800587c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800587e:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005882:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005884:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005886:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800588a:	d06b      	beq.n	8005964 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800588c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005892:	d874      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005896:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800589a:	d056      	beq.n	800594a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80058a2:	d86c      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058a6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058aa:	d03b      	beq.n	8005924 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80058ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058ae:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80058b2:	d864      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058ba:	d021      	beq.n	8005900 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80058bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058be:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80058c2:	d85c      	bhi.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80058c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d004      	beq.n	80058d4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80058ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80058cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80058d0:	d004      	beq.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80058d2:	e054      	b.n	800597e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80058d4:	f7fe fa4c 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 80058d8:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058da:	e1f6      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80058dc:	4b29      	ldr	r3, [pc, #164]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058e8:	d107      	bne.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ea:	f107 0318 	add.w	r3, r7, #24
 80058ee:	4618      	mov	r0, r3
 80058f0:	f000 fa0a 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80058f8:	e1e7      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80058fa:	2300      	movs	r3, #0
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058fe:	e1e4      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005900:	4b20      	ldr	r3, [pc, #128]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005908:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800590c:	d107      	bne.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800590e:	f107 030c 	add.w	r3, r7, #12
 8005912:	4618      	mov	r0, r3
 8005914:	f000 fb4c 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800591c:	e1d5      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005922:	e1d2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005924:	4b17      	ldr	r3, [pc, #92]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	f003 0304 	and.w	r3, r3, #4
 800592c:	2b04      	cmp	r3, #4
 800592e:	d109      	bne.n	8005944 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005930:	4b14      	ldr	r3, [pc, #80]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	08db      	lsrs	r3, r3, #3
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	4a13      	ldr	r2, [pc, #76]	; (8005988 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800593c:	fa22 f303 	lsr.w	r3, r2, r3
 8005940:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005942:	e1c2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005944:	2300      	movs	r3, #0
 8005946:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005948:	e1bf      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800594a:	4b0e      	ldr	r3, [pc, #56]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005956:	d102      	bne.n	800595e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005958:	4b0c      	ldr	r3, [pc, #48]	; (800598c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800595a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595c:	e1b5      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800595e:	2300      	movs	r3, #0
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005962:	e1b2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005964:	4b07      	ldr	r3, [pc, #28]	; (8005984 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800596c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005970:	d102      	bne.n	8005978 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005972:	4b07      	ldr	r3, [pc, #28]	; (8005990 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005974:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005976:	e1a8      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005978:	2300      	movs	r3, #0
 800597a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800597c:	e1a5      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800597e:	2300      	movs	r3, #0
 8005980:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005982:	e1a2      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005984:	58024400 	.word	0x58024400
 8005988:	03d09000 	.word	0x03d09000
 800598c:	003d0900 	.word	0x003d0900
 8005990:	017d7840 	.word	0x017d7840
 8005994:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005998:	e9d7 2300 	ldrd	r2, r3, [r7]
 800599c:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 80059a0:	430b      	orrs	r3, r1
 80059a2:	d173      	bne.n	8005a8c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80059a4:	4b9c      	ldr	r3, [pc, #624]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80059ac:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 80059ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059b4:	d02f      	beq.n	8005a16 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80059b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059b8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059bc:	d863      	bhi.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80059be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d004      	beq.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80059c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80059ca:	d012      	beq.n	80059f2 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80059cc:	e05b      	b.n	8005a86 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80059ce:	4b92      	ldr	r3, [pc, #584]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80059d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80059da:	d107      	bne.n	80059ec <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80059dc:	f107 0318 	add.w	r3, r7, #24
 80059e0:	4618      	mov	r0, r3
 80059e2:	f000 f991 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80059ea:	e16e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80059ec:	2300      	movs	r3, #0
 80059ee:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059f0:	e16b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80059f2:	4b89      	ldr	r3, [pc, #548]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059fa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059fe:	d107      	bne.n	8005a10 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a00:	f107 030c 	add.w	r3, r7, #12
 8005a04:	4618      	mov	r0, r3
 8005a06:	f000 fad3 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a0e:	e15c      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a10:	2300      	movs	r3, #0
 8005a12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a14:	e159      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005a16:	4b80      	ldr	r3, [pc, #512]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a1a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005a1e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005a20:	4b7d      	ldr	r3, [pc, #500]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f003 0304 	and.w	r3, r3, #4
 8005a28:	2b04      	cmp	r3, #4
 8005a2a:	d10c      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005a2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d109      	bne.n	8005a46 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005a32:	4b79      	ldr	r3, [pc, #484]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	08db      	lsrs	r3, r3, #3
 8005a38:	f003 0303 	and.w	r3, r3, #3
 8005a3c:	4a77      	ldr	r2, [pc, #476]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005a3e:	fa22 f303 	lsr.w	r3, r2, r3
 8005a42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a44:	e01e      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005a46:	4b74      	ldr	r3, [pc, #464]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005a4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005a52:	d106      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005a54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005a5a:	d102      	bne.n	8005a62 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005a5c:	4b70      	ldr	r3, [pc, #448]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005a5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a60:	e010      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005a62:	4b6d      	ldr	r3, [pc, #436]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a6a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005a6e:	d106      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005a70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a72:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a76:	d102      	bne.n	8005a7e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005a78:	4b6a      	ldr	r3, [pc, #424]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005a7c:	e002      	b.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005a82:	e122      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005a84:	e121      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005a86:	2300      	movs	r3, #0
 8005a88:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a8a:	e11e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005a8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a90:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005a94:	430b      	orrs	r3, r1
 8005a96:	d133      	bne.n	8005b00 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005a98:	4b5f      	ldr	r3, [pc, #380]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005a9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005aa0:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d004      	beq.n	8005ab2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005aa8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aaa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005aae:	d012      	beq.n	8005ad6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005ab0:	e023      	b.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005ab2:	4b59      	ldr	r3, [pc, #356]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005aba:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005abe:	d107      	bne.n	8005ad0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ac0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ac4:	4618      	mov	r0, r3
 8005ac6:	f000 fbc7 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005acc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ace:	e0fc      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ad0:	2300      	movs	r3, #0
 8005ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ad4:	e0f9      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005ad6:	4b50      	ldr	r3, [pc, #320]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ade:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ae2:	d107      	bne.n	8005af4 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005ae4:	f107 0318 	add.w	r3, r7, #24
 8005ae8:	4618      	mov	r0, r3
 8005aea:	f000 f90d 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005aee:	6a3b      	ldr	r3, [r7, #32]
 8005af0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005af2:	e0ea      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005af4:	2300      	movs	r3, #0
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005af8:	e0e7      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005afa:	2300      	movs	r3, #0
 8005afc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005afe:	e0e4      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005b00:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b04:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005b08:	430b      	orrs	r3, r1
 8005b0a:	f040 808d 	bne.w	8005c28 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005b0e:	4b42      	ldr	r3, [pc, #264]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b12:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005b16:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b1a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b1e:	d06b      	beq.n	8005bf8 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005b20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005b26:	d874      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b2e:	d056      	beq.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005b30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b36:	d86c      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b3e:	d03b      	beq.n	8005bb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005b40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b42:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005b46:	d864      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b4e:	d021      	beq.n	8005b94 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b52:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b56:	d85c      	bhi.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d004      	beq.n	8005b68 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005b64:	d004      	beq.n	8005b70 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005b66:	e054      	b.n	8005c12 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005b68:	f000 f8b8 	bl	8005cdc <HAL_RCCEx_GetD3PCLK1Freq>
 8005b6c:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005b6e:	e0ac      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005b70:	4b29      	ldr	r3, [pc, #164]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005b78:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b7c:	d107      	bne.n	8005b8e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005b7e:	f107 0318 	add.w	r3, r7, #24
 8005b82:	4618      	mov	r0, r3
 8005b84:	f000 f8c0 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005b88:	69fb      	ldr	r3, [r7, #28]
 8005b8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005b8c:	e09d      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b92:	e09a      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005b94:	4b20      	ldr	r3, [pc, #128]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005b9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005ba0:	d107      	bne.n	8005bb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f000 fa02 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005bac:	693b      	ldr	r3, [r7, #16]
 8005bae:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb0:	e08b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bb2:	2300      	movs	r3, #0
 8005bb4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bb6:	e088      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005bb8:	4b17      	ldr	r3, [pc, #92]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f003 0304 	and.w	r3, r3, #4
 8005bc0:	2b04      	cmp	r3, #4
 8005bc2:	d109      	bne.n	8005bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005bc4:	4b14      	ldr	r3, [pc, #80]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	08db      	lsrs	r3, r3, #3
 8005bca:	f003 0303 	and.w	r3, r3, #3
 8005bce:	4a13      	ldr	r2, [pc, #76]	; (8005c1c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005bd0:	fa22 f303 	lsr.w	r3, r2, r3
 8005bd4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bd6:	e078      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bdc:	e075      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005bde:	4b0e      	ldr	r3, [pc, #56]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005be6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005bea:	d102      	bne.n	8005bf2 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8005bec:	4b0c      	ldr	r3, [pc, #48]	; (8005c20 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005bee:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bf0:	e06b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bf6:	e068      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005bf8:	4b07      	ldr	r3, [pc, #28]	; (8005c18 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005bfa:	681b      	ldr	r3, [r3, #0]
 8005bfc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c00:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c04:	d102      	bne.n	8005c0c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8005c06:	4b07      	ldr	r3, [pc, #28]	; (8005c24 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005c08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c0a:	e05e      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c10:	e05b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8005c12:	2300      	movs	r3, #0
 8005c14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c16:	e058      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c18:	58024400 	.word	0x58024400
 8005c1c:	03d09000 	.word	0x03d09000
 8005c20:	003d0900 	.word	0x003d0900
 8005c24:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8005c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c2c:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8005c30:	430b      	orrs	r3, r1
 8005c32:	d148      	bne.n	8005cc6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8005c34:	4b27      	ldr	r3, [pc, #156]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c3c:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005c3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c40:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c44:	d02a      	beq.n	8005c9c <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c4c:	d838      	bhi.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8005c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d004      	beq.n	8005c5e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c5a:	d00d      	beq.n	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8005c5c:	e030      	b.n	8005cc0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005c5e:	4b1d      	ldr	r3, [pc, #116]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c66:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c6a:	d102      	bne.n	8005c72 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8005c6c:	4b1a      	ldr	r3, [pc, #104]	; (8005cd8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8005c6e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c70:	e02b      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c72:	2300      	movs	r3, #0
 8005c74:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c76:	e028      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005c78:	4b16      	ldr	r3, [pc, #88]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005c80:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005c84:	d107      	bne.n	8005c96 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005c86:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005c8a:	4618      	mov	r0, r3
 8005c8c:	f000 fae4 	bl	8006258 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005c90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c92:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c94:	e019      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c96:	2300      	movs	r3, #0
 8005c98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c9a:	e016      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005c9c:	4b0d      	ldr	r3, [pc, #52]	; (8005cd4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ca4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005ca8:	d107      	bne.n	8005cba <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005caa:	f107 0318 	add.w	r3, r7, #24
 8005cae:	4618      	mov	r0, r3
 8005cb0:	f000 f82a 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005cb4:	69fb      	ldr	r3, [r7, #28]
 8005cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005cb8:	e007      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cbe:	e004      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005cc4:	e001      	b.n	8005cca <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 8005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005ccc:	4618      	mov	r0, r3
 8005cce:	3740      	adds	r7, #64	; 0x40
 8005cd0:	46bd      	mov	sp, r7
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	58024400 	.word	0x58024400
 8005cd8:	017d7840 	.word	0x017d7840

08005cdc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8005cdc:	b580      	push	{r7, lr}
 8005cde:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8005ce0:	f7fe f816 	bl	8003d10 <HAL_RCC_GetHCLKFreq>
 8005ce4:	4602      	mov	r2, r0
 8005ce6:	4b06      	ldr	r3, [pc, #24]	; (8005d00 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8005ce8:	6a1b      	ldr	r3, [r3, #32]
 8005cea:	091b      	lsrs	r3, r3, #4
 8005cec:	f003 0307 	and.w	r3, r3, #7
 8005cf0:	4904      	ldr	r1, [pc, #16]	; (8005d04 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8005cf2:	5ccb      	ldrb	r3, [r1, r3]
 8005cf4:	f003 031f 	and.w	r3, r3, #31
 8005cf8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	58024400 	.word	0x58024400
 8005d04:	080085c0 	.word	0x080085c0

08005d08 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8005d08:	b480      	push	{r7}
 8005d0a:	b089      	sub	sp, #36	; 0x24
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005d10:	4ba1      	ldr	r3, [pc, #644]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d14:	f003 0303 	and.w	r3, r3, #3
 8005d18:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8005d1a:	4b9f      	ldr	r3, [pc, #636]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d1e:	0b1b      	lsrs	r3, r3, #12
 8005d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005d24:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8005d26:	4b9c      	ldr	r3, [pc, #624]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d2a:	091b      	lsrs	r3, r3, #4
 8005d2c:	f003 0301 	and.w	r3, r3, #1
 8005d30:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8005d32:	4b99      	ldr	r3, [pc, #612]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d36:	08db      	lsrs	r3, r3, #3
 8005d38:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	fb02 f303 	mul.w	r3, r2, r3
 8005d42:	ee07 3a90 	vmov	s15, r3
 8005d46:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005d4a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	f000 8111 	beq.w	8005f78 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8005d56:	69bb      	ldr	r3, [r7, #24]
 8005d58:	2b02      	cmp	r3, #2
 8005d5a:	f000 8083 	beq.w	8005e64 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8005d5e:	69bb      	ldr	r3, [r7, #24]
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	f200 80a1 	bhi.w	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8005d66:	69bb      	ldr	r3, [r7, #24]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d003      	beq.n	8005d74 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	2b01      	cmp	r3, #1
 8005d70:	d056      	beq.n	8005e20 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8005d72:	e099      	b.n	8005ea8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005d74:	4b88      	ldr	r3, [pc, #544]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f003 0320 	and.w	r3, r3, #32
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d02d      	beq.n	8005ddc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d80:	4b85      	ldr	r3, [pc, #532]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	08db      	lsrs	r3, r3, #3
 8005d86:	f003 0303 	and.w	r3, r3, #3
 8005d8a:	4a84      	ldr	r2, [pc, #528]	; (8005f9c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8005d8c:	fa22 f303 	lsr.w	r3, r2, r3
 8005d90:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	ee07 3a90 	vmov	s15, r3
 8005d98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005d9c:	697b      	ldr	r3, [r7, #20]
 8005d9e:	ee07 3a90 	vmov	s15, r3
 8005da2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005da6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005daa:	4b7b      	ldr	r3, [pc, #492]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005dac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005db2:	ee07 3a90 	vmov	s15, r3
 8005db6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dba:	ed97 6a03 	vldr	s12, [r7, #12]
 8005dbe:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005dc2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005dc6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005dca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005dce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005dd6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8005dda:	e087      	b.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ddc:	697b      	ldr	r3, [r7, #20]
 8005dde:	ee07 3a90 	vmov	s15, r3
 8005de2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005de6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005fa4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8005dea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005dee:	4b6a      	ldr	r3, [pc, #424]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005df6:	ee07 3a90 	vmov	s15, r3
 8005dfa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005dfe:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e02:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e1e:	e065      	b.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e20:	697b      	ldr	r3, [r7, #20]
 8005e22:	ee07 3a90 	vmov	s15, r3
 8005e26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e2a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005e2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e32:	4b59      	ldr	r3, [pc, #356]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e3a:	ee07 3a90 	vmov	s15, r3
 8005e3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e42:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e46:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005e5e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005e62:	e043      	b.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005e64:	697b      	ldr	r3, [r7, #20]
 8005e66:	ee07 3a90 	vmov	s15, r3
 8005e6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005e6e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8005fac <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8005e72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005e76:	4b48      	ldr	r3, [pc, #288]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e7e:	ee07 3a90 	vmov	s15, r3
 8005e82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005e86:	ed97 6a03 	vldr	s12, [r7, #12]
 8005e8a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005e8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005e92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005e96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005e9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005e9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ea2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005ea6:	e021      	b.n	8005eec <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8005ea8:	697b      	ldr	r3, [r7, #20]
 8005eaa:	ee07 3a90 	vmov	s15, r3
 8005eae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005eb2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005fa8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8005eb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005eba:	4b37      	ldr	r3, [pc, #220]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005ebc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005ec2:	ee07 3a90 	vmov	s15, r3
 8005ec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005eca:	ed97 6a03 	vldr	s12, [r7, #12]
 8005ece:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005fa0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8005ed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005ed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005eda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8005ede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005ee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005ee6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8005eea:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8005eec:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005eee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ef0:	0a5b      	lsrs	r3, r3, #9
 8005ef2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ef6:	ee07 3a90 	vmov	s15, r3
 8005efa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005efe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f02:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f06:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f0a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f0e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f12:	ee17 2a90 	vmov	r2, s15
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8005f1a:	4b1f      	ldr	r3, [pc, #124]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f1e:	0c1b      	lsrs	r3, r3, #16
 8005f20:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f24:	ee07 3a90 	vmov	s15, r3
 8005f28:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f2c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f30:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f34:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f3c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f40:	ee17 2a90 	vmov	r2, s15
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8005f48:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	0e1b      	lsrs	r3, r3, #24
 8005f4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005f52:	ee07 3a90 	vmov	s15, r3
 8005f56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005f5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005f5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8005f62:	edd7 6a07 	vldr	s13, [r7, #28]
 8005f66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005f6e:	ee17 2a90 	vmov	r2, s15
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8005f76:	e008      	b.n	8005f8a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	2200      	movs	r2, #0
 8005f82:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	609a      	str	r2, [r3, #8]
}
 8005f8a:	bf00      	nop
 8005f8c:	3724      	adds	r7, #36	; 0x24
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f94:	4770      	bx	lr
 8005f96:	bf00      	nop
 8005f98:	58024400 	.word	0x58024400
 8005f9c:	03d09000 	.word	0x03d09000
 8005fa0:	46000000 	.word	0x46000000
 8005fa4:	4c742400 	.word	0x4c742400
 8005fa8:	4a742400 	.word	0x4a742400
 8005fac:	4bbebc20 	.word	0x4bbebc20

08005fb0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b089      	sub	sp, #36	; 0x24
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005fb8:	4ba1      	ldr	r3, [pc, #644]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fbc:	f003 0303 	and.w	r3, r3, #3
 8005fc0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8005fc2:	4b9f      	ldr	r3, [pc, #636]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	0d1b      	lsrs	r3, r3, #20
 8005fc8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005fcc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8005fce:	4b9c      	ldr	r3, [pc, #624]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd2:	0a1b      	lsrs	r3, r3, #8
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8005fda:	4b99      	ldr	r3, [pc, #612]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fde:	08db      	lsrs	r3, r3, #3
 8005fe0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005fe4:	693a      	ldr	r2, [r7, #16]
 8005fe6:	fb02 f303 	mul.w	r3, r2, r3
 8005fea:	ee07 3a90 	vmov	s15, r3
 8005fee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005ff2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005ff6:	697b      	ldr	r3, [r7, #20]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8111 	beq.w	8006220 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8005ffe:	69bb      	ldr	r3, [r7, #24]
 8006000:	2b02      	cmp	r3, #2
 8006002:	f000 8083 	beq.w	800610c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8006006:	69bb      	ldr	r3, [r7, #24]
 8006008:	2b02      	cmp	r3, #2
 800600a:	f200 80a1 	bhi.w	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800600e:	69bb      	ldr	r3, [r7, #24]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d003      	beq.n	800601c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8006014:	69bb      	ldr	r3, [r7, #24]
 8006016:	2b01      	cmp	r3, #1
 8006018:	d056      	beq.n	80060c8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800601a:	e099      	b.n	8006150 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800601c:	4b88      	ldr	r3, [pc, #544]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0320 	and.w	r3, r3, #32
 8006024:	2b00      	cmp	r3, #0
 8006026:	d02d      	beq.n	8006084 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006028:	4b85      	ldr	r3, [pc, #532]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	08db      	lsrs	r3, r3, #3
 800602e:	f003 0303 	and.w	r3, r3, #3
 8006032:	4a84      	ldr	r2, [pc, #528]	; (8006244 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8006034:	fa22 f303 	lsr.w	r3, r2, r3
 8006038:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	ee07 3a90 	vmov	s15, r3
 8006040:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006044:	697b      	ldr	r3, [r7, #20]
 8006046:	ee07 3a90 	vmov	s15, r3
 800604a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800604e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006052:	4b7b      	ldr	r3, [pc, #492]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800605a:	ee07 3a90 	vmov	s15, r3
 800605e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006062:	ed97 6a03 	vldr	s12, [r7, #12]
 8006066:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800606a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800606e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800607a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800607e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006082:	e087      	b.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006084:	697b      	ldr	r3, [r7, #20]
 8006086:	ee07 3a90 	vmov	s15, r3
 800608a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800608e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 800624c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8006092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006096:	4b6a      	ldr	r3, [pc, #424]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800609a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800609e:	ee07 3a90 	vmov	s15, r3
 80060a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80060aa:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80060be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80060c6:	e065      	b.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	ee07 3a90 	vmov	s15, r3
 80060ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80060d2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80060d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80060da:	4b59      	ldr	r3, [pc, #356]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80060dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80060e2:	ee07 3a90 	vmov	s15, r3
 80060e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80060ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80060ee:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80060f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80060f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80060fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80060fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800610a:	e043      	b.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800610c:	697b      	ldr	r3, [r7, #20]
 800610e:	ee07 3a90 	vmov	s15, r3
 8006112:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006116:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8006254 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800611a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800611e:	4b48      	ldr	r3, [pc, #288]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006122:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800612e:	ed97 6a03 	vldr	s12, [r7, #12]
 8006132:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006136:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800613a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800613e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006142:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006146:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800614e:	e021      	b.n	8006194 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800615a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006250 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800615e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006162:	4b37      	ldr	r3, [pc, #220]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006166:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800616a:	ee07 3a90 	vmov	s15, r3
 800616e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006172:	ed97 6a03 	vldr	s12, [r7, #12]
 8006176:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006248 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800617a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800617e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006182:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006186:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800618a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800618e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006192:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8006194:	4b2a      	ldr	r3, [pc, #168]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006198:	0a5b      	lsrs	r3, r3, #9
 800619a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800619e:	ee07 3a90 	vmov	s15, r3
 80061a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061aa:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061ae:	edd7 6a07 	vldr	s13, [r7, #28]
 80061b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061ba:	ee17 2a90 	vmov	r2, s15
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80061c2:	4b1f      	ldr	r3, [pc, #124]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c6:	0c1b      	lsrs	r3, r3, #16
 80061c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061cc:	ee07 3a90 	vmov	s15, r3
 80061d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80061d8:	ee37 7a87 	vadd.f32	s14, s15, s14
 80061dc:	edd7 6a07 	vldr	s13, [r7, #28]
 80061e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80061e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80061e8:	ee17 2a90 	vmov	r2, s15
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80061f0:	4b13      	ldr	r3, [pc, #76]	; (8006240 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	0e1b      	lsrs	r3, r3, #24
 80061f6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80061fa:	ee07 3a90 	vmov	s15, r3
 80061fe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006202:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006206:	ee37 7a87 	vadd.f32	s14, s15, s14
 800620a:	edd7 6a07 	vldr	s13, [r7, #28]
 800620e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006212:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006216:	ee17 2a90 	vmov	r2, s15
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800621e:	e008      	b.n	8006232 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2200      	movs	r2, #0
 8006230:	609a      	str	r2, [r3, #8]
}
 8006232:	bf00      	nop
 8006234:	3724      	adds	r7, #36	; 0x24
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	58024400 	.word	0x58024400
 8006244:	03d09000 	.word	0x03d09000
 8006248:	46000000 	.word	0x46000000
 800624c:	4c742400 	.word	0x4c742400
 8006250:	4a742400 	.word	0x4a742400
 8006254:	4bbebc20 	.word	0x4bbebc20

08006258 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006258:	b480      	push	{r7}
 800625a:	b089      	sub	sp, #36	; 0x24
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006260:	4ba0      	ldr	r3, [pc, #640]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006262:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006264:	f003 0303 	and.w	r3, r3, #3
 8006268:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800626a:	4b9e      	ldr	r3, [pc, #632]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800626e:	091b      	lsrs	r3, r3, #4
 8006270:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006274:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8006276:	4b9b      	ldr	r3, [pc, #620]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800627a:	f003 0301 	and.w	r3, r3, #1
 800627e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006280:	4b98      	ldr	r3, [pc, #608]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006282:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006284:	08db      	lsrs	r3, r3, #3
 8006286:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800628a:	693a      	ldr	r2, [r7, #16]
 800628c:	fb02 f303 	mul.w	r3, r2, r3
 8006290:	ee07 3a90 	vmov	s15, r3
 8006294:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006298:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	f000 8111 	beq.w	80064c6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80062a4:	69bb      	ldr	r3, [r7, #24]
 80062a6:	2b02      	cmp	r3, #2
 80062a8:	f000 8083 	beq.w	80063b2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2b02      	cmp	r3, #2
 80062b0:	f200 80a1 	bhi.w	80063f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80062b4:	69bb      	ldr	r3, [r7, #24]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d003      	beq.n	80062c2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80062ba:	69bb      	ldr	r3, [r7, #24]
 80062bc:	2b01      	cmp	r3, #1
 80062be:	d056      	beq.n	800636e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80062c0:	e099      	b.n	80063f6 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80062c2:	4b88      	ldr	r3, [pc, #544]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f003 0320 	and.w	r3, r3, #32
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d02d      	beq.n	800632a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80062ce:	4b85      	ldr	r3, [pc, #532]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	08db      	lsrs	r3, r3, #3
 80062d4:	f003 0303 	and.w	r3, r3, #3
 80062d8:	4a83      	ldr	r2, [pc, #524]	; (80064e8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80062da:	fa22 f303 	lsr.w	r3, r2, r3
 80062de:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	ee07 3a90 	vmov	s15, r3
 80062e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062ea:	697b      	ldr	r3, [r7, #20]
 80062ec:	ee07 3a90 	vmov	s15, r3
 80062f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062f4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062f8:	4b7a      	ldr	r3, [pc, #488]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80062fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80062fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006300:	ee07 3a90 	vmov	s15, r3
 8006304:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006308:	ed97 6a03 	vldr	s12, [r7, #12]
 800630c:	eddf 5a77 	vldr	s11, [pc, #476]	; 80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006310:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006314:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006318:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800631c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006320:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006324:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006328:	e087      	b.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	ee07 3a90 	vmov	s15, r3
 8006330:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006334:	eddf 6a6e 	vldr	s13, [pc, #440]	; 80064f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006338:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800633c:	4b69      	ldr	r3, [pc, #420]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800633e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006344:	ee07 3a90 	vmov	s15, r3
 8006348:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800634c:	ed97 6a03 	vldr	s12, [r7, #12]
 8006350:	eddf 5a66 	vldr	s11, [pc, #408]	; 80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006354:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006358:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800635c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006360:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006364:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006368:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800636c:	e065      	b.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	ee07 3a90 	vmov	s15, r3
 8006374:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006378:	eddf 6a5e 	vldr	s13, [pc, #376]	; 80064f4 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800637c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006380:	4b58      	ldr	r3, [pc, #352]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006388:	ee07 3a90 	vmov	s15, r3
 800638c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006390:	ed97 6a03 	vldr	s12, [r7, #12]
 8006394:	eddf 5a55 	vldr	s11, [pc, #340]	; 80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006398:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800639c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063a0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063a4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063ac:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063b0:	e043      	b.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	ee07 3a90 	vmov	s15, r3
 80063b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80063bc:	eddf 6a4e 	vldr	s13, [pc, #312]	; 80064f8 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80063c0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80063c4:	4b47      	ldr	r3, [pc, #284]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80063c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063cc:	ee07 3a90 	vmov	s15, r3
 80063d0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80063d4:	ed97 6a03 	vldr	s12, [r7, #12]
 80063d8:	eddf 5a44 	vldr	s11, [pc, #272]	; 80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80063dc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80063e0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80063e4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80063e8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80063ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80063f4:	e021      	b.n	800643a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	ee07 3a90 	vmov	s15, r3
 80063fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006400:	eddf 6a3b 	vldr	s13, [pc, #236]	; 80064f0 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006404:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006408:	4b36      	ldr	r3, [pc, #216]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800640a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800640c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006410:	ee07 3a90 	vmov	s15, r3
 8006414:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006418:	ed97 6a03 	vldr	s12, [r7, #12]
 800641c:	eddf 5a33 	vldr	s11, [pc, #204]	; 80064ec <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006420:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006424:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006428:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800642c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006430:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006434:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006438:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800643a:	4b2a      	ldr	r3, [pc, #168]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800643c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800643e:	0a5b      	lsrs	r3, r3, #9
 8006440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006444:	ee07 3a90 	vmov	s15, r3
 8006448:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800644c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006450:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006454:	edd7 6a07 	vldr	s13, [r7, #28]
 8006458:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800645c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006460:	ee17 2a90 	vmov	r2, s15
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006468:	4b1e      	ldr	r3, [pc, #120]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800646a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646c:	0c1b      	lsrs	r3, r3, #16
 800646e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800647a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800647e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006482:	edd7 6a07 	vldr	s13, [r7, #28]
 8006486:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800648a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800648e:	ee17 2a90 	vmov	r2, s15
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 8006496:	4b13      	ldr	r3, [pc, #76]	; (80064e4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649a:	0e1b      	lsrs	r3, r3, #24
 800649c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a0:	ee07 3a90 	vmov	s15, r3
 80064a4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80064ac:	ee37 7a87 	vadd.f32	s14, s15, s14
 80064b0:	edd7 6a07 	vldr	s13, [r7, #28]
 80064b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80064b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80064bc:	ee17 2a90 	vmov	r2, s15
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80064c4:	e008      	b.n	80064d8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2200      	movs	r2, #0
 80064ca:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	2200      	movs	r2, #0
 80064d0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2200      	movs	r2, #0
 80064d6:	609a      	str	r2, [r3, #8]
}
 80064d8:	bf00      	nop
 80064da:	3724      	adds	r7, #36	; 0x24
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr
 80064e4:	58024400 	.word	0x58024400
 80064e8:	03d09000 	.word	0x03d09000
 80064ec:	46000000 	.word	0x46000000
 80064f0:	4c742400 	.word	0x4c742400
 80064f4:	4a742400 	.word	0x4a742400
 80064f8:	4bbebc20 	.word	0x4bbebc20

080064fc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
 8006504:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006506:	2300      	movs	r3, #0
 8006508:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800650a:	4b53      	ldr	r3, [pc, #332]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 800650c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800650e:	f003 0303 	and.w	r3, r3, #3
 8006512:	2b03      	cmp	r3, #3
 8006514:	d101      	bne.n	800651a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8006516:	2301      	movs	r3, #1
 8006518:	e099      	b.n	800664e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800651a:	4b4f      	ldr	r3, [pc, #316]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	4a4e      	ldr	r2, [pc, #312]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006520:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8006524:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006526:	f7fb f9bd 	bl	80018a4 <HAL_GetTick>
 800652a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800652c:	e008      	b.n	8006540 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800652e:	f7fb f9b9 	bl	80018a4 <HAL_GetTick>
 8006532:	4602      	mov	r2, r0
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	1ad3      	subs	r3, r2, r3
 8006538:	2b02      	cmp	r3, #2
 800653a:	d901      	bls.n	8006540 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800653c:	2303      	movs	r3, #3
 800653e:	e086      	b.n	800664e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006540:	4b45      	ldr	r3, [pc, #276]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006548:	2b00      	cmp	r3, #0
 800654a:	d1f0      	bne.n	800652e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800654c:	4b42      	ldr	r3, [pc, #264]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 800654e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006550:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	031b      	lsls	r3, r3, #12
 800655a:	493f      	ldr	r1, [pc, #252]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 800655c:	4313      	orrs	r3, r2
 800655e:	628b      	str	r3, [r1, #40]	; 0x28
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	685b      	ldr	r3, [r3, #4]
 8006564:	3b01      	subs	r3, #1
 8006566:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	689b      	ldr	r3, [r3, #8]
 800656e:	3b01      	subs	r3, #1
 8006570:	025b      	lsls	r3, r3, #9
 8006572:	b29b      	uxth	r3, r3
 8006574:	431a      	orrs	r2, r3
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	68db      	ldr	r3, [r3, #12]
 800657a:	3b01      	subs	r3, #1
 800657c:	041b      	lsls	r3, r3, #16
 800657e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	691b      	ldr	r3, [r3, #16]
 8006588:	3b01      	subs	r3, #1
 800658a:	061b      	lsls	r3, r3, #24
 800658c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006590:	4931      	ldr	r1, [pc, #196]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006592:	4313      	orrs	r3, r2
 8006594:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8006596:	4b30      	ldr	r3, [pc, #192]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800659a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	695b      	ldr	r3, [r3, #20]
 80065a2:	492d      	ldr	r1, [pc, #180]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065a4:	4313      	orrs	r3, r2
 80065a6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80065a8:	4b2b      	ldr	r3, [pc, #172]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065ac:	f023 0220 	bic.w	r2, r3, #32
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	699b      	ldr	r3, [r3, #24]
 80065b4:	4928      	ldr	r1, [pc, #160]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065b6:	4313      	orrs	r3, r2
 80065b8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80065ba:	4b27      	ldr	r3, [pc, #156]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065be:	4a26      	ldr	r2, [pc, #152]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065c0:	f023 0310 	bic.w	r3, r3, #16
 80065c4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80065c6:	4b24      	ldr	r3, [pc, #144]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80065ca:	4b24      	ldr	r3, [pc, #144]	; (800665c <RCCEx_PLL2_Config+0x160>)
 80065cc:	4013      	ands	r3, r2
 80065ce:	687a      	ldr	r2, [r7, #4]
 80065d0:	69d2      	ldr	r2, [r2, #28]
 80065d2:	00d2      	lsls	r2, r2, #3
 80065d4:	4920      	ldr	r1, [pc, #128]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065d6:	4313      	orrs	r3, r2
 80065d8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80065da:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065de:	4a1e      	ldr	r2, [pc, #120]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065e0:	f043 0310 	orr.w	r3, r3, #16
 80065e4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80065e6:	683b      	ldr	r3, [r7, #0]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d106      	bne.n	80065fa <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80065ec:	4b1a      	ldr	r3, [pc, #104]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f0:	4a19      	ldr	r2, [pc, #100]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 80065f2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80065f6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80065f8:	e00f      	b.n	800661a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80065fa:	683b      	ldr	r3, [r7, #0]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d106      	bne.n	800660e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006600:	4b15      	ldr	r3, [pc, #84]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006604:	4a14      	ldr	r2, [pc, #80]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006606:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800660a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800660c:	e005      	b.n	800661a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800660e:	4b12      	ldr	r3, [pc, #72]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006610:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006612:	4a11      	ldr	r2, [pc, #68]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006614:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006618:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800661a:	4b0f      	ldr	r3, [pc, #60]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4a0e      	ldr	r2, [pc, #56]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006620:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006624:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006626:	f7fb f93d 	bl	80018a4 <HAL_GetTick>
 800662a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800662c:	e008      	b.n	8006640 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800662e:	f7fb f939 	bl	80018a4 <HAL_GetTick>
 8006632:	4602      	mov	r2, r0
 8006634:	68bb      	ldr	r3, [r7, #8]
 8006636:	1ad3      	subs	r3, r2, r3
 8006638:	2b02      	cmp	r3, #2
 800663a:	d901      	bls.n	8006640 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e006      	b.n	800664e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006640:	4b05      	ldr	r3, [pc, #20]	; (8006658 <RCCEx_PLL2_Config+0x15c>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006648:	2b00      	cmp	r3, #0
 800664a:	d0f0      	beq.n	800662e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800664c:	7bfb      	ldrb	r3, [r7, #15]
}
 800664e:	4618      	mov	r0, r3
 8006650:	3710      	adds	r7, #16
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	58024400 	.word	0x58024400
 800665c:	ffff0007 	.word	0xffff0007

08006660 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006660:	b580      	push	{r7, lr}
 8006662:	b084      	sub	sp, #16
 8006664:	af00      	add	r7, sp, #0
 8006666:	6078      	str	r0, [r7, #4]
 8006668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800666a:	2300      	movs	r3, #0
 800666c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800666e:	4b53      	ldr	r3, [pc, #332]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006672:	f003 0303 	and.w	r3, r3, #3
 8006676:	2b03      	cmp	r3, #3
 8006678:	d101      	bne.n	800667e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800667a:	2301      	movs	r3, #1
 800667c:	e099      	b.n	80067b2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800667e:	4b4f      	ldr	r3, [pc, #316]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	4a4e      	ldr	r2, [pc, #312]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006684:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800668a:	f7fb f90b 	bl	80018a4 <HAL_GetTick>
 800668e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006690:	e008      	b.n	80066a4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006692:	f7fb f907 	bl	80018a4 <HAL_GetTick>
 8006696:	4602      	mov	r2, r0
 8006698:	68bb      	ldr	r3, [r7, #8]
 800669a:	1ad3      	subs	r3, r2, r3
 800669c:	2b02      	cmp	r3, #2
 800669e:	d901      	bls.n	80066a4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	e086      	b.n	80067b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80066a4:	4b45      	ldr	r3, [pc, #276]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d1f0      	bne.n	8006692 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80066b0:	4b42      	ldr	r3, [pc, #264]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80066b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066b4:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	051b      	lsls	r3, r3, #20
 80066be:	493f      	ldr	r1, [pc, #252]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	628b      	str	r3, [r1, #40]	; 0x28
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	3b01      	subs	r3, #1
 80066ca:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	689b      	ldr	r3, [r3, #8]
 80066d2:	3b01      	subs	r3, #1
 80066d4:	025b      	lsls	r3, r3, #9
 80066d6:	b29b      	uxth	r3, r3
 80066d8:	431a      	orrs	r2, r3
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	3b01      	subs	r3, #1
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80066e6:	431a      	orrs	r2, r3
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	691b      	ldr	r3, [r3, #16]
 80066ec:	3b01      	subs	r3, #1
 80066ee:	061b      	lsls	r3, r3, #24
 80066f0:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80066f4:	4931      	ldr	r1, [pc, #196]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80066f6:	4313      	orrs	r3, r2
 80066f8:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80066fa:	4b30      	ldr	r3, [pc, #192]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80066fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	492d      	ldr	r1, [pc, #180]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006708:	4313      	orrs	r3, r2
 800670a:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800670c:	4b2b      	ldr	r3, [pc, #172]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 800670e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006710:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	699b      	ldr	r3, [r3, #24]
 8006718:	4928      	ldr	r1, [pc, #160]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 800671a:	4313      	orrs	r3, r2
 800671c:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800671e:	4b27      	ldr	r3, [pc, #156]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006720:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006722:	4a26      	ldr	r2, [pc, #152]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006728:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800672a:	4b24      	ldr	r3, [pc, #144]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 800672c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800672e:	4b24      	ldr	r3, [pc, #144]	; (80067c0 <RCCEx_PLL3_Config+0x160>)
 8006730:	4013      	ands	r3, r2
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	69d2      	ldr	r2, [r2, #28]
 8006736:	00d2      	lsls	r2, r2, #3
 8006738:	4920      	ldr	r1, [pc, #128]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 800673a:	4313      	orrs	r3, r2
 800673c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800673e:	4b1f      	ldr	r3, [pc, #124]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006740:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006742:	4a1e      	ldr	r2, [pc, #120]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006744:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006748:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d106      	bne.n	800675e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006750:	4b1a      	ldr	r3, [pc, #104]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006754:	4a19      	ldr	r2, [pc, #100]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006756:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800675a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800675c:	e00f      	b.n	800677e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	2b01      	cmp	r3, #1
 8006762:	d106      	bne.n	8006772 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006764:	4b15      	ldr	r3, [pc, #84]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	4a14      	ldr	r2, [pc, #80]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 800676a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800676e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006770:	e005      	b.n	800677e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006772:	4b12      	ldr	r3, [pc, #72]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006774:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006776:	4a11      	ldr	r2, [pc, #68]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006778:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800677c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800677e:	4b0f      	ldr	r3, [pc, #60]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a0e      	ldr	r2, [pc, #56]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 8006784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006788:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800678a:	f7fb f88b 	bl	80018a4 <HAL_GetTick>
 800678e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006790:	e008      	b.n	80067a4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006792:	f7fb f887 	bl	80018a4 <HAL_GetTick>
 8006796:	4602      	mov	r2, r0
 8006798:	68bb      	ldr	r3, [r7, #8]
 800679a:	1ad3      	subs	r3, r2, r3
 800679c:	2b02      	cmp	r3, #2
 800679e:	d901      	bls.n	80067a4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80067a0:	2303      	movs	r3, #3
 80067a2:	e006      	b.n	80067b2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80067a4:	4b05      	ldr	r3, [pc, #20]	; (80067bc <RCCEx_PLL3_Config+0x15c>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d0f0      	beq.n	8006792 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80067b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3710      	adds	r7, #16
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	58024400 	.word	0x58024400
 80067c0:	ffff0007 	.word	0xffff0007

080067c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80067c4:	b580      	push	{r7, lr}
 80067c6:	b082      	sub	sp, #8
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d101      	bne.n	80067d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80067d2:	2301      	movs	r3, #1
 80067d4:	e042      	b.n	800685c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d106      	bne.n	80067ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2200      	movs	r2, #0
 80067e4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80067e8:	6878      	ldr	r0, [r7, #4]
 80067ea:	f7fa fe59 	bl	80014a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	2224      	movs	r2, #36	; 0x24
 80067f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	681a      	ldr	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	f022 0201 	bic.w	r2, r2, #1
 8006804:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800680a:	2b00      	cmp	r3, #0
 800680c:	d002      	beq.n	8006814 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800680e:	6878      	ldr	r0, [r7, #4]
 8006810:	f000 fee6 	bl	80075e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f97b 	bl	8006b10 <UART_SetConfig>
 800681a:	4603      	mov	r3, r0
 800681c:	2b01      	cmp	r3, #1
 800681e:	d101      	bne.n	8006824 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	e01b      	b.n	800685c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	685a      	ldr	r2, [r3, #4]
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006832:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006842:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	f042 0201 	orr.w	r2, r2, #1
 8006852:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 ff65 	bl	8007724 <UART_CheckIdleState>
 800685a:	4603      	mov	r3, r0
}
 800685c:	4618      	mov	r0, r3
 800685e:	3708      	adds	r7, #8
 8006860:	46bd      	mov	sp, r7
 8006862:	bd80      	pop	{r7, pc}

08006864 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b08a      	sub	sp, #40	; 0x28
 8006868:	af02      	add	r7, sp, #8
 800686a:	60f8      	str	r0, [r7, #12]
 800686c:	60b9      	str	r1, [r7, #8]
 800686e:	603b      	str	r3, [r7, #0]
 8006870:	4613      	mov	r3, r2
 8006872:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800687a:	2b20      	cmp	r3, #32
 800687c:	d17b      	bne.n	8006976 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800687e:	68bb      	ldr	r3, [r7, #8]
 8006880:	2b00      	cmp	r3, #0
 8006882:	d002      	beq.n	800688a <HAL_UART_Transmit+0x26>
 8006884:	88fb      	ldrh	r3, [r7, #6]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d101      	bne.n	800688e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800688a:	2301      	movs	r3, #1
 800688c:	e074      	b.n	8006978 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	2200      	movs	r2, #0
 8006892:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	2221      	movs	r2, #33	; 0x21
 800689a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800689e:	f7fb f801 	bl	80018a4 <HAL_GetTick>
 80068a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	88fa      	ldrh	r2, [r7, #6]
 80068a8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	88fa      	ldrh	r2, [r7, #6]
 80068b0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	689b      	ldr	r3, [r3, #8]
 80068b8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80068bc:	d108      	bne.n	80068d0 <HAL_UART_Transmit+0x6c>
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	691b      	ldr	r3, [r3, #16]
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d104      	bne.n	80068d0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80068c6:	2300      	movs	r3, #0
 80068c8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80068ca:	68bb      	ldr	r3, [r7, #8]
 80068cc:	61bb      	str	r3, [r7, #24]
 80068ce:	e003      	b.n	80068d8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80068d4:	2300      	movs	r3, #0
 80068d6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80068d8:	e030      	b.n	800693c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	9300      	str	r3, [sp, #0]
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	2180      	movs	r1, #128	; 0x80
 80068e4:	68f8      	ldr	r0, [r7, #12]
 80068e6:	f000 ffc7 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	2220      	movs	r2, #32
 80068f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e03d      	b.n	8006978 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80068fc:	69fb      	ldr	r3, [r7, #28]
 80068fe:	2b00      	cmp	r3, #0
 8006900:	d10b      	bne.n	800691a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006902:	69bb      	ldr	r3, [r7, #24]
 8006904:	881b      	ldrh	r3, [r3, #0]
 8006906:	461a      	mov	r2, r3
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006910:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006912:	69bb      	ldr	r3, [r7, #24]
 8006914:	3302      	adds	r3, #2
 8006916:	61bb      	str	r3, [r7, #24]
 8006918:	e007      	b.n	800692a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800691a:	69fb      	ldr	r3, [r7, #28]
 800691c:	781a      	ldrb	r2, [r3, #0]
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006924:	69fb      	ldr	r3, [r7, #28]
 8006926:	3301      	adds	r3, #1
 8006928:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006930:	b29b      	uxth	r3, r3
 8006932:	3b01      	subs	r3, #1
 8006934:	b29a      	uxth	r2, r3
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006942:	b29b      	uxth	r3, r3
 8006944:	2b00      	cmp	r3, #0
 8006946:	d1c8      	bne.n	80068da <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	9300      	str	r3, [sp, #0]
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	2200      	movs	r2, #0
 8006950:	2140      	movs	r1, #64	; 0x40
 8006952:	68f8      	ldr	r0, [r7, #12]
 8006954:	f000 ff90 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 8006958:	4603      	mov	r3, r0
 800695a:	2b00      	cmp	r3, #0
 800695c:	d005      	beq.n	800696a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	2220      	movs	r2, #32
 8006962:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006966:	2303      	movs	r3, #3
 8006968:	e006      	b.n	8006978 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	2220      	movs	r2, #32
 800696e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	e000      	b.n	8006978 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006976:	2302      	movs	r3, #2
  }
}
 8006978:	4618      	mov	r0, r3
 800697a:	3720      	adds	r7, #32
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08a      	sub	sp, #40	; 0x28
 8006984:	af02      	add	r7, sp, #8
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	603b      	str	r3, [r7, #0]
 800698c:	4613      	mov	r3, r2
 800698e:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006996:	2b20      	cmp	r3, #32
 8006998:	f040 80b5 	bne.w	8006b06 <HAL_UART_Receive+0x186>
  {
    if ((pData == NULL) || (Size == 0U))
 800699c:	68bb      	ldr	r3, [r7, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d002      	beq.n	80069a8 <HAL_UART_Receive+0x28>
 80069a2:	88fb      	ldrh	r3, [r7, #6]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d101      	bne.n	80069ac <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80069a8:	2301      	movs	r3, #1
 80069aa:	e0ad      	b.n	8006b08 <HAL_UART_Receive+0x188>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	2222      	movs	r2, #34	; 0x22
 80069b8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	2200      	movs	r2, #0
 80069c0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80069c2:	f7fa ff6f 	bl	80018a4 <HAL_GetTick>
 80069c6:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	88fa      	ldrh	r2, [r7, #6]
 80069cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    huart->RxXferCount = Size;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	88fa      	ldrh	r2, [r7, #6]
 80069d4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80069e0:	d10e      	bne.n	8006a00 <HAL_UART_Receive+0x80>
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	691b      	ldr	r3, [r3, #16]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d105      	bne.n	80069f6 <HAL_UART_Receive+0x76>
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f240 12ff 	movw	r2, #511	; 0x1ff
 80069f0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069f4:	e02d      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	22ff      	movs	r2, #255	; 0xff
 80069fa:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80069fe:	e028      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	689b      	ldr	r3, [r3, #8]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10d      	bne.n	8006a24 <HAL_UART_Receive+0xa4>
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	691b      	ldr	r3, [r3, #16]
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	d104      	bne.n	8006a1a <HAL_UART_Receive+0x9a>
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	22ff      	movs	r2, #255	; 0xff
 8006a14:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a18:	e01b      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	227f      	movs	r2, #127	; 0x7f
 8006a1e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a22:	e016      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006a2c:	d10d      	bne.n	8006a4a <HAL_UART_Receive+0xca>
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	691b      	ldr	r3, [r3, #16]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d104      	bne.n	8006a40 <HAL_UART_Receive+0xc0>
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	227f      	movs	r2, #127	; 0x7f
 8006a3a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a3e:	e008      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	223f      	movs	r2, #63	; 0x3f
 8006a44:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006a48:	e003      	b.n	8006a52 <HAL_UART_Receive+0xd2>
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    uhMask = huart->Mask;
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006a58:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a5a:	68fb      	ldr	r3, [r7, #12]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a62:	d108      	bne.n	8006a76 <HAL_UART_Receive+0xf6>
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d104      	bne.n	8006a76 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	61bb      	str	r3, [r7, #24]
 8006a74:	e003      	b.n	8006a7e <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8006a76:	68bb      	ldr	r3, [r7, #8]
 8006a78:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8006a7e:	e036      	b.n	8006aee <HAL_UART_Receive+0x16e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	9300      	str	r3, [sp, #0]
 8006a84:	697b      	ldr	r3, [r7, #20]
 8006a86:	2200      	movs	r2, #0
 8006a88:	2120      	movs	r1, #32
 8006a8a:	68f8      	ldr	r0, [r7, #12]
 8006a8c:	f000 fef4 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d005      	beq.n	8006aa2 <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2220      	movs	r2, #32
 8006a9a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e032      	b.n	8006b08 <HAL_UART_Receive+0x188>
      }
      if (pdata8bits == NULL)
 8006aa2:	69fb      	ldr	r3, [r7, #28]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d10c      	bne.n	8006ac2 <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	8a7b      	ldrh	r3, [r7, #18]
 8006ab2:	4013      	ands	r3, r2
 8006ab4:	b29a      	uxth	r2, r3
 8006ab6:	69bb      	ldr	r3, [r7, #24]
 8006ab8:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	3302      	adds	r3, #2
 8006abe:	61bb      	str	r3, [r7, #24]
 8006ac0:	e00c      	b.n	8006adc <HAL_UART_Receive+0x15c>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ac8:	b2da      	uxtb	r2, r3
 8006aca:	8a7b      	ldrh	r3, [r7, #18]
 8006acc:	b2db      	uxtb	r3, r3
 8006ace:	4013      	ands	r3, r2
 8006ad0:	b2da      	uxtb	r2, r3
 8006ad2:	69fb      	ldr	r3, [r7, #28]
 8006ad4:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8006ad6:	69fb      	ldr	r3, [r7, #28]
 8006ad8:	3301      	adds	r3, #1
 8006ada:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b01      	subs	r3, #1
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
    while (huart->RxXferCount > 0U)
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006af4:	b29b      	uxth	r3, r3
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d1c2      	bne.n	8006a80 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_UART_Receive+0x188>
  }
  else
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
  }
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3720      	adds	r7, #32
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006b10:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006b14:	b092      	sub	sp, #72	; 0x48
 8006b16:	af00      	add	r7, sp, #0
 8006b18:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006b20:	697b      	ldr	r3, [r7, #20]
 8006b22:	689a      	ldr	r2, [r3, #8]
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	691b      	ldr	r3, [r3, #16]
 8006b28:	431a      	orrs	r2, r3
 8006b2a:	697b      	ldr	r3, [r7, #20]
 8006b2c:	695b      	ldr	r3, [r3, #20]
 8006b2e:	431a      	orrs	r2, r3
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	69db      	ldr	r3, [r3, #28]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	681a      	ldr	r2, [r3, #0]
 8006b3e:	4bbe      	ldr	r3, [pc, #760]	; (8006e38 <UART_SetConfig+0x328>)
 8006b40:	4013      	ands	r3, r2
 8006b42:	697a      	ldr	r2, [r7, #20]
 8006b44:	6812      	ldr	r2, [r2, #0]
 8006b46:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b48:	430b      	orrs	r3, r1
 8006b4a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	685b      	ldr	r3, [r3, #4]
 8006b52:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006b56:	697b      	ldr	r3, [r7, #20]
 8006b58:	68da      	ldr	r2, [r3, #12]
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	430a      	orrs	r2, r1
 8006b60:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	699b      	ldr	r3, [r3, #24]
 8006b66:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4ab3      	ldr	r2, [pc, #716]	; (8006e3c <UART_SetConfig+0x32c>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d004      	beq.n	8006b7c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006b72:	697b      	ldr	r3, [r7, #20]
 8006b74:	6a1b      	ldr	r3, [r3, #32]
 8006b76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006b7c:	697b      	ldr	r3, [r7, #20]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	689a      	ldr	r2, [r3, #8]
 8006b82:	4baf      	ldr	r3, [pc, #700]	; (8006e40 <UART_SetConfig+0x330>)
 8006b84:	4013      	ands	r3, r2
 8006b86:	697a      	ldr	r2, [r7, #20]
 8006b88:	6812      	ldr	r2, [r2, #0]
 8006b8a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006b8c:	430b      	orrs	r3, r1
 8006b8e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b96:	f023 010f 	bic.w	r1, r3, #15
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006b9e:	697b      	ldr	r3, [r7, #20]
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	430a      	orrs	r2, r1
 8006ba4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ba6:	697b      	ldr	r3, [r7, #20]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	4aa6      	ldr	r2, [pc, #664]	; (8006e44 <UART_SetConfig+0x334>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d177      	bne.n	8006ca0 <UART_SetConfig+0x190>
 8006bb0:	4ba5      	ldr	r3, [pc, #660]	; (8006e48 <UART_SetConfig+0x338>)
 8006bb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006bb8:	2b28      	cmp	r3, #40	; 0x28
 8006bba:	d86d      	bhi.n	8006c98 <UART_SetConfig+0x188>
 8006bbc:	a201      	add	r2, pc, #4	; (adr r2, 8006bc4 <UART_SetConfig+0xb4>)
 8006bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006bc2:	bf00      	nop
 8006bc4:	08006c69 	.word	0x08006c69
 8006bc8:	08006c99 	.word	0x08006c99
 8006bcc:	08006c99 	.word	0x08006c99
 8006bd0:	08006c99 	.word	0x08006c99
 8006bd4:	08006c99 	.word	0x08006c99
 8006bd8:	08006c99 	.word	0x08006c99
 8006bdc:	08006c99 	.word	0x08006c99
 8006be0:	08006c99 	.word	0x08006c99
 8006be4:	08006c71 	.word	0x08006c71
 8006be8:	08006c99 	.word	0x08006c99
 8006bec:	08006c99 	.word	0x08006c99
 8006bf0:	08006c99 	.word	0x08006c99
 8006bf4:	08006c99 	.word	0x08006c99
 8006bf8:	08006c99 	.word	0x08006c99
 8006bfc:	08006c99 	.word	0x08006c99
 8006c00:	08006c99 	.word	0x08006c99
 8006c04:	08006c79 	.word	0x08006c79
 8006c08:	08006c99 	.word	0x08006c99
 8006c0c:	08006c99 	.word	0x08006c99
 8006c10:	08006c99 	.word	0x08006c99
 8006c14:	08006c99 	.word	0x08006c99
 8006c18:	08006c99 	.word	0x08006c99
 8006c1c:	08006c99 	.word	0x08006c99
 8006c20:	08006c99 	.word	0x08006c99
 8006c24:	08006c81 	.word	0x08006c81
 8006c28:	08006c99 	.word	0x08006c99
 8006c2c:	08006c99 	.word	0x08006c99
 8006c30:	08006c99 	.word	0x08006c99
 8006c34:	08006c99 	.word	0x08006c99
 8006c38:	08006c99 	.word	0x08006c99
 8006c3c:	08006c99 	.word	0x08006c99
 8006c40:	08006c99 	.word	0x08006c99
 8006c44:	08006c89 	.word	0x08006c89
 8006c48:	08006c99 	.word	0x08006c99
 8006c4c:	08006c99 	.word	0x08006c99
 8006c50:	08006c99 	.word	0x08006c99
 8006c54:	08006c99 	.word	0x08006c99
 8006c58:	08006c99 	.word	0x08006c99
 8006c5c:	08006c99 	.word	0x08006c99
 8006c60:	08006c99 	.word	0x08006c99
 8006c64:	08006c91 	.word	0x08006c91
 8006c68:	2301      	movs	r3, #1
 8006c6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c6e:	e222      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c70:	2304      	movs	r3, #4
 8006c72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c76:	e21e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c78:	2308      	movs	r3, #8
 8006c7a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c7e:	e21a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c80:	2310      	movs	r3, #16
 8006c82:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c86:	e216      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c88:	2320      	movs	r3, #32
 8006c8a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c8e:	e212      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c90:	2340      	movs	r3, #64	; 0x40
 8006c92:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c96:	e20e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006c98:	2380      	movs	r3, #128	; 0x80
 8006c9a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006c9e:	e20a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	4a69      	ldr	r2, [pc, #420]	; (8006e4c <UART_SetConfig+0x33c>)
 8006ca6:	4293      	cmp	r3, r2
 8006ca8:	d130      	bne.n	8006d0c <UART_SetConfig+0x1fc>
 8006caa:	4b67      	ldr	r3, [pc, #412]	; (8006e48 <UART_SetConfig+0x338>)
 8006cac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cae:	f003 0307 	and.w	r3, r3, #7
 8006cb2:	2b05      	cmp	r3, #5
 8006cb4:	d826      	bhi.n	8006d04 <UART_SetConfig+0x1f4>
 8006cb6:	a201      	add	r2, pc, #4	; (adr r2, 8006cbc <UART_SetConfig+0x1ac>)
 8006cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cbc:	08006cd5 	.word	0x08006cd5
 8006cc0:	08006cdd 	.word	0x08006cdd
 8006cc4:	08006ce5 	.word	0x08006ce5
 8006cc8:	08006ced 	.word	0x08006ced
 8006ccc:	08006cf5 	.word	0x08006cf5
 8006cd0:	08006cfd 	.word	0x08006cfd
 8006cd4:	2300      	movs	r3, #0
 8006cd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cda:	e1ec      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006cdc:	2304      	movs	r3, #4
 8006cde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ce2:	e1e8      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006ce4:	2308      	movs	r3, #8
 8006ce6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cea:	e1e4      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006cec:	2310      	movs	r3, #16
 8006cee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cf2:	e1e0      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006cf4:	2320      	movs	r3, #32
 8006cf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006cfa:	e1dc      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006cfc:	2340      	movs	r3, #64	; 0x40
 8006cfe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d02:	e1d8      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d04:	2380      	movs	r3, #128	; 0x80
 8006d06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d0a:	e1d4      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d0c:	697b      	ldr	r3, [r7, #20]
 8006d0e:	681b      	ldr	r3, [r3, #0]
 8006d10:	4a4f      	ldr	r2, [pc, #316]	; (8006e50 <UART_SetConfig+0x340>)
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d130      	bne.n	8006d78 <UART_SetConfig+0x268>
 8006d16:	4b4c      	ldr	r3, [pc, #304]	; (8006e48 <UART_SetConfig+0x338>)
 8006d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d1a:	f003 0307 	and.w	r3, r3, #7
 8006d1e:	2b05      	cmp	r3, #5
 8006d20:	d826      	bhi.n	8006d70 <UART_SetConfig+0x260>
 8006d22:	a201      	add	r2, pc, #4	; (adr r2, 8006d28 <UART_SetConfig+0x218>)
 8006d24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d28:	08006d41 	.word	0x08006d41
 8006d2c:	08006d49 	.word	0x08006d49
 8006d30:	08006d51 	.word	0x08006d51
 8006d34:	08006d59 	.word	0x08006d59
 8006d38:	08006d61 	.word	0x08006d61
 8006d3c:	08006d69 	.word	0x08006d69
 8006d40:	2300      	movs	r3, #0
 8006d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d46:	e1b6      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d48:	2304      	movs	r3, #4
 8006d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d4e:	e1b2      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d50:	2308      	movs	r3, #8
 8006d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d56:	e1ae      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d58:	2310      	movs	r3, #16
 8006d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d5e:	e1aa      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d60:	2320      	movs	r3, #32
 8006d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d66:	e1a6      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d68:	2340      	movs	r3, #64	; 0x40
 8006d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d6e:	e1a2      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d70:	2380      	movs	r3, #128	; 0x80
 8006d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006d76:	e19e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006d78:	697b      	ldr	r3, [r7, #20]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a35      	ldr	r2, [pc, #212]	; (8006e54 <UART_SetConfig+0x344>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d130      	bne.n	8006de4 <UART_SetConfig+0x2d4>
 8006d82:	4b31      	ldr	r3, [pc, #196]	; (8006e48 <UART_SetConfig+0x338>)
 8006d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d86:	f003 0307 	and.w	r3, r3, #7
 8006d8a:	2b05      	cmp	r3, #5
 8006d8c:	d826      	bhi.n	8006ddc <UART_SetConfig+0x2cc>
 8006d8e:	a201      	add	r2, pc, #4	; (adr r2, 8006d94 <UART_SetConfig+0x284>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006dad 	.word	0x08006dad
 8006d98:	08006db5 	.word	0x08006db5
 8006d9c:	08006dbd 	.word	0x08006dbd
 8006da0:	08006dc5 	.word	0x08006dc5
 8006da4:	08006dcd 	.word	0x08006dcd
 8006da8:	08006dd5 	.word	0x08006dd5
 8006dac:	2300      	movs	r3, #0
 8006dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006db2:	e180      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006db4:	2304      	movs	r3, #4
 8006db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dba:	e17c      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006dbc:	2308      	movs	r3, #8
 8006dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dc2:	e178      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006dc4:	2310      	movs	r3, #16
 8006dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dca:	e174      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006dcc:	2320      	movs	r3, #32
 8006dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dd2:	e170      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006dd4:	2340      	movs	r3, #64	; 0x40
 8006dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006dda:	e16c      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006ddc:	2380      	movs	r3, #128	; 0x80
 8006dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006de2:	e168      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006de4:	697b      	ldr	r3, [r7, #20]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	4a1b      	ldr	r2, [pc, #108]	; (8006e58 <UART_SetConfig+0x348>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d142      	bne.n	8006e74 <UART_SetConfig+0x364>
 8006dee:	4b16      	ldr	r3, [pc, #88]	; (8006e48 <UART_SetConfig+0x338>)
 8006df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006df2:	f003 0307 	and.w	r3, r3, #7
 8006df6:	2b05      	cmp	r3, #5
 8006df8:	d838      	bhi.n	8006e6c <UART_SetConfig+0x35c>
 8006dfa:	a201      	add	r2, pc, #4	; (adr r2, 8006e00 <UART_SetConfig+0x2f0>)
 8006dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e00:	08006e19 	.word	0x08006e19
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	08006e29 	.word	0x08006e29
 8006e0c:	08006e31 	.word	0x08006e31
 8006e10:	08006e5d 	.word	0x08006e5d
 8006e14:	08006e65 	.word	0x08006e65
 8006e18:	2300      	movs	r3, #0
 8006e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e1e:	e14a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e20:	2304      	movs	r3, #4
 8006e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e26:	e146      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e28:	2308      	movs	r3, #8
 8006e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e2e:	e142      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e30:	2310      	movs	r3, #16
 8006e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e36:	e13e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e38:	cfff69f3 	.word	0xcfff69f3
 8006e3c:	58000c00 	.word	0x58000c00
 8006e40:	11fff4ff 	.word	0x11fff4ff
 8006e44:	40011000 	.word	0x40011000
 8006e48:	58024400 	.word	0x58024400
 8006e4c:	40004400 	.word	0x40004400
 8006e50:	40004800 	.word	0x40004800
 8006e54:	40004c00 	.word	0x40004c00
 8006e58:	40005000 	.word	0x40005000
 8006e5c:	2320      	movs	r3, #32
 8006e5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e62:	e128      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e64:	2340      	movs	r3, #64	; 0x40
 8006e66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e6a:	e124      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e6c:	2380      	movs	r3, #128	; 0x80
 8006e6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006e72:	e120      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4acb      	ldr	r2, [pc, #812]	; (80071a8 <UART_SetConfig+0x698>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d176      	bne.n	8006f6c <UART_SetConfig+0x45c>
 8006e7e:	4bcb      	ldr	r3, [pc, #812]	; (80071ac <UART_SetConfig+0x69c>)
 8006e80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e86:	2b28      	cmp	r3, #40	; 0x28
 8006e88:	d86c      	bhi.n	8006f64 <UART_SetConfig+0x454>
 8006e8a:	a201      	add	r2, pc, #4	; (adr r2, 8006e90 <UART_SetConfig+0x380>)
 8006e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e90:	08006f35 	.word	0x08006f35
 8006e94:	08006f65 	.word	0x08006f65
 8006e98:	08006f65 	.word	0x08006f65
 8006e9c:	08006f65 	.word	0x08006f65
 8006ea0:	08006f65 	.word	0x08006f65
 8006ea4:	08006f65 	.word	0x08006f65
 8006ea8:	08006f65 	.word	0x08006f65
 8006eac:	08006f65 	.word	0x08006f65
 8006eb0:	08006f3d 	.word	0x08006f3d
 8006eb4:	08006f65 	.word	0x08006f65
 8006eb8:	08006f65 	.word	0x08006f65
 8006ebc:	08006f65 	.word	0x08006f65
 8006ec0:	08006f65 	.word	0x08006f65
 8006ec4:	08006f65 	.word	0x08006f65
 8006ec8:	08006f65 	.word	0x08006f65
 8006ecc:	08006f65 	.word	0x08006f65
 8006ed0:	08006f45 	.word	0x08006f45
 8006ed4:	08006f65 	.word	0x08006f65
 8006ed8:	08006f65 	.word	0x08006f65
 8006edc:	08006f65 	.word	0x08006f65
 8006ee0:	08006f65 	.word	0x08006f65
 8006ee4:	08006f65 	.word	0x08006f65
 8006ee8:	08006f65 	.word	0x08006f65
 8006eec:	08006f65 	.word	0x08006f65
 8006ef0:	08006f4d 	.word	0x08006f4d
 8006ef4:	08006f65 	.word	0x08006f65
 8006ef8:	08006f65 	.word	0x08006f65
 8006efc:	08006f65 	.word	0x08006f65
 8006f00:	08006f65 	.word	0x08006f65
 8006f04:	08006f65 	.word	0x08006f65
 8006f08:	08006f65 	.word	0x08006f65
 8006f0c:	08006f65 	.word	0x08006f65
 8006f10:	08006f55 	.word	0x08006f55
 8006f14:	08006f65 	.word	0x08006f65
 8006f18:	08006f65 	.word	0x08006f65
 8006f1c:	08006f65 	.word	0x08006f65
 8006f20:	08006f65 	.word	0x08006f65
 8006f24:	08006f65 	.word	0x08006f65
 8006f28:	08006f65 	.word	0x08006f65
 8006f2c:	08006f65 	.word	0x08006f65
 8006f30:	08006f5d 	.word	0x08006f5d
 8006f34:	2301      	movs	r3, #1
 8006f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f3a:	e0bc      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f3c:	2304      	movs	r3, #4
 8006f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f42:	e0b8      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f44:	2308      	movs	r3, #8
 8006f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f4a:	e0b4      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f4c:	2310      	movs	r3, #16
 8006f4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f52:	e0b0      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f54:	2320      	movs	r3, #32
 8006f56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f5a:	e0ac      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f5c:	2340      	movs	r3, #64	; 0x40
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e0a8      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f64:	2380      	movs	r3, #128	; 0x80
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e0a4      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006f6c:	697b      	ldr	r3, [r7, #20]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a8f      	ldr	r2, [pc, #572]	; (80071b0 <UART_SetConfig+0x6a0>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d130      	bne.n	8006fd8 <UART_SetConfig+0x4c8>
 8006f76:	4b8d      	ldr	r3, [pc, #564]	; (80071ac <UART_SetConfig+0x69c>)
 8006f78:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f7a:	f003 0307 	and.w	r3, r3, #7
 8006f7e:	2b05      	cmp	r3, #5
 8006f80:	d826      	bhi.n	8006fd0 <UART_SetConfig+0x4c0>
 8006f82:	a201      	add	r2, pc, #4	; (adr r2, 8006f88 <UART_SetConfig+0x478>)
 8006f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f88:	08006fa1 	.word	0x08006fa1
 8006f8c:	08006fa9 	.word	0x08006fa9
 8006f90:	08006fb1 	.word	0x08006fb1
 8006f94:	08006fb9 	.word	0x08006fb9
 8006f98:	08006fc1 	.word	0x08006fc1
 8006f9c:	08006fc9 	.word	0x08006fc9
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fa6:	e086      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fae:	e082      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fb0:	2308      	movs	r3, #8
 8006fb2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fb6:	e07e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fb8:	2310      	movs	r3, #16
 8006fba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fbe:	e07a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fc0:	2320      	movs	r3, #32
 8006fc2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fc6:	e076      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fc8:	2340      	movs	r3, #64	; 0x40
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e072      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e06e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a75      	ldr	r2, [pc, #468]	; (80071b4 <UART_SetConfig+0x6a4>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d130      	bne.n	8007044 <UART_SetConfig+0x534>
 8006fe2:	4b72      	ldr	r3, [pc, #456]	; (80071ac <UART_SetConfig+0x69c>)
 8006fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fe6:	f003 0307 	and.w	r3, r3, #7
 8006fea:	2b05      	cmp	r3, #5
 8006fec:	d826      	bhi.n	800703c <UART_SetConfig+0x52c>
 8006fee:	a201      	add	r2, pc, #4	; (adr r2, 8006ff4 <UART_SetConfig+0x4e4>)
 8006ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ff4:	0800700d 	.word	0x0800700d
 8006ff8:	08007015 	.word	0x08007015
 8006ffc:	0800701d 	.word	0x0800701d
 8007000:	08007025 	.word	0x08007025
 8007004:	0800702d 	.word	0x0800702d
 8007008:	08007035 	.word	0x08007035
 800700c:	2300      	movs	r3, #0
 800700e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007012:	e050      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007014:	2304      	movs	r3, #4
 8007016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800701a:	e04c      	b.n	80070b6 <UART_SetConfig+0x5a6>
 800701c:	2308      	movs	r3, #8
 800701e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007022:	e048      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007024:	2310      	movs	r3, #16
 8007026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800702a:	e044      	b.n	80070b6 <UART_SetConfig+0x5a6>
 800702c:	2320      	movs	r3, #32
 800702e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007032:	e040      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007034:	2340      	movs	r3, #64	; 0x40
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e03c      	b.n	80070b6 <UART_SetConfig+0x5a6>
 800703c:	2380      	movs	r3, #128	; 0x80
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e038      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007044:	697b      	ldr	r3, [r7, #20]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	4a5b      	ldr	r2, [pc, #364]	; (80071b8 <UART_SetConfig+0x6a8>)
 800704a:	4293      	cmp	r3, r2
 800704c:	d130      	bne.n	80070b0 <UART_SetConfig+0x5a0>
 800704e:	4b57      	ldr	r3, [pc, #348]	; (80071ac <UART_SetConfig+0x69c>)
 8007050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007052:	f003 0307 	and.w	r3, r3, #7
 8007056:	2b05      	cmp	r3, #5
 8007058:	d826      	bhi.n	80070a8 <UART_SetConfig+0x598>
 800705a:	a201      	add	r2, pc, #4	; (adr r2, 8007060 <UART_SetConfig+0x550>)
 800705c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007060:	08007079 	.word	0x08007079
 8007064:	08007081 	.word	0x08007081
 8007068:	08007089 	.word	0x08007089
 800706c:	08007091 	.word	0x08007091
 8007070:	08007099 	.word	0x08007099
 8007074:	080070a1 	.word	0x080070a1
 8007078:	2302      	movs	r3, #2
 800707a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800707e:	e01a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007080:	2304      	movs	r3, #4
 8007082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007086:	e016      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007088:	2308      	movs	r3, #8
 800708a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800708e:	e012      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007090:	2310      	movs	r3, #16
 8007092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007096:	e00e      	b.n	80070b6 <UART_SetConfig+0x5a6>
 8007098:	2320      	movs	r3, #32
 800709a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800709e:	e00a      	b.n	80070b6 <UART_SetConfig+0x5a6>
 80070a0:	2340      	movs	r3, #64	; 0x40
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e006      	b.n	80070b6 <UART_SetConfig+0x5a6>
 80070a8:	2380      	movs	r3, #128	; 0x80
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e002      	b.n	80070b6 <UART_SetConfig+0x5a6>
 80070b0:	2380      	movs	r3, #128	; 0x80
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	4a3f      	ldr	r2, [pc, #252]	; (80071b8 <UART_SetConfig+0x6a8>)
 80070bc:	4293      	cmp	r3, r2
 80070be:	f040 80f8 	bne.w	80072b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80070c2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80070c6:	2b20      	cmp	r3, #32
 80070c8:	dc46      	bgt.n	8007158 <UART_SetConfig+0x648>
 80070ca:	2b02      	cmp	r3, #2
 80070cc:	f2c0 8082 	blt.w	80071d4 <UART_SetConfig+0x6c4>
 80070d0:	3b02      	subs	r3, #2
 80070d2:	2b1e      	cmp	r3, #30
 80070d4:	d87e      	bhi.n	80071d4 <UART_SetConfig+0x6c4>
 80070d6:	a201      	add	r2, pc, #4	; (adr r2, 80070dc <UART_SetConfig+0x5cc>)
 80070d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070dc:	0800715f 	.word	0x0800715f
 80070e0:	080071d5 	.word	0x080071d5
 80070e4:	08007167 	.word	0x08007167
 80070e8:	080071d5 	.word	0x080071d5
 80070ec:	080071d5 	.word	0x080071d5
 80070f0:	080071d5 	.word	0x080071d5
 80070f4:	08007177 	.word	0x08007177
 80070f8:	080071d5 	.word	0x080071d5
 80070fc:	080071d5 	.word	0x080071d5
 8007100:	080071d5 	.word	0x080071d5
 8007104:	080071d5 	.word	0x080071d5
 8007108:	080071d5 	.word	0x080071d5
 800710c:	080071d5 	.word	0x080071d5
 8007110:	080071d5 	.word	0x080071d5
 8007114:	08007187 	.word	0x08007187
 8007118:	080071d5 	.word	0x080071d5
 800711c:	080071d5 	.word	0x080071d5
 8007120:	080071d5 	.word	0x080071d5
 8007124:	080071d5 	.word	0x080071d5
 8007128:	080071d5 	.word	0x080071d5
 800712c:	080071d5 	.word	0x080071d5
 8007130:	080071d5 	.word	0x080071d5
 8007134:	080071d5 	.word	0x080071d5
 8007138:	080071d5 	.word	0x080071d5
 800713c:	080071d5 	.word	0x080071d5
 8007140:	080071d5 	.word	0x080071d5
 8007144:	080071d5 	.word	0x080071d5
 8007148:	080071d5 	.word	0x080071d5
 800714c:	080071d5 	.word	0x080071d5
 8007150:	080071d5 	.word	0x080071d5
 8007154:	080071c7 	.word	0x080071c7
 8007158:	2b40      	cmp	r3, #64	; 0x40
 800715a:	d037      	beq.n	80071cc <UART_SetConfig+0x6bc>
 800715c:	e03a      	b.n	80071d4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800715e:	f7fe fdbd 	bl	8005cdc <HAL_RCCEx_GetD3PCLK1Freq>
 8007162:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007164:	e03c      	b.n	80071e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007166:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800716a:	4618      	mov	r0, r3
 800716c:	f7fe fdcc 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007172:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007174:	e034      	b.n	80071e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007176:	f107 0318 	add.w	r3, r7, #24
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe ff18 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007180:	69fb      	ldr	r3, [r7, #28]
 8007182:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007184:	e02c      	b.n	80071e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007186:	4b09      	ldr	r3, [pc, #36]	; (80071ac <UART_SetConfig+0x69c>)
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	f003 0320 	and.w	r3, r3, #32
 800718e:	2b00      	cmp	r3, #0
 8007190:	d016      	beq.n	80071c0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007192:	4b06      	ldr	r3, [pc, #24]	; (80071ac <UART_SetConfig+0x69c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	08db      	lsrs	r3, r3, #3
 8007198:	f003 0303 	and.w	r3, r3, #3
 800719c:	4a07      	ldr	r2, [pc, #28]	; (80071bc <UART_SetConfig+0x6ac>)
 800719e:	fa22 f303 	lsr.w	r3, r2, r3
 80071a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80071a4:	e01c      	b.n	80071e0 <UART_SetConfig+0x6d0>
 80071a6:	bf00      	nop
 80071a8:	40011400 	.word	0x40011400
 80071ac:	58024400 	.word	0x58024400
 80071b0:	40007800 	.word	0x40007800
 80071b4:	40007c00 	.word	0x40007c00
 80071b8:	58000c00 	.word	0x58000c00
 80071bc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 80071c0:	4b9d      	ldr	r3, [pc, #628]	; (8007438 <UART_SetConfig+0x928>)
 80071c2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071c4:	e00c      	b.n	80071e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80071c6:	4b9d      	ldr	r3, [pc, #628]	; (800743c <UART_SetConfig+0x92c>)
 80071c8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071ca:	e009      	b.n	80071e0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80071d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80071d2:	e005      	b.n	80071e0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80071d4:	2300      	movs	r3, #0
 80071d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80071d8:	2301      	movs	r3, #1
 80071da:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80071de:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	f000 81de 	beq.w	80075a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80071e8:	697b      	ldr	r3, [r7, #20]
 80071ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071ec:	4a94      	ldr	r2, [pc, #592]	; (8007440 <UART_SetConfig+0x930>)
 80071ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f2:	461a      	mov	r2, r3
 80071f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071f6:	fbb3 f3f2 	udiv	r3, r3, r2
 80071fa:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80071fc:	697b      	ldr	r3, [r7, #20]
 80071fe:	685a      	ldr	r2, [r3, #4]
 8007200:	4613      	mov	r3, r2
 8007202:	005b      	lsls	r3, r3, #1
 8007204:	4413      	add	r3, r2
 8007206:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007208:	429a      	cmp	r2, r3
 800720a:	d305      	bcc.n	8007218 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	685b      	ldr	r3, [r3, #4]
 8007210:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007212:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007214:	429a      	cmp	r2, r3
 8007216:	d903      	bls.n	8007220 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8007218:	2301      	movs	r3, #1
 800721a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 800721e:	e1c1      	b.n	80075a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007222:	2200      	movs	r2, #0
 8007224:	60bb      	str	r3, [r7, #8]
 8007226:	60fa      	str	r2, [r7, #12]
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800722c:	4a84      	ldr	r2, [pc, #528]	; (8007440 <UART_SetConfig+0x930>)
 800722e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007232:	b29b      	uxth	r3, r3
 8007234:	2200      	movs	r2, #0
 8007236:	603b      	str	r3, [r7, #0]
 8007238:	607a      	str	r2, [r7, #4]
 800723a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800723e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007242:	f7f9 f8b5 	bl	80003b0 <__aeabi_uldivmod>
 8007246:	4602      	mov	r2, r0
 8007248:	460b      	mov	r3, r1
 800724a:	4610      	mov	r0, r2
 800724c:	4619      	mov	r1, r3
 800724e:	f04f 0200 	mov.w	r2, #0
 8007252:	f04f 0300 	mov.w	r3, #0
 8007256:	020b      	lsls	r3, r1, #8
 8007258:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800725c:	0202      	lsls	r2, r0, #8
 800725e:	6979      	ldr	r1, [r7, #20]
 8007260:	6849      	ldr	r1, [r1, #4]
 8007262:	0849      	lsrs	r1, r1, #1
 8007264:	2000      	movs	r0, #0
 8007266:	460c      	mov	r4, r1
 8007268:	4605      	mov	r5, r0
 800726a:	eb12 0804 	adds.w	r8, r2, r4
 800726e:	eb43 0905 	adc.w	r9, r3, r5
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	685b      	ldr	r3, [r3, #4]
 8007276:	2200      	movs	r2, #0
 8007278:	469a      	mov	sl, r3
 800727a:	4693      	mov	fp, r2
 800727c:	4652      	mov	r2, sl
 800727e:	465b      	mov	r3, fp
 8007280:	4640      	mov	r0, r8
 8007282:	4649      	mov	r1, r9
 8007284:	f7f9 f894 	bl	80003b0 <__aeabi_uldivmod>
 8007288:	4602      	mov	r2, r0
 800728a:	460b      	mov	r3, r1
 800728c:	4613      	mov	r3, r2
 800728e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007292:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007296:	d308      	bcc.n	80072aa <UART_SetConfig+0x79a>
 8007298:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800729a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800729e:	d204      	bcs.n	80072aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80072a6:	60da      	str	r2, [r3, #12]
 80072a8:	e17c      	b.n	80075a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80072aa:	2301      	movs	r3, #1
 80072ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80072b0:	e178      	b.n	80075a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80072b2:	697b      	ldr	r3, [r7, #20]
 80072b4:	69db      	ldr	r3, [r3, #28]
 80072b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80072ba:	f040 80c5 	bne.w	8007448 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80072be:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80072c2:	2b20      	cmp	r3, #32
 80072c4:	dc48      	bgt.n	8007358 <UART_SetConfig+0x848>
 80072c6:	2b00      	cmp	r3, #0
 80072c8:	db7b      	blt.n	80073c2 <UART_SetConfig+0x8b2>
 80072ca:	2b20      	cmp	r3, #32
 80072cc:	d879      	bhi.n	80073c2 <UART_SetConfig+0x8b2>
 80072ce:	a201      	add	r2, pc, #4	; (adr r2, 80072d4 <UART_SetConfig+0x7c4>)
 80072d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072d4:	0800735f 	.word	0x0800735f
 80072d8:	08007367 	.word	0x08007367
 80072dc:	080073c3 	.word	0x080073c3
 80072e0:	080073c3 	.word	0x080073c3
 80072e4:	0800736f 	.word	0x0800736f
 80072e8:	080073c3 	.word	0x080073c3
 80072ec:	080073c3 	.word	0x080073c3
 80072f0:	080073c3 	.word	0x080073c3
 80072f4:	0800737f 	.word	0x0800737f
 80072f8:	080073c3 	.word	0x080073c3
 80072fc:	080073c3 	.word	0x080073c3
 8007300:	080073c3 	.word	0x080073c3
 8007304:	080073c3 	.word	0x080073c3
 8007308:	080073c3 	.word	0x080073c3
 800730c:	080073c3 	.word	0x080073c3
 8007310:	080073c3 	.word	0x080073c3
 8007314:	0800738f 	.word	0x0800738f
 8007318:	080073c3 	.word	0x080073c3
 800731c:	080073c3 	.word	0x080073c3
 8007320:	080073c3 	.word	0x080073c3
 8007324:	080073c3 	.word	0x080073c3
 8007328:	080073c3 	.word	0x080073c3
 800732c:	080073c3 	.word	0x080073c3
 8007330:	080073c3 	.word	0x080073c3
 8007334:	080073c3 	.word	0x080073c3
 8007338:	080073c3 	.word	0x080073c3
 800733c:	080073c3 	.word	0x080073c3
 8007340:	080073c3 	.word	0x080073c3
 8007344:	080073c3 	.word	0x080073c3
 8007348:	080073c3 	.word	0x080073c3
 800734c:	080073c3 	.word	0x080073c3
 8007350:	080073c3 	.word	0x080073c3
 8007354:	080073b5 	.word	0x080073b5
 8007358:	2b40      	cmp	r3, #64	; 0x40
 800735a:	d02e      	beq.n	80073ba <UART_SetConfig+0x8aa>
 800735c:	e031      	b.n	80073c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800735e:	f7fc fd07 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 8007362:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007364:	e033      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007366:	f7fc fd19 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 800736a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800736c:	e02f      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800736e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007372:	4618      	mov	r0, r3
 8007374:	f7fe fcc8 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800737a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800737c:	e027      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800737e:	f107 0318 	add.w	r3, r7, #24
 8007382:	4618      	mov	r0, r3
 8007384:	f7fe fe14 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007388:	69fb      	ldr	r3, [r7, #28]
 800738a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800738c:	e01f      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800738e:	4b2d      	ldr	r3, [pc, #180]	; (8007444 <UART_SetConfig+0x934>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f003 0320 	and.w	r3, r3, #32
 8007396:	2b00      	cmp	r3, #0
 8007398:	d009      	beq.n	80073ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800739a:	4b2a      	ldr	r3, [pc, #168]	; (8007444 <UART_SetConfig+0x934>)
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	08db      	lsrs	r3, r3, #3
 80073a0:	f003 0303 	and.w	r3, r3, #3
 80073a4:	4a24      	ldr	r2, [pc, #144]	; (8007438 <UART_SetConfig+0x928>)
 80073a6:	fa22 f303 	lsr.w	r3, r2, r3
 80073aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80073ac:	e00f      	b.n	80073ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80073ae:	4b22      	ldr	r3, [pc, #136]	; (8007438 <UART_SetConfig+0x928>)
 80073b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b2:	e00c      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80073b4:	4b21      	ldr	r3, [pc, #132]	; (800743c <UART_SetConfig+0x92c>)
 80073b6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073b8:	e009      	b.n	80073ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80073ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80073be:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073c0:	e005      	b.n	80073ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80073c2:	2300      	movs	r3, #0
 80073c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80073c6:	2301      	movs	r3, #1
 80073c8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80073cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80073ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	f000 80e7 	beq.w	80075a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80073d6:	697b      	ldr	r3, [r7, #20]
 80073d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073da:	4a19      	ldr	r2, [pc, #100]	; (8007440 <UART_SetConfig+0x930>)
 80073dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80073e0:	461a      	mov	r2, r3
 80073e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80073e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80073e8:	005a      	lsls	r2, r3, #1
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	085b      	lsrs	r3, r3, #1
 80073f0:	441a      	add	r2, r3
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80073fa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80073fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073fe:	2b0f      	cmp	r3, #15
 8007400:	d916      	bls.n	8007430 <UART_SetConfig+0x920>
 8007402:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007408:	d212      	bcs.n	8007430 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800740a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800740c:	b29b      	uxth	r3, r3
 800740e:	f023 030f 	bic.w	r3, r3, #15
 8007412:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007414:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007416:	085b      	lsrs	r3, r3, #1
 8007418:	b29b      	uxth	r3, r3
 800741a:	f003 0307 	and.w	r3, r3, #7
 800741e:	b29a      	uxth	r2, r3
 8007420:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8007422:	4313      	orrs	r3, r2
 8007424:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8007426:	697b      	ldr	r3, [r7, #20]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 800742c:	60da      	str	r2, [r3, #12]
 800742e:	e0b9      	b.n	80075a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007430:	2301      	movs	r3, #1
 8007432:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007436:	e0b5      	b.n	80075a4 <UART_SetConfig+0xa94>
 8007438:	03d09000 	.word	0x03d09000
 800743c:	003d0900 	.word	0x003d0900
 8007440:	080085d0 	.word	0x080085d0
 8007444:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8007448:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800744c:	2b20      	cmp	r3, #32
 800744e:	dc49      	bgt.n	80074e4 <UART_SetConfig+0x9d4>
 8007450:	2b00      	cmp	r3, #0
 8007452:	db7c      	blt.n	800754e <UART_SetConfig+0xa3e>
 8007454:	2b20      	cmp	r3, #32
 8007456:	d87a      	bhi.n	800754e <UART_SetConfig+0xa3e>
 8007458:	a201      	add	r2, pc, #4	; (adr r2, 8007460 <UART_SetConfig+0x950>)
 800745a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745e:	bf00      	nop
 8007460:	080074eb 	.word	0x080074eb
 8007464:	080074f3 	.word	0x080074f3
 8007468:	0800754f 	.word	0x0800754f
 800746c:	0800754f 	.word	0x0800754f
 8007470:	080074fb 	.word	0x080074fb
 8007474:	0800754f 	.word	0x0800754f
 8007478:	0800754f 	.word	0x0800754f
 800747c:	0800754f 	.word	0x0800754f
 8007480:	0800750b 	.word	0x0800750b
 8007484:	0800754f 	.word	0x0800754f
 8007488:	0800754f 	.word	0x0800754f
 800748c:	0800754f 	.word	0x0800754f
 8007490:	0800754f 	.word	0x0800754f
 8007494:	0800754f 	.word	0x0800754f
 8007498:	0800754f 	.word	0x0800754f
 800749c:	0800754f 	.word	0x0800754f
 80074a0:	0800751b 	.word	0x0800751b
 80074a4:	0800754f 	.word	0x0800754f
 80074a8:	0800754f 	.word	0x0800754f
 80074ac:	0800754f 	.word	0x0800754f
 80074b0:	0800754f 	.word	0x0800754f
 80074b4:	0800754f 	.word	0x0800754f
 80074b8:	0800754f 	.word	0x0800754f
 80074bc:	0800754f 	.word	0x0800754f
 80074c0:	0800754f 	.word	0x0800754f
 80074c4:	0800754f 	.word	0x0800754f
 80074c8:	0800754f 	.word	0x0800754f
 80074cc:	0800754f 	.word	0x0800754f
 80074d0:	0800754f 	.word	0x0800754f
 80074d4:	0800754f 	.word	0x0800754f
 80074d8:	0800754f 	.word	0x0800754f
 80074dc:	0800754f 	.word	0x0800754f
 80074e0:	08007541 	.word	0x08007541
 80074e4:	2b40      	cmp	r3, #64	; 0x40
 80074e6:	d02e      	beq.n	8007546 <UART_SetConfig+0xa36>
 80074e8:	e031      	b.n	800754e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80074ea:	f7fc fc41 	bl	8003d70 <HAL_RCC_GetPCLK1Freq>
 80074ee:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074f0:	e033      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80074f2:	f7fc fc53 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 80074f6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80074f8:	e02f      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80074fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80074fe:	4618      	mov	r0, r3
 8007500:	f7fe fc02 	bl	8005d08 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007504:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007506:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007508:	e027      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800750a:	f107 0318 	add.w	r3, r7, #24
 800750e:	4618      	mov	r0, r3
 8007510:	f7fe fd4e 	bl	8005fb0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007514:	69fb      	ldr	r3, [r7, #28]
 8007516:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007518:	e01f      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800751a:	4b2d      	ldr	r3, [pc, #180]	; (80075d0 <UART_SetConfig+0xac0>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0320 	and.w	r3, r3, #32
 8007522:	2b00      	cmp	r3, #0
 8007524:	d009      	beq.n	800753a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007526:	4b2a      	ldr	r3, [pc, #168]	; (80075d0 <UART_SetConfig+0xac0>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	08db      	lsrs	r3, r3, #3
 800752c:	f003 0303 	and.w	r3, r3, #3
 8007530:	4a28      	ldr	r2, [pc, #160]	; (80075d4 <UART_SetConfig+0xac4>)
 8007532:	fa22 f303 	lsr.w	r3, r2, r3
 8007536:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007538:	e00f      	b.n	800755a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800753a:	4b26      	ldr	r3, [pc, #152]	; (80075d4 <UART_SetConfig+0xac4>)
 800753c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800753e:	e00c      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8007540:	4b25      	ldr	r3, [pc, #148]	; (80075d8 <UART_SetConfig+0xac8>)
 8007542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007544:	e009      	b.n	800755a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007546:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800754a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800754c:	e005      	b.n	800755a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800754e:	2300      	movs	r3, #0
 8007550:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007552:	2301      	movs	r3, #1
 8007554:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007558:	bf00      	nop
    }

    if (pclk != 0U)
 800755a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800755c:	2b00      	cmp	r3, #0
 800755e:	d021      	beq.n	80075a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007560:	697b      	ldr	r3, [r7, #20]
 8007562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007564:	4a1d      	ldr	r2, [pc, #116]	; (80075dc <UART_SetConfig+0xacc>)
 8007566:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800756a:	461a      	mov	r2, r3
 800756c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800756e:	fbb3 f2f2 	udiv	r2, r3, r2
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	085b      	lsrs	r3, r3, #1
 8007578:	441a      	add	r2, r3
 800757a:	697b      	ldr	r3, [r7, #20]
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007582:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007584:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007586:	2b0f      	cmp	r3, #15
 8007588:	d909      	bls.n	800759e <UART_SetConfig+0xa8e>
 800758a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800758c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007590:	d205      	bcs.n	800759e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007594:	b29a      	uxth	r2, r3
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	60da      	str	r2, [r3, #12]
 800759c:	e002      	b.n	80075a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800759e:	2301      	movs	r3, #1
 80075a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	2201      	movs	r2, #1
 80075a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80075ac:	697b      	ldr	r3, [r7, #20]
 80075ae:	2201      	movs	r2, #1
 80075b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80075b4:	697b      	ldr	r3, [r7, #20]
 80075b6:	2200      	movs	r2, #0
 80075b8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80075ba:	697b      	ldr	r3, [r7, #20]
 80075bc:	2200      	movs	r2, #0
 80075be:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80075c0:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3748      	adds	r7, #72	; 0x48
 80075c8:	46bd      	mov	sp, r7
 80075ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075ce:	bf00      	nop
 80075d0:	58024400 	.word	0x58024400
 80075d4:	03d09000 	.word	0x03d09000
 80075d8:	003d0900 	.word	0x003d0900
 80075dc:	080085d0 	.word	0x080085d0

080075e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80075e0:	b480      	push	{r7}
 80075e2:	b083      	sub	sp, #12
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075ec:	f003 0308 	and.w	r3, r3, #8
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d00a      	beq.n	800760a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	685b      	ldr	r3, [r3, #4]
 80075fa:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	681b      	ldr	r3, [r3, #0]
 8007606:	430a      	orrs	r2, r1
 8007608:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800760e:	f003 0301 	and.w	r3, r3, #1
 8007612:	2b00      	cmp	r3, #0
 8007614:	d00a      	beq.n	800762c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	430a      	orrs	r2, r1
 800762a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007630:	f003 0302 	and.w	r3, r3, #2
 8007634:	2b00      	cmp	r3, #0
 8007636:	d00a      	beq.n	800764e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	430a      	orrs	r2, r1
 800764c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007652:	f003 0304 	and.w	r3, r3, #4
 8007656:	2b00      	cmp	r3, #0
 8007658:	d00a      	beq.n	8007670 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	685b      	ldr	r3, [r3, #4]
 8007660:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	430a      	orrs	r2, r1
 800766e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007674:	f003 0310 	and.w	r3, r3, #16
 8007678:	2b00      	cmp	r3, #0
 800767a:	d00a      	beq.n	8007692 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	689b      	ldr	r3, [r3, #8]
 8007682:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	430a      	orrs	r2, r1
 8007690:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007696:	f003 0320 	and.w	r3, r3, #32
 800769a:	2b00      	cmp	r3, #0
 800769c:	d00a      	beq.n	80076b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	430a      	orrs	r2, r1
 80076b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076bc:	2b00      	cmp	r3, #0
 80076be:	d01a      	beq.n	80076f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	685b      	ldr	r3, [r3, #4]
 80076c6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	430a      	orrs	r2, r1
 80076d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80076de:	d10a      	bne.n	80076f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	685b      	ldr	r3, [r3, #4]
 80076e6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	430a      	orrs	r2, r1
 80076f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00a      	beq.n	8007718 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	685b      	ldr	r3, [r3, #4]
 8007708:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	430a      	orrs	r2, r1
 8007716:	605a      	str	r2, [r3, #4]
  }
}
 8007718:	bf00      	nop
 800771a:	370c      	adds	r7, #12
 800771c:	46bd      	mov	sp, r7
 800771e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007722:	4770      	bx	lr

08007724 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007724:	b580      	push	{r7, lr}
 8007726:	b098      	sub	sp, #96	; 0x60
 8007728:	af02      	add	r7, sp, #8
 800772a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	2200      	movs	r2, #0
 8007730:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007734:	f7fa f8b6 	bl	80018a4 <HAL_GetTick>
 8007738:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f003 0308 	and.w	r3, r3, #8
 8007744:	2b08      	cmp	r3, #8
 8007746:	d12f      	bne.n	80077a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007748:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800774c:	9300      	str	r3, [sp, #0]
 800774e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007750:	2200      	movs	r2, #0
 8007752:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f000 f88e 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 800775c:	4603      	mov	r3, r0
 800775e:	2b00      	cmp	r3, #0
 8007760:	d022      	beq.n	80077a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007772:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007776:	653b      	str	r3, [r7, #80]	; 0x50
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	681b      	ldr	r3, [r3, #0]
 800777c:	461a      	mov	r2, r3
 800777e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007780:	647b      	str	r3, [r7, #68]	; 0x44
 8007782:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007786:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800778e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e6      	bne.n	8007762 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80077a4:	2303      	movs	r3, #3
 80077a6:	e063      	b.n	8007870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f003 0304 	and.w	r3, r3, #4
 80077b2:	2b04      	cmp	r3, #4
 80077b4:	d149      	bne.n	800784a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80077b6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80077ba:	9300      	str	r3, [sp, #0]
 80077bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80077be:	2200      	movs	r2, #0
 80077c0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80077c4:	6878      	ldr	r0, [r7, #4]
 80077c6:	f000 f857 	bl	8007878 <UART_WaitOnFlagUntilTimeout>
 80077ca:	4603      	mov	r3, r0
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d03c      	beq.n	800784a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077d8:	e853 3f00 	ldrex	r3, [r3]
 80077dc:	623b      	str	r3, [r7, #32]
   return(result);
 80077de:	6a3b      	ldr	r3, [r7, #32]
 80077e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80077e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	461a      	mov	r2, r3
 80077ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077ee:	633b      	str	r3, [r7, #48]	; 0x30
 80077f0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80077f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077f6:	e841 2300 	strex	r3, r2, [r1]
 80077fa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80077fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d1e6      	bne.n	80077d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	3308      	adds	r3, #8
 8007808:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800780a:	693b      	ldr	r3, [r7, #16]
 800780c:	e853 3f00 	ldrex	r3, [r3]
 8007810:	60fb      	str	r3, [r7, #12]
   return(result);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	f023 0301 	bic.w	r3, r3, #1
 8007818:	64bb      	str	r3, [r7, #72]	; 0x48
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	3308      	adds	r3, #8
 8007820:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007822:	61fa      	str	r2, [r7, #28]
 8007824:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007826:	69b9      	ldr	r1, [r7, #24]
 8007828:	69fa      	ldr	r2, [r7, #28]
 800782a:	e841 2300 	strex	r3, r2, [r1]
 800782e:	617b      	str	r3, [r7, #20]
   return(result);
 8007830:	697b      	ldr	r3, [r7, #20]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d1e5      	bne.n	8007802 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2220      	movs	r2, #32
 800783a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	2200      	movs	r2, #0
 8007842:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007846:	2303      	movs	r3, #3
 8007848:	e012      	b.n	8007870 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2220      	movs	r2, #32
 800784e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	2220      	movs	r2, #32
 8007856:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	2200      	movs	r2, #0
 8007864:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2200      	movs	r2, #0
 800786a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800786e:	2300      	movs	r3, #0
}
 8007870:	4618      	mov	r0, r3
 8007872:	3758      	adds	r7, #88	; 0x58
 8007874:	46bd      	mov	sp, r7
 8007876:	bd80      	pop	{r7, pc}

08007878 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	b084      	sub	sp, #16
 800787c:	af00      	add	r7, sp, #0
 800787e:	60f8      	str	r0, [r7, #12]
 8007880:	60b9      	str	r1, [r7, #8]
 8007882:	603b      	str	r3, [r7, #0]
 8007884:	4613      	mov	r3, r2
 8007886:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007888:	e04f      	b.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800788a:	69bb      	ldr	r3, [r7, #24]
 800788c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007890:	d04b      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007892:	f7fa f807 	bl	80018a4 <HAL_GetTick>
 8007896:	4602      	mov	r2, r0
 8007898:	683b      	ldr	r3, [r7, #0]
 800789a:	1ad3      	subs	r3, r2, r3
 800789c:	69ba      	ldr	r2, [r7, #24]
 800789e:	429a      	cmp	r2, r3
 80078a0:	d302      	bcc.n	80078a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80078a2:	69bb      	ldr	r3, [r7, #24]
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d101      	bne.n	80078ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80078a8:	2303      	movs	r3, #3
 80078aa:	e04e      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d037      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	2b80      	cmp	r3, #128	; 0x80
 80078be:	d034      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
 80078c0:	68bb      	ldr	r3, [r7, #8]
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d031      	beq.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	69db      	ldr	r3, [r3, #28]
 80078cc:	f003 0308 	and.w	r3, r3, #8
 80078d0:	2b08      	cmp	r3, #8
 80078d2:	d110      	bne.n	80078f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	2208      	movs	r2, #8
 80078da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80078dc:	68f8      	ldr	r0, [r7, #12]
 80078de:	f000 f839 	bl	8007954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	2208      	movs	r2, #8
 80078e6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2200      	movs	r2, #0
 80078ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e029      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	69db      	ldr	r3, [r3, #28]
 80078fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007900:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007904:	d111      	bne.n	800792a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800790e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007910:	68f8      	ldr	r0, [r7, #12]
 8007912:	f000 f81f 	bl	8007954 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2220      	movs	r2, #32
 800791a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007926:	2303      	movs	r3, #3
 8007928:	e00f      	b.n	800794a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	69da      	ldr	r2, [r3, #28]
 8007930:	68bb      	ldr	r3, [r7, #8]
 8007932:	4013      	ands	r3, r2
 8007934:	68ba      	ldr	r2, [r7, #8]
 8007936:	429a      	cmp	r2, r3
 8007938:	bf0c      	ite	eq
 800793a:	2301      	moveq	r3, #1
 800793c:	2300      	movne	r3, #0
 800793e:	b2db      	uxtb	r3, r3
 8007940:	461a      	mov	r2, r3
 8007942:	79fb      	ldrb	r3, [r7, #7]
 8007944:	429a      	cmp	r2, r3
 8007946:	d0a0      	beq.n	800788a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007948:	2300      	movs	r3, #0
}
 800794a:	4618      	mov	r0, r3
 800794c:	3710      	adds	r7, #16
 800794e:	46bd      	mov	sp, r7
 8007950:	bd80      	pop	{r7, pc}
	...

08007954 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b095      	sub	sp, #84	; 0x54
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800796a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800796c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007970:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	461a      	mov	r2, r3
 8007978:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800797a:	643b      	str	r3, [r7, #64]	; 0x40
 800797c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007980:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007988:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e6      	bne.n	800795c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	3308      	adds	r3, #8
 8007994:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6a3b      	ldr	r3, [r7, #32]
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	61fb      	str	r3, [r7, #28]
   return(result);
 800799e:	69fa      	ldr	r2, [r7, #28]
 80079a0:	4b1e      	ldr	r3, [pc, #120]	; (8007a1c <UART_EndRxTransfer+0xc8>)
 80079a2:	4013      	ands	r3, r2
 80079a4:	64bb      	str	r3, [r7, #72]	; 0x48
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	3308      	adds	r3, #8
 80079ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80079ae:	62fa      	str	r2, [r7, #44]	; 0x2c
 80079b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80079b4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e5      	bne.n	800798e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80079c6:	2b01      	cmp	r3, #1
 80079c8:	d118      	bne.n	80079fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	e853 3f00 	ldrex	r3, [r3]
 80079d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80079d8:	68bb      	ldr	r3, [r7, #8]
 80079da:	f023 0310 	bic.w	r3, r3, #16
 80079de:	647b      	str	r3, [r7, #68]	; 0x44
 80079e0:	687b      	ldr	r3, [r7, #4]
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	461a      	mov	r2, r3
 80079e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80079e8:	61bb      	str	r3, [r7, #24]
 80079ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ec:	6979      	ldr	r1, [r7, #20]
 80079ee:	69ba      	ldr	r2, [r7, #24]
 80079f0:	e841 2300 	strex	r3, r2, [r1]
 80079f4:	613b      	str	r3, [r7, #16]
   return(result);
 80079f6:	693b      	ldr	r3, [r7, #16]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d1e6      	bne.n	80079ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2200      	movs	r2, #0
 8007a08:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	2200      	movs	r2, #0
 8007a0e:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007a10:	bf00      	nop
 8007a12:	3754      	adds	r7, #84	; 0x54
 8007a14:	46bd      	mov	sp, r7
 8007a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a1a:	4770      	bx	lr
 8007a1c:	effffffe 	.word	0xeffffffe

08007a20 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d101      	bne.n	8007a36 <HAL_UARTEx_DisableFifoMode+0x16>
 8007a32:	2302      	movs	r3, #2
 8007a34:	e027      	b.n	8007a86 <HAL_UARTEx_DisableFifoMode+0x66>
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	2201      	movs	r2, #1
 8007a3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2224      	movs	r2, #36	; 0x24
 8007a42:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	681b      	ldr	r3, [r3, #0]
 8007a4c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	681a      	ldr	r2, [r3, #0]
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f022 0201 	bic.w	r2, r2, #1
 8007a5c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007a64:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68fa      	ldr	r2, [r7, #12]
 8007a72:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2220      	movs	r2, #32
 8007a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2200      	movs	r2, #0
 8007a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007a84:	2300      	movs	r3, #0
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3714      	adds	r7, #20
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr

08007a92 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007a92:	b580      	push	{r7, lr}
 8007a94:	b084      	sub	sp, #16
 8007a96:	af00      	add	r7, sp, #0
 8007a98:	6078      	str	r0, [r7, #4]
 8007a9a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e02d      	b.n	8007b06 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2201      	movs	r2, #1
 8007aae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2224      	movs	r2, #36	; 0x24
 8007ab6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f022 0201 	bic.w	r2, r2, #1
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	689b      	ldr	r3, [r3, #8]
 8007ad8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	683a      	ldr	r2, [r7, #0]
 8007ae2:	430a      	orrs	r2, r1
 8007ae4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f000 f850 	bl	8007b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	68fa      	ldr	r2, [r7, #12]
 8007af2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	2220      	movs	r2, #32
 8007af8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2200      	movs	r2, #0
 8007b00:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b04:	2300      	movs	r3, #0
}
 8007b06:	4618      	mov	r0, r3
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b0e:	b580      	push	{r7, lr}
 8007b10:	b084      	sub	sp, #16
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
 8007b16:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007b1e:	2b01      	cmp	r3, #1
 8007b20:	d101      	bne.n	8007b26 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b22:	2302      	movs	r3, #2
 8007b24:	e02d      	b.n	8007b82 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2201      	movs	r2, #1
 8007b2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	2224      	movs	r2, #36	; 0x24
 8007b32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	681a      	ldr	r2, [r3, #0]
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f022 0201 	bic.w	r2, r2, #1
 8007b4c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	689b      	ldr	r3, [r3, #8]
 8007b54:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	683a      	ldr	r2, [r7, #0]
 8007b5e:	430a      	orrs	r2, r1
 8007b60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b62:	6878      	ldr	r0, [r7, #4]
 8007b64:	f000 f812 	bl	8007b8c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68fa      	ldr	r2, [r7, #12]
 8007b6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	2220      	movs	r2, #32
 8007b74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	2200      	movs	r2, #0
 8007b7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007b80:	2300      	movs	r3, #0
}
 8007b82:	4618      	mov	r0, r3
 8007b84:	3710      	adds	r7, #16
 8007b86:	46bd      	mov	sp, r7
 8007b88:	bd80      	pop	{r7, pc}
	...

08007b8c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007b8c:	b480      	push	{r7}
 8007b8e:	b085      	sub	sp, #20
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d108      	bne.n	8007bae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2201      	movs	r2, #1
 8007ba0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	2201      	movs	r2, #1
 8007ba8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007bac:	e031      	b.n	8007c12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007bae:	2310      	movs	r3, #16
 8007bb0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007bb2:	2310      	movs	r3, #16
 8007bb4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	689b      	ldr	r3, [r3, #8]
 8007bbc:	0e5b      	lsrs	r3, r3, #25
 8007bbe:	b2db      	uxtb	r3, r3
 8007bc0:	f003 0307 	and.w	r3, r3, #7
 8007bc4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	0f5b      	lsrs	r3, r3, #29
 8007bce:	b2db      	uxtb	r3, r3
 8007bd0:	f003 0307 	and.w	r3, r3, #7
 8007bd4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007bd6:	7bbb      	ldrb	r3, [r7, #14]
 8007bd8:	7b3a      	ldrb	r2, [r7, #12]
 8007bda:	4911      	ldr	r1, [pc, #68]	; (8007c20 <UARTEx_SetNbDataToProcess+0x94>)
 8007bdc:	5c8a      	ldrb	r2, [r1, r2]
 8007bde:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007be2:	7b3a      	ldrb	r2, [r7, #12]
 8007be4:	490f      	ldr	r1, [pc, #60]	; (8007c24 <UARTEx_SetNbDataToProcess+0x98>)
 8007be6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007be8:	fb93 f3f2 	sdiv	r3, r3, r2
 8007bec:	b29a      	uxth	r2, r3
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007bf4:	7bfb      	ldrb	r3, [r7, #15]
 8007bf6:	7b7a      	ldrb	r2, [r7, #13]
 8007bf8:	4909      	ldr	r1, [pc, #36]	; (8007c20 <UARTEx_SetNbDataToProcess+0x94>)
 8007bfa:	5c8a      	ldrb	r2, [r1, r2]
 8007bfc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007c00:	7b7a      	ldrb	r2, [r7, #13]
 8007c02:	4908      	ldr	r1, [pc, #32]	; (8007c24 <UARTEx_SetNbDataToProcess+0x98>)
 8007c04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007c06:	fb93 f3f2 	sdiv	r3, r3, r2
 8007c0a:	b29a      	uxth	r2, r3
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007c12:	bf00      	nop
 8007c14:	3714      	adds	r7, #20
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	080085e8 	.word	0x080085e8
 8007c24:	080085f0 	.word	0x080085f0

08007c28 <tolower>:
 8007c28:	4b03      	ldr	r3, [pc, #12]	; (8007c38 <tolower+0x10>)
 8007c2a:	5c1b      	ldrb	r3, [r3, r0]
 8007c2c:	f003 0303 	and.w	r3, r3, #3
 8007c30:	2b01      	cmp	r3, #1
 8007c32:	bf08      	it	eq
 8007c34:	3020      	addeq	r0, #32
 8007c36:	4770      	bx	lr
 8007c38:	080085f9 	.word	0x080085f9

08007c3c <toupper>:
 8007c3c:	4b03      	ldr	r3, [pc, #12]	; (8007c4c <toupper+0x10>)
 8007c3e:	5c1b      	ldrb	r3, [r3, r0]
 8007c40:	f003 0303 	and.w	r3, r3, #3
 8007c44:	2b02      	cmp	r3, #2
 8007c46:	bf08      	it	eq
 8007c48:	3820      	subeq	r0, #32
 8007c4a:	4770      	bx	lr
 8007c4c:	080085f9 	.word	0x080085f9

08007c50 <siprintf>:
 8007c50:	b40e      	push	{r1, r2, r3}
 8007c52:	b500      	push	{lr}
 8007c54:	b09c      	sub	sp, #112	; 0x70
 8007c56:	ab1d      	add	r3, sp, #116	; 0x74
 8007c58:	9002      	str	r0, [sp, #8]
 8007c5a:	9006      	str	r0, [sp, #24]
 8007c5c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007c60:	4809      	ldr	r0, [pc, #36]	; (8007c88 <siprintf+0x38>)
 8007c62:	9107      	str	r1, [sp, #28]
 8007c64:	9104      	str	r1, [sp, #16]
 8007c66:	4909      	ldr	r1, [pc, #36]	; (8007c8c <siprintf+0x3c>)
 8007c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8007c6c:	9105      	str	r1, [sp, #20]
 8007c6e:	6800      	ldr	r0, [r0, #0]
 8007c70:	9301      	str	r3, [sp, #4]
 8007c72:	a902      	add	r1, sp, #8
 8007c74:	f000 f89a 	bl	8007dac <_svfiprintf_r>
 8007c78:	9b02      	ldr	r3, [sp, #8]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	701a      	strb	r2, [r3, #0]
 8007c7e:	b01c      	add	sp, #112	; 0x70
 8007c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8007c84:	b003      	add	sp, #12
 8007c86:	4770      	bx	lr
 8007c88:	24000128 	.word	0x24000128
 8007c8c:	ffff0208 	.word	0xffff0208

08007c90 <memset>:
 8007c90:	4402      	add	r2, r0
 8007c92:	4603      	mov	r3, r0
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d100      	bne.n	8007c9a <memset+0xa>
 8007c98:	4770      	bx	lr
 8007c9a:	f803 1b01 	strb.w	r1, [r3], #1
 8007c9e:	e7f9      	b.n	8007c94 <memset+0x4>

08007ca0 <__errno>:
 8007ca0:	4b01      	ldr	r3, [pc, #4]	; (8007ca8 <__errno+0x8>)
 8007ca2:	6818      	ldr	r0, [r3, #0]
 8007ca4:	4770      	bx	lr
 8007ca6:	bf00      	nop
 8007ca8:	24000128 	.word	0x24000128

08007cac <__libc_init_array>:
 8007cac:	b570      	push	{r4, r5, r6, lr}
 8007cae:	4d0d      	ldr	r5, [pc, #52]	; (8007ce4 <__libc_init_array+0x38>)
 8007cb0:	4c0d      	ldr	r4, [pc, #52]	; (8007ce8 <__libc_init_array+0x3c>)
 8007cb2:	1b64      	subs	r4, r4, r5
 8007cb4:	10a4      	asrs	r4, r4, #2
 8007cb6:	2600      	movs	r6, #0
 8007cb8:	42a6      	cmp	r6, r4
 8007cba:	d109      	bne.n	8007cd0 <__libc_init_array+0x24>
 8007cbc:	4d0b      	ldr	r5, [pc, #44]	; (8007cec <__libc_init_array+0x40>)
 8007cbe:	4c0c      	ldr	r4, [pc, #48]	; (8007cf0 <__libc_init_array+0x44>)
 8007cc0:	f000 fc6a 	bl	8008598 <_init>
 8007cc4:	1b64      	subs	r4, r4, r5
 8007cc6:	10a4      	asrs	r4, r4, #2
 8007cc8:	2600      	movs	r6, #0
 8007cca:	42a6      	cmp	r6, r4
 8007ccc:	d105      	bne.n	8007cda <__libc_init_array+0x2e>
 8007cce:	bd70      	pop	{r4, r5, r6, pc}
 8007cd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd4:	4798      	blx	r3
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7ee      	b.n	8007cb8 <__libc_init_array+0xc>
 8007cda:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cde:	4798      	blx	r3
 8007ce0:	3601      	adds	r6, #1
 8007ce2:	e7f2      	b.n	8007cca <__libc_init_array+0x1e>
 8007ce4:	08008734 	.word	0x08008734
 8007ce8:	08008734 	.word	0x08008734
 8007cec:	08008734 	.word	0x08008734
 8007cf0:	08008738 	.word	0x08008738

08007cf4 <__retarget_lock_acquire_recursive>:
 8007cf4:	4770      	bx	lr

08007cf6 <__retarget_lock_release_recursive>:
 8007cf6:	4770      	bx	lr

08007cf8 <__ssputs_r>:
 8007cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cfc:	688e      	ldr	r6, [r1, #8]
 8007cfe:	461f      	mov	r7, r3
 8007d00:	42be      	cmp	r6, r7
 8007d02:	680b      	ldr	r3, [r1, #0]
 8007d04:	4682      	mov	sl, r0
 8007d06:	460c      	mov	r4, r1
 8007d08:	4690      	mov	r8, r2
 8007d0a:	d82c      	bhi.n	8007d66 <__ssputs_r+0x6e>
 8007d0c:	898a      	ldrh	r2, [r1, #12]
 8007d0e:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007d12:	d026      	beq.n	8007d62 <__ssputs_r+0x6a>
 8007d14:	6965      	ldr	r5, [r4, #20]
 8007d16:	6909      	ldr	r1, [r1, #16]
 8007d18:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007d1c:	eba3 0901 	sub.w	r9, r3, r1
 8007d20:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007d24:	1c7b      	adds	r3, r7, #1
 8007d26:	444b      	add	r3, r9
 8007d28:	106d      	asrs	r5, r5, #1
 8007d2a:	429d      	cmp	r5, r3
 8007d2c:	bf38      	it	cc
 8007d2e:	461d      	movcc	r5, r3
 8007d30:	0553      	lsls	r3, r2, #21
 8007d32:	d527      	bpl.n	8007d84 <__ssputs_r+0x8c>
 8007d34:	4629      	mov	r1, r5
 8007d36:	f000 f957 	bl	8007fe8 <_malloc_r>
 8007d3a:	4606      	mov	r6, r0
 8007d3c:	b360      	cbz	r0, 8007d98 <__ssputs_r+0xa0>
 8007d3e:	6921      	ldr	r1, [r4, #16]
 8007d40:	464a      	mov	r2, r9
 8007d42:	f000 fbc7 	bl	80084d4 <memcpy>
 8007d46:	89a3      	ldrh	r3, [r4, #12]
 8007d48:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d4c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d50:	81a3      	strh	r3, [r4, #12]
 8007d52:	6126      	str	r6, [r4, #16]
 8007d54:	6165      	str	r5, [r4, #20]
 8007d56:	444e      	add	r6, r9
 8007d58:	eba5 0509 	sub.w	r5, r5, r9
 8007d5c:	6026      	str	r6, [r4, #0]
 8007d5e:	60a5      	str	r5, [r4, #8]
 8007d60:	463e      	mov	r6, r7
 8007d62:	42be      	cmp	r6, r7
 8007d64:	d900      	bls.n	8007d68 <__ssputs_r+0x70>
 8007d66:	463e      	mov	r6, r7
 8007d68:	6820      	ldr	r0, [r4, #0]
 8007d6a:	4632      	mov	r2, r6
 8007d6c:	4641      	mov	r1, r8
 8007d6e:	f000 fb86 	bl	800847e <memmove>
 8007d72:	68a3      	ldr	r3, [r4, #8]
 8007d74:	1b9b      	subs	r3, r3, r6
 8007d76:	60a3      	str	r3, [r4, #8]
 8007d78:	6823      	ldr	r3, [r4, #0]
 8007d7a:	4433      	add	r3, r6
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	2000      	movs	r0, #0
 8007d80:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d84:	462a      	mov	r2, r5
 8007d86:	f000 fb4b 	bl	8008420 <_realloc_r>
 8007d8a:	4606      	mov	r6, r0
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d1e0      	bne.n	8007d52 <__ssputs_r+0x5a>
 8007d90:	6921      	ldr	r1, [r4, #16]
 8007d92:	4650      	mov	r0, sl
 8007d94:	f000 fbac 	bl	80084f0 <_free_r>
 8007d98:	230c      	movs	r3, #12
 8007d9a:	f8ca 3000 	str.w	r3, [sl]
 8007d9e:	89a3      	ldrh	r3, [r4, #12]
 8007da0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007da4:	81a3      	strh	r3, [r4, #12]
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007daa:	e7e9      	b.n	8007d80 <__ssputs_r+0x88>

08007dac <_svfiprintf_r>:
 8007dac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007db0:	4698      	mov	r8, r3
 8007db2:	898b      	ldrh	r3, [r1, #12]
 8007db4:	061b      	lsls	r3, r3, #24
 8007db6:	b09d      	sub	sp, #116	; 0x74
 8007db8:	4607      	mov	r7, r0
 8007dba:	460d      	mov	r5, r1
 8007dbc:	4614      	mov	r4, r2
 8007dbe:	d50e      	bpl.n	8007dde <_svfiprintf_r+0x32>
 8007dc0:	690b      	ldr	r3, [r1, #16]
 8007dc2:	b963      	cbnz	r3, 8007dde <_svfiprintf_r+0x32>
 8007dc4:	2140      	movs	r1, #64	; 0x40
 8007dc6:	f000 f90f 	bl	8007fe8 <_malloc_r>
 8007dca:	6028      	str	r0, [r5, #0]
 8007dcc:	6128      	str	r0, [r5, #16]
 8007dce:	b920      	cbnz	r0, 8007dda <_svfiprintf_r+0x2e>
 8007dd0:	230c      	movs	r3, #12
 8007dd2:	603b      	str	r3, [r7, #0]
 8007dd4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dd8:	e0d0      	b.n	8007f7c <_svfiprintf_r+0x1d0>
 8007dda:	2340      	movs	r3, #64	; 0x40
 8007ddc:	616b      	str	r3, [r5, #20]
 8007dde:	2300      	movs	r3, #0
 8007de0:	9309      	str	r3, [sp, #36]	; 0x24
 8007de2:	2320      	movs	r3, #32
 8007de4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007de8:	f8cd 800c 	str.w	r8, [sp, #12]
 8007dec:	2330      	movs	r3, #48	; 0x30
 8007dee:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007f94 <_svfiprintf_r+0x1e8>
 8007df2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007df6:	f04f 0901 	mov.w	r9, #1
 8007dfa:	4623      	mov	r3, r4
 8007dfc:	469a      	mov	sl, r3
 8007dfe:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e02:	b10a      	cbz	r2, 8007e08 <_svfiprintf_r+0x5c>
 8007e04:	2a25      	cmp	r2, #37	; 0x25
 8007e06:	d1f9      	bne.n	8007dfc <_svfiprintf_r+0x50>
 8007e08:	ebba 0b04 	subs.w	fp, sl, r4
 8007e0c:	d00b      	beq.n	8007e26 <_svfiprintf_r+0x7a>
 8007e0e:	465b      	mov	r3, fp
 8007e10:	4622      	mov	r2, r4
 8007e12:	4629      	mov	r1, r5
 8007e14:	4638      	mov	r0, r7
 8007e16:	f7ff ff6f 	bl	8007cf8 <__ssputs_r>
 8007e1a:	3001      	adds	r0, #1
 8007e1c:	f000 80a9 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007e22:	445a      	add	r2, fp
 8007e24:	9209      	str	r2, [sp, #36]	; 0x24
 8007e26:	f89a 3000 	ldrb.w	r3, [sl]
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	f000 80a1 	beq.w	8007f72 <_svfiprintf_r+0x1c6>
 8007e30:	2300      	movs	r3, #0
 8007e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007e36:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e3a:	f10a 0a01 	add.w	sl, sl, #1
 8007e3e:	9304      	str	r3, [sp, #16]
 8007e40:	9307      	str	r3, [sp, #28]
 8007e42:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e46:	931a      	str	r3, [sp, #104]	; 0x68
 8007e48:	4654      	mov	r4, sl
 8007e4a:	2205      	movs	r2, #5
 8007e4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e50:	4850      	ldr	r0, [pc, #320]	; (8007f94 <_svfiprintf_r+0x1e8>)
 8007e52:	f7f8 fa5d 	bl	8000310 <memchr>
 8007e56:	9a04      	ldr	r2, [sp, #16]
 8007e58:	b9d8      	cbnz	r0, 8007e92 <_svfiprintf_r+0xe6>
 8007e5a:	06d0      	lsls	r0, r2, #27
 8007e5c:	bf44      	itt	mi
 8007e5e:	2320      	movmi	r3, #32
 8007e60:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e64:	0711      	lsls	r1, r2, #28
 8007e66:	bf44      	itt	mi
 8007e68:	232b      	movmi	r3, #43	; 0x2b
 8007e6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e6e:	f89a 3000 	ldrb.w	r3, [sl]
 8007e72:	2b2a      	cmp	r3, #42	; 0x2a
 8007e74:	d015      	beq.n	8007ea2 <_svfiprintf_r+0xf6>
 8007e76:	9a07      	ldr	r2, [sp, #28]
 8007e78:	4654      	mov	r4, sl
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	f04f 0c0a 	mov.w	ip, #10
 8007e80:	4621      	mov	r1, r4
 8007e82:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e86:	3b30      	subs	r3, #48	; 0x30
 8007e88:	2b09      	cmp	r3, #9
 8007e8a:	d94d      	bls.n	8007f28 <_svfiprintf_r+0x17c>
 8007e8c:	b1b0      	cbz	r0, 8007ebc <_svfiprintf_r+0x110>
 8007e8e:	9207      	str	r2, [sp, #28]
 8007e90:	e014      	b.n	8007ebc <_svfiprintf_r+0x110>
 8007e92:	eba0 0308 	sub.w	r3, r0, r8
 8007e96:	fa09 f303 	lsl.w	r3, r9, r3
 8007e9a:	4313      	orrs	r3, r2
 8007e9c:	9304      	str	r3, [sp, #16]
 8007e9e:	46a2      	mov	sl, r4
 8007ea0:	e7d2      	b.n	8007e48 <_svfiprintf_r+0x9c>
 8007ea2:	9b03      	ldr	r3, [sp, #12]
 8007ea4:	1d19      	adds	r1, r3, #4
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	9103      	str	r1, [sp, #12]
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	bfbb      	ittet	lt
 8007eae:	425b      	neglt	r3, r3
 8007eb0:	f042 0202 	orrlt.w	r2, r2, #2
 8007eb4:	9307      	strge	r3, [sp, #28]
 8007eb6:	9307      	strlt	r3, [sp, #28]
 8007eb8:	bfb8      	it	lt
 8007eba:	9204      	strlt	r2, [sp, #16]
 8007ebc:	7823      	ldrb	r3, [r4, #0]
 8007ebe:	2b2e      	cmp	r3, #46	; 0x2e
 8007ec0:	d10c      	bne.n	8007edc <_svfiprintf_r+0x130>
 8007ec2:	7863      	ldrb	r3, [r4, #1]
 8007ec4:	2b2a      	cmp	r3, #42	; 0x2a
 8007ec6:	d134      	bne.n	8007f32 <_svfiprintf_r+0x186>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	1d1a      	adds	r2, r3, #4
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	9203      	str	r2, [sp, #12]
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	bfb8      	it	lt
 8007ed4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007ed8:	3402      	adds	r4, #2
 8007eda:	9305      	str	r3, [sp, #20]
 8007edc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8007fa4 <_svfiprintf_r+0x1f8>
 8007ee0:	7821      	ldrb	r1, [r4, #0]
 8007ee2:	2203      	movs	r2, #3
 8007ee4:	4650      	mov	r0, sl
 8007ee6:	f7f8 fa13 	bl	8000310 <memchr>
 8007eea:	b138      	cbz	r0, 8007efc <_svfiprintf_r+0x150>
 8007eec:	9b04      	ldr	r3, [sp, #16]
 8007eee:	eba0 000a 	sub.w	r0, r0, sl
 8007ef2:	2240      	movs	r2, #64	; 0x40
 8007ef4:	4082      	lsls	r2, r0
 8007ef6:	4313      	orrs	r3, r2
 8007ef8:	3401      	adds	r4, #1
 8007efa:	9304      	str	r3, [sp, #16]
 8007efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f00:	4825      	ldr	r0, [pc, #148]	; (8007f98 <_svfiprintf_r+0x1ec>)
 8007f02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007f06:	2206      	movs	r2, #6
 8007f08:	f7f8 fa02 	bl	8000310 <memchr>
 8007f0c:	2800      	cmp	r0, #0
 8007f0e:	d038      	beq.n	8007f82 <_svfiprintf_r+0x1d6>
 8007f10:	4b22      	ldr	r3, [pc, #136]	; (8007f9c <_svfiprintf_r+0x1f0>)
 8007f12:	bb1b      	cbnz	r3, 8007f5c <_svfiprintf_r+0x1b0>
 8007f14:	9b03      	ldr	r3, [sp, #12]
 8007f16:	3307      	adds	r3, #7
 8007f18:	f023 0307 	bic.w	r3, r3, #7
 8007f1c:	3308      	adds	r3, #8
 8007f1e:	9303      	str	r3, [sp, #12]
 8007f20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007f22:	4433      	add	r3, r6
 8007f24:	9309      	str	r3, [sp, #36]	; 0x24
 8007f26:	e768      	b.n	8007dfa <_svfiprintf_r+0x4e>
 8007f28:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f2c:	460c      	mov	r4, r1
 8007f2e:	2001      	movs	r0, #1
 8007f30:	e7a6      	b.n	8007e80 <_svfiprintf_r+0xd4>
 8007f32:	2300      	movs	r3, #0
 8007f34:	3401      	adds	r4, #1
 8007f36:	9305      	str	r3, [sp, #20]
 8007f38:	4619      	mov	r1, r3
 8007f3a:	f04f 0c0a 	mov.w	ip, #10
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f44:	3a30      	subs	r2, #48	; 0x30
 8007f46:	2a09      	cmp	r2, #9
 8007f48:	d903      	bls.n	8007f52 <_svfiprintf_r+0x1a6>
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0c6      	beq.n	8007edc <_svfiprintf_r+0x130>
 8007f4e:	9105      	str	r1, [sp, #20]
 8007f50:	e7c4      	b.n	8007edc <_svfiprintf_r+0x130>
 8007f52:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f56:	4604      	mov	r4, r0
 8007f58:	2301      	movs	r3, #1
 8007f5a:	e7f0      	b.n	8007f3e <_svfiprintf_r+0x192>
 8007f5c:	ab03      	add	r3, sp, #12
 8007f5e:	9300      	str	r3, [sp, #0]
 8007f60:	462a      	mov	r2, r5
 8007f62:	4b0f      	ldr	r3, [pc, #60]	; (8007fa0 <_svfiprintf_r+0x1f4>)
 8007f64:	a904      	add	r1, sp, #16
 8007f66:	4638      	mov	r0, r7
 8007f68:	f3af 8000 	nop.w
 8007f6c:	1c42      	adds	r2, r0, #1
 8007f6e:	4606      	mov	r6, r0
 8007f70:	d1d6      	bne.n	8007f20 <_svfiprintf_r+0x174>
 8007f72:	89ab      	ldrh	r3, [r5, #12]
 8007f74:	065b      	lsls	r3, r3, #25
 8007f76:	f53f af2d 	bmi.w	8007dd4 <_svfiprintf_r+0x28>
 8007f7a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f7c:	b01d      	add	sp, #116	; 0x74
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	ab03      	add	r3, sp, #12
 8007f84:	9300      	str	r3, [sp, #0]
 8007f86:	462a      	mov	r2, r5
 8007f88:	4b05      	ldr	r3, [pc, #20]	; (8007fa0 <_svfiprintf_r+0x1f4>)
 8007f8a:	a904      	add	r1, sp, #16
 8007f8c:	4638      	mov	r0, r7
 8007f8e:	f000 f919 	bl	80081c4 <_printf_i>
 8007f92:	e7eb      	b.n	8007f6c <_svfiprintf_r+0x1c0>
 8007f94:	080086f9 	.word	0x080086f9
 8007f98:	08008703 	.word	0x08008703
 8007f9c:	00000000 	.word	0x00000000
 8007fa0:	08007cf9 	.word	0x08007cf9
 8007fa4:	080086ff 	.word	0x080086ff

08007fa8 <sbrk_aligned>:
 8007fa8:	b570      	push	{r4, r5, r6, lr}
 8007faa:	4e0e      	ldr	r6, [pc, #56]	; (8007fe4 <sbrk_aligned+0x3c>)
 8007fac:	460c      	mov	r4, r1
 8007fae:	6831      	ldr	r1, [r6, #0]
 8007fb0:	4605      	mov	r5, r0
 8007fb2:	b911      	cbnz	r1, 8007fba <sbrk_aligned+0x12>
 8007fb4:	f000 fa7e 	bl	80084b4 <_sbrk_r>
 8007fb8:	6030      	str	r0, [r6, #0]
 8007fba:	4621      	mov	r1, r4
 8007fbc:	4628      	mov	r0, r5
 8007fbe:	f000 fa79 	bl	80084b4 <_sbrk_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	d00a      	beq.n	8007fdc <sbrk_aligned+0x34>
 8007fc6:	1cc4      	adds	r4, r0, #3
 8007fc8:	f024 0403 	bic.w	r4, r4, #3
 8007fcc:	42a0      	cmp	r0, r4
 8007fce:	d007      	beq.n	8007fe0 <sbrk_aligned+0x38>
 8007fd0:	1a21      	subs	r1, r4, r0
 8007fd2:	4628      	mov	r0, r5
 8007fd4:	f000 fa6e 	bl	80084b4 <_sbrk_r>
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d101      	bne.n	8007fe0 <sbrk_aligned+0x38>
 8007fdc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007fe0:	4620      	mov	r0, r4
 8007fe2:	bd70      	pop	{r4, r5, r6, pc}
 8007fe4:	24000434 	.word	0x24000434

08007fe8 <_malloc_r>:
 8007fe8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007fec:	1ccd      	adds	r5, r1, #3
 8007fee:	f025 0503 	bic.w	r5, r5, #3
 8007ff2:	3508      	adds	r5, #8
 8007ff4:	2d0c      	cmp	r5, #12
 8007ff6:	bf38      	it	cc
 8007ff8:	250c      	movcc	r5, #12
 8007ffa:	2d00      	cmp	r5, #0
 8007ffc:	4607      	mov	r7, r0
 8007ffe:	db01      	blt.n	8008004 <_malloc_r+0x1c>
 8008000:	42a9      	cmp	r1, r5
 8008002:	d905      	bls.n	8008010 <_malloc_r+0x28>
 8008004:	230c      	movs	r3, #12
 8008006:	603b      	str	r3, [r7, #0]
 8008008:	2600      	movs	r6, #0
 800800a:	4630      	mov	r0, r6
 800800c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008010:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80080e4 <_malloc_r+0xfc>
 8008014:	f000 f9f8 	bl	8008408 <__malloc_lock>
 8008018:	f8d8 3000 	ldr.w	r3, [r8]
 800801c:	461c      	mov	r4, r3
 800801e:	bb5c      	cbnz	r4, 8008078 <_malloc_r+0x90>
 8008020:	4629      	mov	r1, r5
 8008022:	4638      	mov	r0, r7
 8008024:	f7ff ffc0 	bl	8007fa8 <sbrk_aligned>
 8008028:	1c43      	adds	r3, r0, #1
 800802a:	4604      	mov	r4, r0
 800802c:	d155      	bne.n	80080da <_malloc_r+0xf2>
 800802e:	f8d8 4000 	ldr.w	r4, [r8]
 8008032:	4626      	mov	r6, r4
 8008034:	2e00      	cmp	r6, #0
 8008036:	d145      	bne.n	80080c4 <_malloc_r+0xdc>
 8008038:	2c00      	cmp	r4, #0
 800803a:	d048      	beq.n	80080ce <_malloc_r+0xe6>
 800803c:	6823      	ldr	r3, [r4, #0]
 800803e:	4631      	mov	r1, r6
 8008040:	4638      	mov	r0, r7
 8008042:	eb04 0903 	add.w	r9, r4, r3
 8008046:	f000 fa35 	bl	80084b4 <_sbrk_r>
 800804a:	4581      	cmp	r9, r0
 800804c:	d13f      	bne.n	80080ce <_malloc_r+0xe6>
 800804e:	6821      	ldr	r1, [r4, #0]
 8008050:	1a6d      	subs	r5, r5, r1
 8008052:	4629      	mov	r1, r5
 8008054:	4638      	mov	r0, r7
 8008056:	f7ff ffa7 	bl	8007fa8 <sbrk_aligned>
 800805a:	3001      	adds	r0, #1
 800805c:	d037      	beq.n	80080ce <_malloc_r+0xe6>
 800805e:	6823      	ldr	r3, [r4, #0]
 8008060:	442b      	add	r3, r5
 8008062:	6023      	str	r3, [r4, #0]
 8008064:	f8d8 3000 	ldr.w	r3, [r8]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d038      	beq.n	80080de <_malloc_r+0xf6>
 800806c:	685a      	ldr	r2, [r3, #4]
 800806e:	42a2      	cmp	r2, r4
 8008070:	d12b      	bne.n	80080ca <_malloc_r+0xe2>
 8008072:	2200      	movs	r2, #0
 8008074:	605a      	str	r2, [r3, #4]
 8008076:	e00f      	b.n	8008098 <_malloc_r+0xb0>
 8008078:	6822      	ldr	r2, [r4, #0]
 800807a:	1b52      	subs	r2, r2, r5
 800807c:	d41f      	bmi.n	80080be <_malloc_r+0xd6>
 800807e:	2a0b      	cmp	r2, #11
 8008080:	d917      	bls.n	80080b2 <_malloc_r+0xca>
 8008082:	1961      	adds	r1, r4, r5
 8008084:	42a3      	cmp	r3, r4
 8008086:	6025      	str	r5, [r4, #0]
 8008088:	bf18      	it	ne
 800808a:	6059      	strne	r1, [r3, #4]
 800808c:	6863      	ldr	r3, [r4, #4]
 800808e:	bf08      	it	eq
 8008090:	f8c8 1000 	streq.w	r1, [r8]
 8008094:	5162      	str	r2, [r4, r5]
 8008096:	604b      	str	r3, [r1, #4]
 8008098:	4638      	mov	r0, r7
 800809a:	f104 060b 	add.w	r6, r4, #11
 800809e:	f000 f9b9 	bl	8008414 <__malloc_unlock>
 80080a2:	f026 0607 	bic.w	r6, r6, #7
 80080a6:	1d23      	adds	r3, r4, #4
 80080a8:	1af2      	subs	r2, r6, r3
 80080aa:	d0ae      	beq.n	800800a <_malloc_r+0x22>
 80080ac:	1b9b      	subs	r3, r3, r6
 80080ae:	50a3      	str	r3, [r4, r2]
 80080b0:	e7ab      	b.n	800800a <_malloc_r+0x22>
 80080b2:	42a3      	cmp	r3, r4
 80080b4:	6862      	ldr	r2, [r4, #4]
 80080b6:	d1dd      	bne.n	8008074 <_malloc_r+0x8c>
 80080b8:	f8c8 2000 	str.w	r2, [r8]
 80080bc:	e7ec      	b.n	8008098 <_malloc_r+0xb0>
 80080be:	4623      	mov	r3, r4
 80080c0:	6864      	ldr	r4, [r4, #4]
 80080c2:	e7ac      	b.n	800801e <_malloc_r+0x36>
 80080c4:	4634      	mov	r4, r6
 80080c6:	6876      	ldr	r6, [r6, #4]
 80080c8:	e7b4      	b.n	8008034 <_malloc_r+0x4c>
 80080ca:	4613      	mov	r3, r2
 80080cc:	e7cc      	b.n	8008068 <_malloc_r+0x80>
 80080ce:	230c      	movs	r3, #12
 80080d0:	603b      	str	r3, [r7, #0]
 80080d2:	4638      	mov	r0, r7
 80080d4:	f000 f99e 	bl	8008414 <__malloc_unlock>
 80080d8:	e797      	b.n	800800a <_malloc_r+0x22>
 80080da:	6025      	str	r5, [r4, #0]
 80080dc:	e7dc      	b.n	8008098 <_malloc_r+0xb0>
 80080de:	605b      	str	r3, [r3, #4]
 80080e0:	deff      	udf	#255	; 0xff
 80080e2:	bf00      	nop
 80080e4:	24000430 	.word	0x24000430

080080e8 <_printf_common>:
 80080e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80080ec:	4616      	mov	r6, r2
 80080ee:	4699      	mov	r9, r3
 80080f0:	688a      	ldr	r2, [r1, #8]
 80080f2:	690b      	ldr	r3, [r1, #16]
 80080f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80080f8:	4293      	cmp	r3, r2
 80080fa:	bfb8      	it	lt
 80080fc:	4613      	movlt	r3, r2
 80080fe:	6033      	str	r3, [r6, #0]
 8008100:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008104:	4607      	mov	r7, r0
 8008106:	460c      	mov	r4, r1
 8008108:	b10a      	cbz	r2, 800810e <_printf_common+0x26>
 800810a:	3301      	adds	r3, #1
 800810c:	6033      	str	r3, [r6, #0]
 800810e:	6823      	ldr	r3, [r4, #0]
 8008110:	0699      	lsls	r1, r3, #26
 8008112:	bf42      	ittt	mi
 8008114:	6833      	ldrmi	r3, [r6, #0]
 8008116:	3302      	addmi	r3, #2
 8008118:	6033      	strmi	r3, [r6, #0]
 800811a:	6825      	ldr	r5, [r4, #0]
 800811c:	f015 0506 	ands.w	r5, r5, #6
 8008120:	d106      	bne.n	8008130 <_printf_common+0x48>
 8008122:	f104 0a19 	add.w	sl, r4, #25
 8008126:	68e3      	ldr	r3, [r4, #12]
 8008128:	6832      	ldr	r2, [r6, #0]
 800812a:	1a9b      	subs	r3, r3, r2
 800812c:	42ab      	cmp	r3, r5
 800812e:	dc26      	bgt.n	800817e <_printf_common+0x96>
 8008130:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008134:	1e13      	subs	r3, r2, #0
 8008136:	6822      	ldr	r2, [r4, #0]
 8008138:	bf18      	it	ne
 800813a:	2301      	movne	r3, #1
 800813c:	0692      	lsls	r2, r2, #26
 800813e:	d42b      	bmi.n	8008198 <_printf_common+0xb0>
 8008140:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008144:	4649      	mov	r1, r9
 8008146:	4638      	mov	r0, r7
 8008148:	47c0      	blx	r8
 800814a:	3001      	adds	r0, #1
 800814c:	d01e      	beq.n	800818c <_printf_common+0xa4>
 800814e:	6823      	ldr	r3, [r4, #0]
 8008150:	6922      	ldr	r2, [r4, #16]
 8008152:	f003 0306 	and.w	r3, r3, #6
 8008156:	2b04      	cmp	r3, #4
 8008158:	bf02      	ittt	eq
 800815a:	68e5      	ldreq	r5, [r4, #12]
 800815c:	6833      	ldreq	r3, [r6, #0]
 800815e:	1aed      	subeq	r5, r5, r3
 8008160:	68a3      	ldr	r3, [r4, #8]
 8008162:	bf0c      	ite	eq
 8008164:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008168:	2500      	movne	r5, #0
 800816a:	4293      	cmp	r3, r2
 800816c:	bfc4      	itt	gt
 800816e:	1a9b      	subgt	r3, r3, r2
 8008170:	18ed      	addgt	r5, r5, r3
 8008172:	2600      	movs	r6, #0
 8008174:	341a      	adds	r4, #26
 8008176:	42b5      	cmp	r5, r6
 8008178:	d11a      	bne.n	80081b0 <_printf_common+0xc8>
 800817a:	2000      	movs	r0, #0
 800817c:	e008      	b.n	8008190 <_printf_common+0xa8>
 800817e:	2301      	movs	r3, #1
 8008180:	4652      	mov	r2, sl
 8008182:	4649      	mov	r1, r9
 8008184:	4638      	mov	r0, r7
 8008186:	47c0      	blx	r8
 8008188:	3001      	adds	r0, #1
 800818a:	d103      	bne.n	8008194 <_printf_common+0xac>
 800818c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008190:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008194:	3501      	adds	r5, #1
 8008196:	e7c6      	b.n	8008126 <_printf_common+0x3e>
 8008198:	18e1      	adds	r1, r4, r3
 800819a:	1c5a      	adds	r2, r3, #1
 800819c:	2030      	movs	r0, #48	; 0x30
 800819e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80081a2:	4422      	add	r2, r4
 80081a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80081a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80081ac:	3302      	adds	r3, #2
 80081ae:	e7c7      	b.n	8008140 <_printf_common+0x58>
 80081b0:	2301      	movs	r3, #1
 80081b2:	4622      	mov	r2, r4
 80081b4:	4649      	mov	r1, r9
 80081b6:	4638      	mov	r0, r7
 80081b8:	47c0      	blx	r8
 80081ba:	3001      	adds	r0, #1
 80081bc:	d0e6      	beq.n	800818c <_printf_common+0xa4>
 80081be:	3601      	adds	r6, #1
 80081c0:	e7d9      	b.n	8008176 <_printf_common+0x8e>
	...

080081c4 <_printf_i>:
 80081c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80081c8:	7e0f      	ldrb	r7, [r1, #24]
 80081ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80081cc:	2f78      	cmp	r7, #120	; 0x78
 80081ce:	4691      	mov	r9, r2
 80081d0:	4680      	mov	r8, r0
 80081d2:	460c      	mov	r4, r1
 80081d4:	469a      	mov	sl, r3
 80081d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80081da:	d807      	bhi.n	80081ec <_printf_i+0x28>
 80081dc:	2f62      	cmp	r7, #98	; 0x62
 80081de:	d80a      	bhi.n	80081f6 <_printf_i+0x32>
 80081e0:	2f00      	cmp	r7, #0
 80081e2:	f000 80d4 	beq.w	800838e <_printf_i+0x1ca>
 80081e6:	2f58      	cmp	r7, #88	; 0x58
 80081e8:	f000 80c0 	beq.w	800836c <_printf_i+0x1a8>
 80081ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80081f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80081f4:	e03a      	b.n	800826c <_printf_i+0xa8>
 80081f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80081fa:	2b15      	cmp	r3, #21
 80081fc:	d8f6      	bhi.n	80081ec <_printf_i+0x28>
 80081fe:	a101      	add	r1, pc, #4	; (adr r1, 8008204 <_printf_i+0x40>)
 8008200:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008204:	0800825d 	.word	0x0800825d
 8008208:	08008271 	.word	0x08008271
 800820c:	080081ed 	.word	0x080081ed
 8008210:	080081ed 	.word	0x080081ed
 8008214:	080081ed 	.word	0x080081ed
 8008218:	080081ed 	.word	0x080081ed
 800821c:	08008271 	.word	0x08008271
 8008220:	080081ed 	.word	0x080081ed
 8008224:	080081ed 	.word	0x080081ed
 8008228:	080081ed 	.word	0x080081ed
 800822c:	080081ed 	.word	0x080081ed
 8008230:	08008375 	.word	0x08008375
 8008234:	0800829d 	.word	0x0800829d
 8008238:	0800832f 	.word	0x0800832f
 800823c:	080081ed 	.word	0x080081ed
 8008240:	080081ed 	.word	0x080081ed
 8008244:	08008397 	.word	0x08008397
 8008248:	080081ed 	.word	0x080081ed
 800824c:	0800829d 	.word	0x0800829d
 8008250:	080081ed 	.word	0x080081ed
 8008254:	080081ed 	.word	0x080081ed
 8008258:	08008337 	.word	0x08008337
 800825c:	682b      	ldr	r3, [r5, #0]
 800825e:	1d1a      	adds	r2, r3, #4
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	602a      	str	r2, [r5, #0]
 8008264:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008268:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800826c:	2301      	movs	r3, #1
 800826e:	e09f      	b.n	80083b0 <_printf_i+0x1ec>
 8008270:	6820      	ldr	r0, [r4, #0]
 8008272:	682b      	ldr	r3, [r5, #0]
 8008274:	0607      	lsls	r7, r0, #24
 8008276:	f103 0104 	add.w	r1, r3, #4
 800827a:	6029      	str	r1, [r5, #0]
 800827c:	d501      	bpl.n	8008282 <_printf_i+0xbe>
 800827e:	681e      	ldr	r6, [r3, #0]
 8008280:	e003      	b.n	800828a <_printf_i+0xc6>
 8008282:	0646      	lsls	r6, r0, #25
 8008284:	d5fb      	bpl.n	800827e <_printf_i+0xba>
 8008286:	f9b3 6000 	ldrsh.w	r6, [r3]
 800828a:	2e00      	cmp	r6, #0
 800828c:	da03      	bge.n	8008296 <_printf_i+0xd2>
 800828e:	232d      	movs	r3, #45	; 0x2d
 8008290:	4276      	negs	r6, r6
 8008292:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008296:	485a      	ldr	r0, [pc, #360]	; (8008400 <_printf_i+0x23c>)
 8008298:	230a      	movs	r3, #10
 800829a:	e012      	b.n	80082c2 <_printf_i+0xfe>
 800829c:	682b      	ldr	r3, [r5, #0]
 800829e:	6820      	ldr	r0, [r4, #0]
 80082a0:	1d19      	adds	r1, r3, #4
 80082a2:	6029      	str	r1, [r5, #0]
 80082a4:	0605      	lsls	r5, r0, #24
 80082a6:	d501      	bpl.n	80082ac <_printf_i+0xe8>
 80082a8:	681e      	ldr	r6, [r3, #0]
 80082aa:	e002      	b.n	80082b2 <_printf_i+0xee>
 80082ac:	0641      	lsls	r1, r0, #25
 80082ae:	d5fb      	bpl.n	80082a8 <_printf_i+0xe4>
 80082b0:	881e      	ldrh	r6, [r3, #0]
 80082b2:	4853      	ldr	r0, [pc, #332]	; (8008400 <_printf_i+0x23c>)
 80082b4:	2f6f      	cmp	r7, #111	; 0x6f
 80082b6:	bf0c      	ite	eq
 80082b8:	2308      	moveq	r3, #8
 80082ba:	230a      	movne	r3, #10
 80082bc:	2100      	movs	r1, #0
 80082be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80082c2:	6865      	ldr	r5, [r4, #4]
 80082c4:	60a5      	str	r5, [r4, #8]
 80082c6:	2d00      	cmp	r5, #0
 80082c8:	bfa2      	ittt	ge
 80082ca:	6821      	ldrge	r1, [r4, #0]
 80082cc:	f021 0104 	bicge.w	r1, r1, #4
 80082d0:	6021      	strge	r1, [r4, #0]
 80082d2:	b90e      	cbnz	r6, 80082d8 <_printf_i+0x114>
 80082d4:	2d00      	cmp	r5, #0
 80082d6:	d04b      	beq.n	8008370 <_printf_i+0x1ac>
 80082d8:	4615      	mov	r5, r2
 80082da:	fbb6 f1f3 	udiv	r1, r6, r3
 80082de:	fb03 6711 	mls	r7, r3, r1, r6
 80082e2:	5dc7      	ldrb	r7, [r0, r7]
 80082e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80082e8:	4637      	mov	r7, r6
 80082ea:	42bb      	cmp	r3, r7
 80082ec:	460e      	mov	r6, r1
 80082ee:	d9f4      	bls.n	80082da <_printf_i+0x116>
 80082f0:	2b08      	cmp	r3, #8
 80082f2:	d10b      	bne.n	800830c <_printf_i+0x148>
 80082f4:	6823      	ldr	r3, [r4, #0]
 80082f6:	07de      	lsls	r6, r3, #31
 80082f8:	d508      	bpl.n	800830c <_printf_i+0x148>
 80082fa:	6923      	ldr	r3, [r4, #16]
 80082fc:	6861      	ldr	r1, [r4, #4]
 80082fe:	4299      	cmp	r1, r3
 8008300:	bfde      	ittt	le
 8008302:	2330      	movle	r3, #48	; 0x30
 8008304:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008308:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800830c:	1b52      	subs	r2, r2, r5
 800830e:	6122      	str	r2, [r4, #16]
 8008310:	f8cd a000 	str.w	sl, [sp]
 8008314:	464b      	mov	r3, r9
 8008316:	aa03      	add	r2, sp, #12
 8008318:	4621      	mov	r1, r4
 800831a:	4640      	mov	r0, r8
 800831c:	f7ff fee4 	bl	80080e8 <_printf_common>
 8008320:	3001      	adds	r0, #1
 8008322:	d14a      	bne.n	80083ba <_printf_i+0x1f6>
 8008324:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008328:	b004      	add	sp, #16
 800832a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800832e:	6823      	ldr	r3, [r4, #0]
 8008330:	f043 0320 	orr.w	r3, r3, #32
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	4833      	ldr	r0, [pc, #204]	; (8008404 <_printf_i+0x240>)
 8008338:	2778      	movs	r7, #120	; 0x78
 800833a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800833e:	6823      	ldr	r3, [r4, #0]
 8008340:	6829      	ldr	r1, [r5, #0]
 8008342:	061f      	lsls	r7, r3, #24
 8008344:	f851 6b04 	ldr.w	r6, [r1], #4
 8008348:	d402      	bmi.n	8008350 <_printf_i+0x18c>
 800834a:	065f      	lsls	r7, r3, #25
 800834c:	bf48      	it	mi
 800834e:	b2b6      	uxthmi	r6, r6
 8008350:	07df      	lsls	r7, r3, #31
 8008352:	bf48      	it	mi
 8008354:	f043 0320 	orrmi.w	r3, r3, #32
 8008358:	6029      	str	r1, [r5, #0]
 800835a:	bf48      	it	mi
 800835c:	6023      	strmi	r3, [r4, #0]
 800835e:	b91e      	cbnz	r6, 8008368 <_printf_i+0x1a4>
 8008360:	6823      	ldr	r3, [r4, #0]
 8008362:	f023 0320 	bic.w	r3, r3, #32
 8008366:	6023      	str	r3, [r4, #0]
 8008368:	2310      	movs	r3, #16
 800836a:	e7a7      	b.n	80082bc <_printf_i+0xf8>
 800836c:	4824      	ldr	r0, [pc, #144]	; (8008400 <_printf_i+0x23c>)
 800836e:	e7e4      	b.n	800833a <_printf_i+0x176>
 8008370:	4615      	mov	r5, r2
 8008372:	e7bd      	b.n	80082f0 <_printf_i+0x12c>
 8008374:	682b      	ldr	r3, [r5, #0]
 8008376:	6826      	ldr	r6, [r4, #0]
 8008378:	6961      	ldr	r1, [r4, #20]
 800837a:	1d18      	adds	r0, r3, #4
 800837c:	6028      	str	r0, [r5, #0]
 800837e:	0635      	lsls	r5, r6, #24
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	d501      	bpl.n	8008388 <_printf_i+0x1c4>
 8008384:	6019      	str	r1, [r3, #0]
 8008386:	e002      	b.n	800838e <_printf_i+0x1ca>
 8008388:	0670      	lsls	r0, r6, #25
 800838a:	d5fb      	bpl.n	8008384 <_printf_i+0x1c0>
 800838c:	8019      	strh	r1, [r3, #0]
 800838e:	2300      	movs	r3, #0
 8008390:	6123      	str	r3, [r4, #16]
 8008392:	4615      	mov	r5, r2
 8008394:	e7bc      	b.n	8008310 <_printf_i+0x14c>
 8008396:	682b      	ldr	r3, [r5, #0]
 8008398:	1d1a      	adds	r2, r3, #4
 800839a:	602a      	str	r2, [r5, #0]
 800839c:	681d      	ldr	r5, [r3, #0]
 800839e:	6862      	ldr	r2, [r4, #4]
 80083a0:	2100      	movs	r1, #0
 80083a2:	4628      	mov	r0, r5
 80083a4:	f7f7 ffb4 	bl	8000310 <memchr>
 80083a8:	b108      	cbz	r0, 80083ae <_printf_i+0x1ea>
 80083aa:	1b40      	subs	r0, r0, r5
 80083ac:	6060      	str	r0, [r4, #4]
 80083ae:	6863      	ldr	r3, [r4, #4]
 80083b0:	6123      	str	r3, [r4, #16]
 80083b2:	2300      	movs	r3, #0
 80083b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80083b8:	e7aa      	b.n	8008310 <_printf_i+0x14c>
 80083ba:	6923      	ldr	r3, [r4, #16]
 80083bc:	462a      	mov	r2, r5
 80083be:	4649      	mov	r1, r9
 80083c0:	4640      	mov	r0, r8
 80083c2:	47d0      	blx	sl
 80083c4:	3001      	adds	r0, #1
 80083c6:	d0ad      	beq.n	8008324 <_printf_i+0x160>
 80083c8:	6823      	ldr	r3, [r4, #0]
 80083ca:	079b      	lsls	r3, r3, #30
 80083cc:	d413      	bmi.n	80083f6 <_printf_i+0x232>
 80083ce:	68e0      	ldr	r0, [r4, #12]
 80083d0:	9b03      	ldr	r3, [sp, #12]
 80083d2:	4298      	cmp	r0, r3
 80083d4:	bfb8      	it	lt
 80083d6:	4618      	movlt	r0, r3
 80083d8:	e7a6      	b.n	8008328 <_printf_i+0x164>
 80083da:	2301      	movs	r3, #1
 80083dc:	4632      	mov	r2, r6
 80083de:	4649      	mov	r1, r9
 80083e0:	4640      	mov	r0, r8
 80083e2:	47d0      	blx	sl
 80083e4:	3001      	adds	r0, #1
 80083e6:	d09d      	beq.n	8008324 <_printf_i+0x160>
 80083e8:	3501      	adds	r5, #1
 80083ea:	68e3      	ldr	r3, [r4, #12]
 80083ec:	9903      	ldr	r1, [sp, #12]
 80083ee:	1a5b      	subs	r3, r3, r1
 80083f0:	42ab      	cmp	r3, r5
 80083f2:	dcf2      	bgt.n	80083da <_printf_i+0x216>
 80083f4:	e7eb      	b.n	80083ce <_printf_i+0x20a>
 80083f6:	2500      	movs	r5, #0
 80083f8:	f104 0619 	add.w	r6, r4, #25
 80083fc:	e7f5      	b.n	80083ea <_printf_i+0x226>
 80083fe:	bf00      	nop
 8008400:	0800870a 	.word	0x0800870a
 8008404:	0800871b 	.word	0x0800871b

08008408 <__malloc_lock>:
 8008408:	4801      	ldr	r0, [pc, #4]	; (8008410 <__malloc_lock+0x8>)
 800840a:	f7ff bc73 	b.w	8007cf4 <__retarget_lock_acquire_recursive>
 800840e:	bf00      	nop
 8008410:	2400042c 	.word	0x2400042c

08008414 <__malloc_unlock>:
 8008414:	4801      	ldr	r0, [pc, #4]	; (800841c <__malloc_unlock+0x8>)
 8008416:	f7ff bc6e 	b.w	8007cf6 <__retarget_lock_release_recursive>
 800841a:	bf00      	nop
 800841c:	2400042c 	.word	0x2400042c

08008420 <_realloc_r>:
 8008420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008424:	4680      	mov	r8, r0
 8008426:	4614      	mov	r4, r2
 8008428:	460e      	mov	r6, r1
 800842a:	b921      	cbnz	r1, 8008436 <_realloc_r+0x16>
 800842c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008430:	4611      	mov	r1, r2
 8008432:	f7ff bdd9 	b.w	8007fe8 <_malloc_r>
 8008436:	b92a      	cbnz	r2, 8008444 <_realloc_r+0x24>
 8008438:	f000 f85a 	bl	80084f0 <_free_r>
 800843c:	4625      	mov	r5, r4
 800843e:	4628      	mov	r0, r5
 8008440:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008444:	f000 f8a0 	bl	8008588 <_malloc_usable_size_r>
 8008448:	4284      	cmp	r4, r0
 800844a:	4607      	mov	r7, r0
 800844c:	d802      	bhi.n	8008454 <_realloc_r+0x34>
 800844e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008452:	d812      	bhi.n	800847a <_realloc_r+0x5a>
 8008454:	4621      	mov	r1, r4
 8008456:	4640      	mov	r0, r8
 8008458:	f7ff fdc6 	bl	8007fe8 <_malloc_r>
 800845c:	4605      	mov	r5, r0
 800845e:	2800      	cmp	r0, #0
 8008460:	d0ed      	beq.n	800843e <_realloc_r+0x1e>
 8008462:	42bc      	cmp	r4, r7
 8008464:	4622      	mov	r2, r4
 8008466:	4631      	mov	r1, r6
 8008468:	bf28      	it	cs
 800846a:	463a      	movcs	r2, r7
 800846c:	f000 f832 	bl	80084d4 <memcpy>
 8008470:	4631      	mov	r1, r6
 8008472:	4640      	mov	r0, r8
 8008474:	f000 f83c 	bl	80084f0 <_free_r>
 8008478:	e7e1      	b.n	800843e <_realloc_r+0x1e>
 800847a:	4635      	mov	r5, r6
 800847c:	e7df      	b.n	800843e <_realloc_r+0x1e>

0800847e <memmove>:
 800847e:	4288      	cmp	r0, r1
 8008480:	b510      	push	{r4, lr}
 8008482:	eb01 0402 	add.w	r4, r1, r2
 8008486:	d902      	bls.n	800848e <memmove+0x10>
 8008488:	4284      	cmp	r4, r0
 800848a:	4623      	mov	r3, r4
 800848c:	d807      	bhi.n	800849e <memmove+0x20>
 800848e:	1e43      	subs	r3, r0, #1
 8008490:	42a1      	cmp	r1, r4
 8008492:	d008      	beq.n	80084a6 <memmove+0x28>
 8008494:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008498:	f803 2f01 	strb.w	r2, [r3, #1]!
 800849c:	e7f8      	b.n	8008490 <memmove+0x12>
 800849e:	4402      	add	r2, r0
 80084a0:	4601      	mov	r1, r0
 80084a2:	428a      	cmp	r2, r1
 80084a4:	d100      	bne.n	80084a8 <memmove+0x2a>
 80084a6:	bd10      	pop	{r4, pc}
 80084a8:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80084ac:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80084b0:	e7f7      	b.n	80084a2 <memmove+0x24>
	...

080084b4 <_sbrk_r>:
 80084b4:	b538      	push	{r3, r4, r5, lr}
 80084b6:	4d06      	ldr	r5, [pc, #24]	; (80084d0 <_sbrk_r+0x1c>)
 80084b8:	2300      	movs	r3, #0
 80084ba:	4604      	mov	r4, r0
 80084bc:	4608      	mov	r0, r1
 80084be:	602b      	str	r3, [r5, #0]
 80084c0:	f7f9 f882 	bl	80015c8 <_sbrk>
 80084c4:	1c43      	adds	r3, r0, #1
 80084c6:	d102      	bne.n	80084ce <_sbrk_r+0x1a>
 80084c8:	682b      	ldr	r3, [r5, #0]
 80084ca:	b103      	cbz	r3, 80084ce <_sbrk_r+0x1a>
 80084cc:	6023      	str	r3, [r4, #0]
 80084ce:	bd38      	pop	{r3, r4, r5, pc}
 80084d0:	24000438 	.word	0x24000438

080084d4 <memcpy>:
 80084d4:	440a      	add	r2, r1
 80084d6:	4291      	cmp	r1, r2
 80084d8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80084dc:	d100      	bne.n	80084e0 <memcpy+0xc>
 80084de:	4770      	bx	lr
 80084e0:	b510      	push	{r4, lr}
 80084e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084ea:	4291      	cmp	r1, r2
 80084ec:	d1f9      	bne.n	80084e2 <memcpy+0xe>
 80084ee:	bd10      	pop	{r4, pc}

080084f0 <_free_r>:
 80084f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80084f2:	2900      	cmp	r1, #0
 80084f4:	d044      	beq.n	8008580 <_free_r+0x90>
 80084f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084fa:	9001      	str	r0, [sp, #4]
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008502:	bfb8      	it	lt
 8008504:	18e4      	addlt	r4, r4, r3
 8008506:	f7ff ff7f 	bl	8008408 <__malloc_lock>
 800850a:	4a1e      	ldr	r2, [pc, #120]	; (8008584 <_free_r+0x94>)
 800850c:	9801      	ldr	r0, [sp, #4]
 800850e:	6813      	ldr	r3, [r2, #0]
 8008510:	b933      	cbnz	r3, 8008520 <_free_r+0x30>
 8008512:	6063      	str	r3, [r4, #4]
 8008514:	6014      	str	r4, [r2, #0]
 8008516:	b003      	add	sp, #12
 8008518:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800851c:	f7ff bf7a 	b.w	8008414 <__malloc_unlock>
 8008520:	42a3      	cmp	r3, r4
 8008522:	d908      	bls.n	8008536 <_free_r+0x46>
 8008524:	6825      	ldr	r5, [r4, #0]
 8008526:	1961      	adds	r1, r4, r5
 8008528:	428b      	cmp	r3, r1
 800852a:	bf01      	itttt	eq
 800852c:	6819      	ldreq	r1, [r3, #0]
 800852e:	685b      	ldreq	r3, [r3, #4]
 8008530:	1949      	addeq	r1, r1, r5
 8008532:	6021      	streq	r1, [r4, #0]
 8008534:	e7ed      	b.n	8008512 <_free_r+0x22>
 8008536:	461a      	mov	r2, r3
 8008538:	685b      	ldr	r3, [r3, #4]
 800853a:	b10b      	cbz	r3, 8008540 <_free_r+0x50>
 800853c:	42a3      	cmp	r3, r4
 800853e:	d9fa      	bls.n	8008536 <_free_r+0x46>
 8008540:	6811      	ldr	r1, [r2, #0]
 8008542:	1855      	adds	r5, r2, r1
 8008544:	42a5      	cmp	r5, r4
 8008546:	d10b      	bne.n	8008560 <_free_r+0x70>
 8008548:	6824      	ldr	r4, [r4, #0]
 800854a:	4421      	add	r1, r4
 800854c:	1854      	adds	r4, r2, r1
 800854e:	42a3      	cmp	r3, r4
 8008550:	6011      	str	r1, [r2, #0]
 8008552:	d1e0      	bne.n	8008516 <_free_r+0x26>
 8008554:	681c      	ldr	r4, [r3, #0]
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	6053      	str	r3, [r2, #4]
 800855a:	440c      	add	r4, r1
 800855c:	6014      	str	r4, [r2, #0]
 800855e:	e7da      	b.n	8008516 <_free_r+0x26>
 8008560:	d902      	bls.n	8008568 <_free_r+0x78>
 8008562:	230c      	movs	r3, #12
 8008564:	6003      	str	r3, [r0, #0]
 8008566:	e7d6      	b.n	8008516 <_free_r+0x26>
 8008568:	6825      	ldr	r5, [r4, #0]
 800856a:	1961      	adds	r1, r4, r5
 800856c:	428b      	cmp	r3, r1
 800856e:	bf04      	itt	eq
 8008570:	6819      	ldreq	r1, [r3, #0]
 8008572:	685b      	ldreq	r3, [r3, #4]
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	bf04      	itt	eq
 8008578:	1949      	addeq	r1, r1, r5
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	6054      	str	r4, [r2, #4]
 800857e:	e7ca      	b.n	8008516 <_free_r+0x26>
 8008580:	b003      	add	sp, #12
 8008582:	bd30      	pop	{r4, r5, pc}
 8008584:	24000430 	.word	0x24000430

08008588 <_malloc_usable_size_r>:
 8008588:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800858c:	1f18      	subs	r0, r3, #4
 800858e:	2b00      	cmp	r3, #0
 8008590:	bfbc      	itt	lt
 8008592:	580b      	ldrlt	r3, [r1, r0]
 8008594:	18c0      	addlt	r0, r0, r3
 8008596:	4770      	bx	lr

08008598 <_init>:
 8008598:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800859a:	bf00      	nop
 800859c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800859e:	bc08      	pop	{r3}
 80085a0:	469e      	mov	lr, r3
 80085a2:	4770      	bx	lr

080085a4 <_fini>:
 80085a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085a6:	bf00      	nop
 80085a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085aa:	bc08      	pop	{r3}
 80085ac:	469e      	mov	lr, r3
 80085ae:	4770      	bx	lr
