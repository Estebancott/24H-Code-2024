
Adventure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006414  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000270  080066b4  080066b4  000166b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08006924  08006924  00016924  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0800692c  0800692c  0001692c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08006930  08006930  00016930  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         0000006c  24000000  08006934  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000204  2400006c  080069a0  0002006c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  24000270  080069a0  00020270  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  0002009a  2**0
                  CONTENTS, READONLY
 11 .debug_info   0000f857  00000000  00000000  000200dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00001f23  00000000  00000000  0002f934  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000ae8  00000000  00000000  00031858  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000858  00000000  00000000  00032340  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00036cb1  00000000  00000000  00032b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   0000efc2  00000000  00000000  00069849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    00159c68  00000000  00000000  0007880b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000369c  00000000  00000000  001d2474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000063  00000000  00000000  001d5b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	2400006c 	.word	0x2400006c
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800669c 	.word	0x0800669c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000070 	.word	0x24000070
 80002dc:	0800669c 	.word	0x0800669c

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr
	...

08000300 <memchr>:
 8000300:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000304:	2a10      	cmp	r2, #16
 8000306:	db2b      	blt.n	8000360 <memchr+0x60>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	d008      	beq.n	8000320 <memchr+0x20>
 800030e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000312:	3a01      	subs	r2, #1
 8000314:	428b      	cmp	r3, r1
 8000316:	d02d      	beq.n	8000374 <memchr+0x74>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	b342      	cbz	r2, 8000370 <memchr+0x70>
 800031e:	d1f6      	bne.n	800030e <memchr+0xe>
 8000320:	b4f0      	push	{r4, r5, r6, r7}
 8000322:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000326:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800032a:	f022 0407 	bic.w	r4, r2, #7
 800032e:	f07f 0700 	mvns.w	r7, #0
 8000332:	2300      	movs	r3, #0
 8000334:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000338:	3c08      	subs	r4, #8
 800033a:	ea85 0501 	eor.w	r5, r5, r1
 800033e:	ea86 0601 	eor.w	r6, r6, r1
 8000342:	fa85 f547 	uadd8	r5, r5, r7
 8000346:	faa3 f587 	sel	r5, r3, r7
 800034a:	fa86 f647 	uadd8	r6, r6, r7
 800034e:	faa5 f687 	sel	r6, r5, r7
 8000352:	b98e      	cbnz	r6, 8000378 <memchr+0x78>
 8000354:	d1ee      	bne.n	8000334 <memchr+0x34>
 8000356:	bcf0      	pop	{r4, r5, r6, r7}
 8000358:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800035c:	f002 0207 	and.w	r2, r2, #7
 8000360:	b132      	cbz	r2, 8000370 <memchr+0x70>
 8000362:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000366:	3a01      	subs	r2, #1
 8000368:	ea83 0301 	eor.w	r3, r3, r1
 800036c:	b113      	cbz	r3, 8000374 <memchr+0x74>
 800036e:	d1f8      	bne.n	8000362 <memchr+0x62>
 8000370:	2000      	movs	r0, #0
 8000372:	4770      	bx	lr
 8000374:	3801      	subs	r0, #1
 8000376:	4770      	bx	lr
 8000378:	2d00      	cmp	r5, #0
 800037a:	bf06      	itte	eq
 800037c:	4635      	moveq	r5, r6
 800037e:	3803      	subeq	r0, #3
 8000380:	3807      	subne	r0, #7
 8000382:	f015 0f01 	tst.w	r5, #1
 8000386:	d107      	bne.n	8000398 <memchr+0x98>
 8000388:	3001      	adds	r0, #1
 800038a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800038e:	bf02      	ittt	eq
 8000390:	3001      	addeq	r0, #1
 8000392:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000396:	3001      	addeq	r0, #1
 8000398:	bcf0      	pop	{r4, r5, r6, r7}
 800039a:	3801      	subs	r0, #1
 800039c:	4770      	bx	lr
 800039e:	bf00      	nop

080003a0 <__aeabi_uldivmod>:
 80003a0:	b953      	cbnz	r3, 80003b8 <__aeabi_uldivmod+0x18>
 80003a2:	b94a      	cbnz	r2, 80003b8 <__aeabi_uldivmod+0x18>
 80003a4:	2900      	cmp	r1, #0
 80003a6:	bf08      	it	eq
 80003a8:	2800      	cmpeq	r0, #0
 80003aa:	bf1c      	itt	ne
 80003ac:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80003b0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80003b4:	f000 b970 	b.w	8000698 <__aeabi_idiv0>
 80003b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003c0:	f000 f806 	bl	80003d0 <__udivmoddi4>
 80003c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003cc:	b004      	add	sp, #16
 80003ce:	4770      	bx	lr

080003d0 <__udivmoddi4>:
 80003d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003d4:	9e08      	ldr	r6, [sp, #32]
 80003d6:	460d      	mov	r5, r1
 80003d8:	4604      	mov	r4, r0
 80003da:	460f      	mov	r7, r1
 80003dc:	2b00      	cmp	r3, #0
 80003de:	d14a      	bne.n	8000476 <__udivmoddi4+0xa6>
 80003e0:	428a      	cmp	r2, r1
 80003e2:	4694      	mov	ip, r2
 80003e4:	d965      	bls.n	80004b2 <__udivmoddi4+0xe2>
 80003e6:	fab2 f382 	clz	r3, r2
 80003ea:	b143      	cbz	r3, 80003fe <__udivmoddi4+0x2e>
 80003ec:	fa02 fc03 	lsl.w	ip, r2, r3
 80003f0:	f1c3 0220 	rsb	r2, r3, #32
 80003f4:	409f      	lsls	r7, r3
 80003f6:	fa20 f202 	lsr.w	r2, r0, r2
 80003fa:	4317      	orrs	r7, r2
 80003fc:	409c      	lsls	r4, r3
 80003fe:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000402:	fa1f f58c 	uxth.w	r5, ip
 8000406:	fbb7 f1fe 	udiv	r1, r7, lr
 800040a:	0c22      	lsrs	r2, r4, #16
 800040c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000410:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000414:	fb01 f005 	mul.w	r0, r1, r5
 8000418:	4290      	cmp	r0, r2
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x62>
 800041c:	eb1c 0202 	adds.w	r2, ip, r2
 8000420:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000424:	f080 811c 	bcs.w	8000660 <__udivmoddi4+0x290>
 8000428:	4290      	cmp	r0, r2
 800042a:	f240 8119 	bls.w	8000660 <__udivmoddi4+0x290>
 800042e:	3902      	subs	r1, #2
 8000430:	4462      	add	r2, ip
 8000432:	1a12      	subs	r2, r2, r0
 8000434:	b2a4      	uxth	r4, r4
 8000436:	fbb2 f0fe 	udiv	r0, r2, lr
 800043a:	fb0e 2210 	mls	r2, lr, r0, r2
 800043e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000442:	fb00 f505 	mul.w	r5, r0, r5
 8000446:	42a5      	cmp	r5, r4
 8000448:	d90a      	bls.n	8000460 <__udivmoddi4+0x90>
 800044a:	eb1c 0404 	adds.w	r4, ip, r4
 800044e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000452:	f080 8107 	bcs.w	8000664 <__udivmoddi4+0x294>
 8000456:	42a5      	cmp	r5, r4
 8000458:	f240 8104 	bls.w	8000664 <__udivmoddi4+0x294>
 800045c:	4464      	add	r4, ip
 800045e:	3802      	subs	r0, #2
 8000460:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000464:	1b64      	subs	r4, r4, r5
 8000466:	2100      	movs	r1, #0
 8000468:	b11e      	cbz	r6, 8000472 <__udivmoddi4+0xa2>
 800046a:	40dc      	lsrs	r4, r3
 800046c:	2300      	movs	r3, #0
 800046e:	e9c6 4300 	strd	r4, r3, [r6]
 8000472:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000476:	428b      	cmp	r3, r1
 8000478:	d908      	bls.n	800048c <__udivmoddi4+0xbc>
 800047a:	2e00      	cmp	r6, #0
 800047c:	f000 80ed 	beq.w	800065a <__udivmoddi4+0x28a>
 8000480:	2100      	movs	r1, #0
 8000482:	e9c6 0500 	strd	r0, r5, [r6]
 8000486:	4608      	mov	r0, r1
 8000488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048c:	fab3 f183 	clz	r1, r3
 8000490:	2900      	cmp	r1, #0
 8000492:	d149      	bne.n	8000528 <__udivmoddi4+0x158>
 8000494:	42ab      	cmp	r3, r5
 8000496:	d302      	bcc.n	800049e <__udivmoddi4+0xce>
 8000498:	4282      	cmp	r2, r0
 800049a:	f200 80f8 	bhi.w	800068e <__udivmoddi4+0x2be>
 800049e:	1a84      	subs	r4, r0, r2
 80004a0:	eb65 0203 	sbc.w	r2, r5, r3
 80004a4:	2001      	movs	r0, #1
 80004a6:	4617      	mov	r7, r2
 80004a8:	2e00      	cmp	r6, #0
 80004aa:	d0e2      	beq.n	8000472 <__udivmoddi4+0xa2>
 80004ac:	e9c6 4700 	strd	r4, r7, [r6]
 80004b0:	e7df      	b.n	8000472 <__udivmoddi4+0xa2>
 80004b2:	b902      	cbnz	r2, 80004b6 <__udivmoddi4+0xe6>
 80004b4:	deff      	udf	#255	; 0xff
 80004b6:	fab2 f382 	clz	r3, r2
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f040 8090 	bne.w	80005e0 <__udivmoddi4+0x210>
 80004c0:	1a8a      	subs	r2, r1, r2
 80004c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004c6:	fa1f fe8c 	uxth.w	lr, ip
 80004ca:	2101      	movs	r1, #1
 80004cc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004d0:	fb07 2015 	mls	r0, r7, r5, r2
 80004d4:	0c22      	lsrs	r2, r4, #16
 80004d6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004da:	fb0e f005 	mul.w	r0, lr, r5
 80004de:	4290      	cmp	r0, r2
 80004e0:	d908      	bls.n	80004f4 <__udivmoddi4+0x124>
 80004e2:	eb1c 0202 	adds.w	r2, ip, r2
 80004e6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x122>
 80004ec:	4290      	cmp	r0, r2
 80004ee:	f200 80cb 	bhi.w	8000688 <__udivmoddi4+0x2b8>
 80004f2:	4645      	mov	r5, r8
 80004f4:	1a12      	subs	r2, r2, r0
 80004f6:	b2a4      	uxth	r4, r4
 80004f8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004fc:	fb07 2210 	mls	r2, r7, r0, r2
 8000500:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000504:	fb0e fe00 	mul.w	lr, lr, r0
 8000508:	45a6      	cmp	lr, r4
 800050a:	d908      	bls.n	800051e <__udivmoddi4+0x14e>
 800050c:	eb1c 0404 	adds.w	r4, ip, r4
 8000510:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000514:	d202      	bcs.n	800051c <__udivmoddi4+0x14c>
 8000516:	45a6      	cmp	lr, r4
 8000518:	f200 80bb 	bhi.w	8000692 <__udivmoddi4+0x2c2>
 800051c:	4610      	mov	r0, r2
 800051e:	eba4 040e 	sub.w	r4, r4, lr
 8000522:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000526:	e79f      	b.n	8000468 <__udivmoddi4+0x98>
 8000528:	f1c1 0720 	rsb	r7, r1, #32
 800052c:	408b      	lsls	r3, r1
 800052e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000532:	ea4c 0c03 	orr.w	ip, ip, r3
 8000536:	fa05 f401 	lsl.w	r4, r5, r1
 800053a:	fa20 f307 	lsr.w	r3, r0, r7
 800053e:	40fd      	lsrs	r5, r7
 8000540:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000544:	4323      	orrs	r3, r4
 8000546:	fbb5 f8f9 	udiv	r8, r5, r9
 800054a:	fa1f fe8c 	uxth.w	lr, ip
 800054e:	fb09 5518 	mls	r5, r9, r8, r5
 8000552:	0c1c      	lsrs	r4, r3, #16
 8000554:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000558:	fb08 f50e 	mul.w	r5, r8, lr
 800055c:	42a5      	cmp	r5, r4
 800055e:	fa02 f201 	lsl.w	r2, r2, r1
 8000562:	fa00 f001 	lsl.w	r0, r0, r1
 8000566:	d90b      	bls.n	8000580 <__udivmoddi4+0x1b0>
 8000568:	eb1c 0404 	adds.w	r4, ip, r4
 800056c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000570:	f080 8088 	bcs.w	8000684 <__udivmoddi4+0x2b4>
 8000574:	42a5      	cmp	r5, r4
 8000576:	f240 8085 	bls.w	8000684 <__udivmoddi4+0x2b4>
 800057a:	f1a8 0802 	sub.w	r8, r8, #2
 800057e:	4464      	add	r4, ip
 8000580:	1b64      	subs	r4, r4, r5
 8000582:	b29d      	uxth	r5, r3
 8000584:	fbb4 f3f9 	udiv	r3, r4, r9
 8000588:	fb09 4413 	mls	r4, r9, r3, r4
 800058c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000590:	fb03 fe0e 	mul.w	lr, r3, lr
 8000594:	45a6      	cmp	lr, r4
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x1da>
 8000598:	eb1c 0404 	adds.w	r4, ip, r4
 800059c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80005a0:	d26c      	bcs.n	800067c <__udivmoddi4+0x2ac>
 80005a2:	45a6      	cmp	lr, r4
 80005a4:	d96a      	bls.n	800067c <__udivmoddi4+0x2ac>
 80005a6:	3b02      	subs	r3, #2
 80005a8:	4464      	add	r4, ip
 80005aa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80005ae:	fba3 9502 	umull	r9, r5, r3, r2
 80005b2:	eba4 040e 	sub.w	r4, r4, lr
 80005b6:	42ac      	cmp	r4, r5
 80005b8:	46c8      	mov	r8, r9
 80005ba:	46ae      	mov	lr, r5
 80005bc:	d356      	bcc.n	800066c <__udivmoddi4+0x29c>
 80005be:	d053      	beq.n	8000668 <__udivmoddi4+0x298>
 80005c0:	b156      	cbz	r6, 80005d8 <__udivmoddi4+0x208>
 80005c2:	ebb0 0208 	subs.w	r2, r0, r8
 80005c6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ca:	fa04 f707 	lsl.w	r7, r4, r7
 80005ce:	40ca      	lsrs	r2, r1
 80005d0:	40cc      	lsrs	r4, r1
 80005d2:	4317      	orrs	r7, r2
 80005d4:	e9c6 7400 	strd	r7, r4, [r6]
 80005d8:	4618      	mov	r0, r3
 80005da:	2100      	movs	r1, #0
 80005dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005e0:	f1c3 0120 	rsb	r1, r3, #32
 80005e4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005e8:	fa20 f201 	lsr.w	r2, r0, r1
 80005ec:	fa25 f101 	lsr.w	r1, r5, r1
 80005f0:	409d      	lsls	r5, r3
 80005f2:	432a      	orrs	r2, r5
 80005f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005f8:	fa1f fe8c 	uxth.w	lr, ip
 80005fc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000600:	fb07 1510 	mls	r5, r7, r0, r1
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800060a:	fb00 f50e 	mul.w	r5, r0, lr
 800060e:	428d      	cmp	r5, r1
 8000610:	fa04 f403 	lsl.w	r4, r4, r3
 8000614:	d908      	bls.n	8000628 <__udivmoddi4+0x258>
 8000616:	eb1c 0101 	adds.w	r1, ip, r1
 800061a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800061e:	d22f      	bcs.n	8000680 <__udivmoddi4+0x2b0>
 8000620:	428d      	cmp	r5, r1
 8000622:	d92d      	bls.n	8000680 <__udivmoddi4+0x2b0>
 8000624:	3802      	subs	r0, #2
 8000626:	4461      	add	r1, ip
 8000628:	1b49      	subs	r1, r1, r5
 800062a:	b292      	uxth	r2, r2
 800062c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000630:	fb07 1115 	mls	r1, r7, r5, r1
 8000634:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000638:	fb05 f10e 	mul.w	r1, r5, lr
 800063c:	4291      	cmp	r1, r2
 800063e:	d908      	bls.n	8000652 <__udivmoddi4+0x282>
 8000640:	eb1c 0202 	adds.w	r2, ip, r2
 8000644:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000648:	d216      	bcs.n	8000678 <__udivmoddi4+0x2a8>
 800064a:	4291      	cmp	r1, r2
 800064c:	d914      	bls.n	8000678 <__udivmoddi4+0x2a8>
 800064e:	3d02      	subs	r5, #2
 8000650:	4462      	add	r2, ip
 8000652:	1a52      	subs	r2, r2, r1
 8000654:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000658:	e738      	b.n	80004cc <__udivmoddi4+0xfc>
 800065a:	4631      	mov	r1, r6
 800065c:	4630      	mov	r0, r6
 800065e:	e708      	b.n	8000472 <__udivmoddi4+0xa2>
 8000660:	4639      	mov	r1, r7
 8000662:	e6e6      	b.n	8000432 <__udivmoddi4+0x62>
 8000664:	4610      	mov	r0, r2
 8000666:	e6fb      	b.n	8000460 <__udivmoddi4+0x90>
 8000668:	4548      	cmp	r0, r9
 800066a:	d2a9      	bcs.n	80005c0 <__udivmoddi4+0x1f0>
 800066c:	ebb9 0802 	subs.w	r8, r9, r2
 8000670:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000674:	3b01      	subs	r3, #1
 8000676:	e7a3      	b.n	80005c0 <__udivmoddi4+0x1f0>
 8000678:	4645      	mov	r5, r8
 800067a:	e7ea      	b.n	8000652 <__udivmoddi4+0x282>
 800067c:	462b      	mov	r3, r5
 800067e:	e794      	b.n	80005aa <__udivmoddi4+0x1da>
 8000680:	4640      	mov	r0, r8
 8000682:	e7d1      	b.n	8000628 <__udivmoddi4+0x258>
 8000684:	46d0      	mov	r8, sl
 8000686:	e77b      	b.n	8000580 <__udivmoddi4+0x1b0>
 8000688:	3d02      	subs	r5, #2
 800068a:	4462      	add	r2, ip
 800068c:	e732      	b.n	80004f4 <__udivmoddi4+0x124>
 800068e:	4608      	mov	r0, r1
 8000690:	e70a      	b.n	80004a8 <__udivmoddi4+0xd8>
 8000692:	4464      	add	r4, ip
 8000694:	3802      	subs	r0, #2
 8000696:	e742      	b.n	800051e <__udivmoddi4+0x14e>

08000698 <__aeabi_idiv0>:
 8000698:	4770      	bx	lr
 800069a:	bf00      	nop

0800069c <command_callback>:
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
/* USER CODE BEGIN PFP */

// Fonction pour déplacer la position selon une action
void command_callback(int *ligne, int *colonne, char *action, int grille[5][8], char valeurs[5][8]) {
 800069c:	b580      	push	{r7, lr}
 800069e:	b084      	sub	sp, #16
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	603b      	str	r3, [r7, #0]
    if (strcmp(action, "go") == 0) {
 80006aa:	4969      	ldr	r1, [pc, #420]	; (8000850 <command_callback+0x1b4>)
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f7ff fe17 	bl	80002e0 <strcmp>
 80006b2:	4603      	mov	r3, r0
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	f040 8096 	bne.w	80007e6 <command_callback+0x14a>
        action = strtok(NULL, " ");
 80006ba:	4966      	ldr	r1, [pc, #408]	; (8000854 <command_callback+0x1b8>)
 80006bc:	2000      	movs	r0, #0
 80006be:	f005 f89b 	bl	80057f8 <strtok>
 80006c2:	6078      	str	r0, [r7, #4]
        if (action != NULL) {
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	f000 80be 	beq.w	8000848 <command_callback+0x1ac>
            switch (action[0]) {
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	3b45      	subs	r3, #69	; 0x45
 80006d2:	2b12      	cmp	r3, #18
 80006d4:	f200 80b8 	bhi.w	8000848 <command_callback+0x1ac>
 80006d8:	a201      	add	r2, pc, #4	; (adr r2, 80006e0 <command_callback+0x44>)
 80006da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80006de:	bf00      	nop
 80006e0:	0800075d 	.word	0x0800075d
 80006e4:	08000849 	.word	0x08000849
 80006e8:	08000849 	.word	0x08000849
 80006ec:	08000849 	.word	0x08000849
 80006f0:	08000849 	.word	0x08000849
 80006f4:	08000849 	.word	0x08000849
 80006f8:	08000849 	.word	0x08000849
 80006fc:	08000849 	.word	0x08000849
 8000700:	08000849 	.word	0x08000849
 8000704:	0800072d 	.word	0x0800072d
 8000708:	08000849 	.word	0x08000849
 800070c:	08000849 	.word	0x08000849
 8000710:	08000849 	.word	0x08000849
 8000714:	08000849 	.word	0x08000849
 8000718:	0800078b 	.word	0x0800078b
 800071c:	08000849 	.word	0x08000849
 8000720:	08000849 	.word	0x08000849
 8000724:	08000849 	.word	0x08000849
 8000728:	080007b9 	.word	0x080007b9
                case 'N': // nord
                    if (*ligne > 0 && (grille[*ligne][*colonne] & NORTH)) {
 800072c:	68fb      	ldr	r3, [r7, #12]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	2b00      	cmp	r3, #0
 8000732:	f340 8082 	ble.w	800083a <command_callback+0x19e>
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	015b      	lsls	r3, r3, #5
 800073c:	683a      	ldr	r2, [r7, #0]
 800073e:	4413      	add	r3, r2
 8000740:	68ba      	ldr	r2, [r7, #8]
 8000742:	6812      	ldr	r2, [r2, #0]
 8000744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000748:	f003 0301 	and.w	r3, r3, #1
 800074c:	2b00      	cmp	r3, #0
 800074e:	d074      	beq.n	800083a <command_callback+0x19e>
                        (*ligne)--;
 8000750:	68fb      	ldr	r3, [r7, #12]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	1e5a      	subs	r2, r3, #1
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	601a      	str	r2, [r3, #0]
                    }
                    break;
 800075a:	e06e      	b.n	800083a <command_callback+0x19e>
                case 'E': // est
                    if (*colonne < 7 && (grille[*ligne][*colonne] & EAST)) {
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	2b06      	cmp	r3, #6
 8000762:	dc6c      	bgt.n	800083e <command_callback+0x1a2>
 8000764:	68fb      	ldr	r3, [r7, #12]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	015b      	lsls	r3, r3, #5
 800076a:	683a      	ldr	r2, [r7, #0]
 800076c:	4413      	add	r3, r2
 800076e:	68ba      	ldr	r2, [r7, #8]
 8000770:	6812      	ldr	r2, [r2, #0]
 8000772:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000776:	f003 0302 	and.w	r3, r3, #2
 800077a:	2b00      	cmp	r3, #0
 800077c:	d05f      	beq.n	800083e <command_callback+0x1a2>
                        (*colonne)++;
 800077e:	68bb      	ldr	r3, [r7, #8]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	1c5a      	adds	r2, r3, #1
 8000784:	68bb      	ldr	r3, [r7, #8]
 8000786:	601a      	str	r2, [r3, #0]
                    }
                    break;
 8000788:	e059      	b.n	800083e <command_callback+0x1a2>
                case 'S': // sud
                    if (*ligne < 4 && (grille[*ligne][*colonne] & SOUTH)) {
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	2b03      	cmp	r3, #3
 8000790:	dc57      	bgt.n	8000842 <command_callback+0x1a6>
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	015b      	lsls	r3, r3, #5
 8000798:	683a      	ldr	r2, [r7, #0]
 800079a:	4413      	add	r3, r2
 800079c:	68ba      	ldr	r2, [r7, #8]
 800079e:	6812      	ldr	r2, [r2, #0]
 80007a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007a4:	f003 0304 	and.w	r3, r3, #4
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d04a      	beq.n	8000842 <command_callback+0x1a6>
                        (*ligne)++;
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	1c5a      	adds	r2, r3, #1
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	601a      	str	r2, [r3, #0]
                    }
                    break;
 80007b6:	e044      	b.n	8000842 <command_callback+0x1a6>
                case 'W': // ouest
                    if (*colonne > 0 && (grille[*ligne][*colonne] & WEST)) {
 80007b8:	68bb      	ldr	r3, [r7, #8]
 80007ba:	681b      	ldr	r3, [r3, #0]
 80007bc:	2b00      	cmp	r3, #0
 80007be:	dd42      	ble.n	8000846 <command_callback+0x1aa>
 80007c0:	68fb      	ldr	r3, [r7, #12]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	015b      	lsls	r3, r3, #5
 80007c6:	683a      	ldr	r2, [r7, #0]
 80007c8:	4413      	add	r3, r2
 80007ca:	68ba      	ldr	r2, [r7, #8]
 80007cc:	6812      	ldr	r2, [r2, #0]
 80007ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80007d2:	f003 0308 	and.w	r3, r3, #8
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d035      	beq.n	8000846 <command_callback+0x1aa>
                        (*colonne)--;
 80007da:	68bb      	ldr	r3, [r7, #8]
 80007dc:	681b      	ldr	r3, [r3, #0]
 80007de:	1e5a      	subs	r2, r3, #1
 80007e0:	68bb      	ldr	r3, [r7, #8]
 80007e2:	601a      	str	r2, [r3, #0]
                    }
                    break;
 80007e4:	e02f      	b.n	8000846 <command_callback+0x1aa>
            }
        }
    } else if (strcmp(action, "collect") == 0) {
 80007e6:	491c      	ldr	r1, [pc, #112]	; (8000858 <command_callback+0x1bc>)
 80007e8:	6878      	ldr	r0, [r7, #4]
 80007ea:	f7ff fd79 	bl	80002e0 <strcmp>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d129      	bne.n	8000848 <command_callback+0x1ac>
        action = strtok(NULL, " ");
 80007f4:	4917      	ldr	r1, [pc, #92]	; (8000854 <command_callback+0x1b8>)
 80007f6:	2000      	movs	r0, #0
 80007f8:	f004 fffe 	bl	80057f8 <strtok>
 80007fc:	6078      	str	r0, [r7, #4]
        if (action != NULL) {
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d021      	beq.n	8000848 <command_callback+0x1ac>
            if (strcmp(action, "min") == 0 || strcmp(action, "maj") == 0) {
 8000804:	4915      	ldr	r1, [pc, #84]	; (800085c <command_callback+0x1c0>)
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fd6a 	bl	80002e0 <strcmp>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d006      	beq.n	8000820 <command_callback+0x184>
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <command_callback+0x1c4>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f7ff fd63 	bl	80002e0 <strcmp>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d113      	bne.n	8000848 <command_callback+0x1ac>
                printf("Item collected: %c\n", valeurs[*ligne][*colonne]);
 8000820:	68fb      	ldr	r3, [r7, #12]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	00db      	lsls	r3, r3, #3
 8000826:	69ba      	ldr	r2, [r7, #24]
 8000828:	441a      	add	r2, r3
 800082a:	68bb      	ldr	r3, [r7, #8]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	5cd3      	ldrb	r3, [r2, r3]
 8000830:	4619      	mov	r1, r3
 8000832:	480c      	ldr	r0, [pc, #48]	; (8000864 <command_callback+0x1c8>)
 8000834:	f004 ffce 	bl	80057d4 <iprintf>
            }
        }
    }
}
 8000838:	e006      	b.n	8000848 <command_callback+0x1ac>
                    break;
 800083a:	bf00      	nop
 800083c:	e004      	b.n	8000848 <command_callback+0x1ac>
                    break;
 800083e:	bf00      	nop
 8000840:	e002      	b.n	8000848 <command_callback+0x1ac>
                    break;
 8000842:	bf00      	nop
 8000844:	e000      	b.n	8000848 <command_callback+0x1ac>
                    break;
 8000846:	bf00      	nop
}
 8000848:	bf00      	nop
 800084a:	3710      	adds	r7, #16
 800084c:	46bd      	mov	sp, r7
 800084e:	bd80      	pop	{r7, pc}
 8000850:	080066b4 	.word	0x080066b4
 8000854:	080066b8 	.word	0x080066b8
 8000858:	080066bc 	.word	0x080066bc
 800085c:	080066c4 	.word	0x080066c4
 8000860:	080066c8 	.word	0x080066c8
 8000864:	080066cc 	.word	0x080066cc

08000868 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000868:	b5b0      	push	{r4, r5, r7, lr}
 800086a:	b0ca      	sub	sp, #296	; 0x128
 800086c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 800086e:	f000 f955 	bl	8000b1c <MPU_Config>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000872:	f000 fb8d 	bl	8000f90 <HAL_Init>

  /* USER CODE BEGIN Init */

  // Initialisation de la grille et des valeurs associées
  int grille[5][8] = {
 8000876:	4a2f      	ldr	r2, [pc, #188]	; (8000934 <main+0xcc>)
 8000878:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087c:	4611      	mov	r1, r2
 800087e:	22a0      	movs	r2, #160	; 0xa0
 8000880:	4618      	mov	r0, r3
 8000882:	f005 f84a 	bl	800591a <memcpy>
      {SOUTH, EAST, WEST | NORTH | SOUTH, SOUTH | EAST | NORTH, NORTH | SOUTH | WEST | EAST, NORTH | WEST, NORTH | SOUTH, NORTH | SOUTH},
      {SOUTH | EAST | NORTH, EAST | NORTH | WEST, NORTH | EAST | SOUTH, SOUTH | WEST, SOUTH | EAST | WEST, NORTH | SOUTH | WEST, NORTH | SOUTH | WEST, NORTH | SOUTH},
      {NORTH | EAST, WEST, NORTH | WEST, NORTH | EAST, NORTH | EAST | WEST, NORTH | EAST | WEST, NORTH | EAST, NORTH | WEST}
  };

  char valeurs[5][8] = {
 8000886:	4b2c      	ldr	r3, [pc, #176]	; (8000938 <main+0xd0>)
 8000888:	f107 0454 	add.w	r4, r7, #84	; 0x54
 800088c:	461d      	mov	r5, r3
 800088e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000890:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000892:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000894:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000896:	e895 0003 	ldmia.w	r5, {r0, r1}
 800089a:	e884 0003 	stmia.w	r4, {r0, r1}
      {'9', '8', '1', 'S', '3', 'G', '5', '7'},
      {'W', 'M', 'J', 'D', 'C', 'H', 'K', '4'}
  };

  // Initialisation de la position de départ
  int ligne = 0;
 800089e:	2300      	movs	r3, #0
 80008a0:	653b      	str	r3, [r7, #80]	; 0x50
  int colonne = 4;
 80008a2:	2304      	movs	r3, #4
 80008a4:	64fb      	str	r3, [r7, #76]	; 0x4c

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008a6:	f000 f851 	bl	800094c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008aa:	f000 f907 	bl	8000abc <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80008ae:	f000 f8b9 	bl	8000a24 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("coucou \n\r");
 80008b2:	4822      	ldr	r0, [pc, #136]	; (800093c <main+0xd4>)
 80008b4:	f004 ff8e 	bl	80057d4 <iprintf>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Beginning...\n", strlen("Beginning...\n"), HAL_MAX_DELAY);
 80008b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008bc:	220d      	movs	r2, #13
 80008be:	4920      	ldr	r1, [pc, #128]	; (8000940 <main+0xd8>)
 80008c0:	4820      	ldr	r0, [pc, #128]	; (8000944 <main+0xdc>)
 80008c2:	f003 fdab 	bl	800441c <HAL_UART_Transmit>

  // Séquence d'actions à exécuter
  char sequence[][10] = {"go South", "go South", "go South", "go North", "go East", "go West", "collect maj"};
 80008c6:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80008ca:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80008ce:	4a1e      	ldr	r2, [pc, #120]	; (8000948 <main+0xe0>)
 80008d0:	4618      	mov	r0, r3
 80008d2:	4611      	mov	r1, r2
 80008d4:	2346      	movs	r3, #70	; 0x46
 80008d6:	461a      	mov	r2, r3
 80008d8:	f005 f81f 	bl	800591a <memcpy>

  // Exécution de la séquence d'actions
  for (int i = 0; i < sizeof(sequence)/sizeof(sequence[0]); i++) {
 80008dc:	2300      	movs	r3, #0
 80008de:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 80008e2:	e018      	b.n	8000916 <main+0xae>
	  command_callback(&ligne, &colonne, sequence[i], grille, valeurs);
 80008e4:	1d39      	adds	r1, r7, #4
 80008e6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80008ea:	4613      	mov	r3, r2
 80008ec:	009b      	lsls	r3, r3, #2
 80008ee:	4413      	add	r3, r2
 80008f0:	005b      	lsls	r3, r3, #1
 80008f2:	18ca      	adds	r2, r1, r3
 80008f4:	f107 047c 	add.w	r4, r7, #124	; 0x7c
 80008f8:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 80008fc:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000900:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000904:	9300      	str	r3, [sp, #0]
 8000906:	4623      	mov	r3, r4
 8000908:	f7ff fec8 	bl	800069c <command_callback>
  for (int i = 0; i < sizeof(sequence)/sizeof(sequence[0]); i++) {
 800090c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8000910:	3301      	adds	r3, #1
 8000912:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8000916:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800091a:	2b06      	cmp	r3, #6
 800091c:	d9e2      	bls.n	80008e4 <main+0x7c>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_UART_Transmit(&huart1, (uint8_t *)"Beginning...\n", strlen("Beginning...\n"), HAL_MAX_DELAY);
 800091e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000922:	220d      	movs	r2, #13
 8000924:	4906      	ldr	r1, [pc, #24]	; (8000940 <main+0xd8>)
 8000926:	4807      	ldr	r0, [pc, #28]	; (8000944 <main+0xdc>)
 8000928:	f003 fd78 	bl	800441c <HAL_UART_Transmit>

	  printf("coucou \n\r");
 800092c:	4803      	ldr	r0, [pc, #12]	; (800093c <main+0xd4>)
 800092e:	f004 ff51 	bl	80057d4 <iprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)"Beginning...\n", strlen("Beginning...\n"), HAL_MAX_DELAY);
 8000932:	e7f4      	b.n	800091e <main+0xb6>
 8000934:	080066fc 	.word	0x080066fc
 8000938:	0800679c 	.word	0x0800679c
 800093c:	080066e0 	.word	0x080066e0
 8000940:	080066ec 	.word	0x080066ec
 8000944:	24000088 	.word	0x24000088
 8000948:	080067c4 	.word	0x080067c4

0800094c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	b09c      	sub	sp, #112	; 0x70
 8000950:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000952:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000956:	224c      	movs	r2, #76	; 0x4c
 8000958:	2100      	movs	r1, #0
 800095a:	4618      	mov	r0, r3
 800095c:	f004 ffa8 	bl	80058b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	2220      	movs	r2, #32
 8000964:	2100      	movs	r1, #0
 8000966:	4618      	mov	r0, r3
 8000968:	f004 ffa2 	bl	80058b0 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800096c:	2002      	movs	r0, #2
 800096e:	f000 feb9 	bl	80016e4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	4b29      	ldr	r3, [pc, #164]	; (8000a1c <SystemClock_Config+0xd0>)
 8000978:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800097a:	4a28      	ldr	r2, [pc, #160]	; (8000a1c <SystemClock_Config+0xd0>)
 800097c:	f023 0301 	bic.w	r3, r3, #1
 8000980:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000982:	4b26      	ldr	r3, [pc, #152]	; (8000a1c <SystemClock_Config+0xd0>)
 8000984:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	4b24      	ldr	r3, [pc, #144]	; (8000a20 <SystemClock_Config+0xd4>)
 800098e:	699b      	ldr	r3, [r3, #24]
 8000990:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000994:	4a22      	ldr	r2, [pc, #136]	; (8000a20 <SystemClock_Config+0xd4>)
 8000996:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800099a:	6193      	str	r3, [r2, #24]
 800099c:	4b20      	ldr	r3, [pc, #128]	; (8000a20 <SystemClock_Config+0xd4>)
 800099e:	699b      	ldr	r3, [r3, #24]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	603b      	str	r3, [r7, #0]
 80009a6:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009a8:	bf00      	nop
 80009aa:	4b1d      	ldr	r3, [pc, #116]	; (8000a20 <SystemClock_Config+0xd4>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009b6:	d1f8      	bne.n	80009aa <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009b8:	2302      	movs	r3, #2
 80009ba:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 80009bc:	2301      	movs	r3, #1
 80009be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009c0:	2340      	movs	r3, #64	; 0x40
 80009c2:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80009c4:	2300      	movs	r3, #0
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009cc:	4618      	mov	r0, r3
 80009ce:	f000 fec3 	bl	8001758 <HAL_RCC_OscConfig>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009d8:	f000 f8cc 	bl	8000b74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009dc:	233f      	movs	r3, #63	; 0x3f
 80009de:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 80009ec:	2300      	movs	r3, #0
 80009ee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80009f0:	2340      	movs	r3, #64	; 0x40
 80009f2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009f8:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009fa:	2300      	movs	r3, #0
 80009fc:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	2101      	movs	r1, #1
 8000a02:	4618      	mov	r0, r3
 8000a04:	f001 fb02 	bl	800200c <HAL_RCC_ClockConfig>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d001      	beq.n	8000a12 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000a0e:	f000 f8b1 	bl	8000b74 <Error_Handler>
  }
}
 8000a12:	bf00      	nop
 8000a14:	3770      	adds	r7, #112	; 0x70
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	58000400 	.word	0x58000400
 8000a20:	58024800 	.word	0x58024800

08000a24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a28:	4b22      	ldr	r3, [pc, #136]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a2a:	4a23      	ldr	r2, [pc, #140]	; (8000ab8 <MX_USART1_UART_Init+0x94>)
 8000a2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a2e:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a36:	4b1f      	ldr	r3, [pc, #124]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a3c:	4b1d      	ldr	r3, [pc, #116]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a42:	4b1c      	ldr	r3, [pc, #112]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a48:	4b1a      	ldr	r3, [pc, #104]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a4a:	220c      	movs	r2, #12
 8000a4c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a4e:	4b19      	ldr	r3, [pc, #100]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a54:	4b17      	ldr	r3, [pc, #92]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a5a:	4b16      	ldr	r3, [pc, #88]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000a60:	4b14      	ldr	r3, [pc, #80]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a66:	4b13      	ldr	r3, [pc, #76]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a6c:	4811      	ldr	r0, [pc, #68]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a6e:	f003 fc85 	bl	800437c <HAL_UART_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d001      	beq.n	8000a7c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000a78:	f000 f87c 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	480d      	ldr	r0, [pc, #52]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a80:	f004 fd1b 	bl	80054ba <HAL_UARTEx_SetTxFifoThreshold>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d001      	beq.n	8000a8e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000a8a:	f000 f873 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000a8e:	2100      	movs	r1, #0
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000a92:	f004 fd50 	bl	8005536 <HAL_UARTEx_SetRxFifoThreshold>
 8000a96:	4603      	mov	r3, r0
 8000a98:	2b00      	cmp	r3, #0
 8000a9a:	d001      	beq.n	8000aa0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000a9c:	f000 f86a 	bl	8000b74 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000aa0:	4804      	ldr	r0, [pc, #16]	; (8000ab4 <MX_USART1_UART_Init+0x90>)
 8000aa2:	f004 fcd1 	bl	8005448 <HAL_UARTEx_DisableFifoMode>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d001      	beq.n	8000ab0 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000aac:	f000 f862 	bl	8000b74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000ab0:	bf00      	nop
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	24000088 	.word	0x24000088
 8000ab8:	40011000 	.word	0x40011000

08000abc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ac2:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <MX_GPIO_Init+0x30>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	4a08      	ldr	r2, [pc, #32]	; (8000aec <MX_GPIO_Init+0x30>)
 8000aca:	f043 0302 	orr.w	r3, r3, #2
 8000ace:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ad2:	4b06      	ldr	r3, [pc, #24]	; (8000aec <MX_GPIO_Init+0x30>)
 8000ad4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad8:	f003 0302 	and.w	r3, r3, #2
 8000adc:	607b      	str	r3, [r7, #4]
 8000ade:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000ae0:	bf00      	nop
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	58024400 	.word	0x58024400

08000af0 <_write>:

/* USER CODE BEGIN 4 */
int _write(int fd, char* ptr, int len){
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	60f8      	str	r0, [r7, #12]
 8000af8:	60b9      	str	r1, [r7, #8]
 8000afa:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	b29a      	uxth	r2, r3
 8000b00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b04:	68b9      	ldr	r1, [r7, #8]
 8000b06:	4804      	ldr	r0, [pc, #16]	; (8000b18 <_write+0x28>)
 8000b08:	f003 fc88 	bl	800441c <HAL_UART_Transmit>
	return len;
 8000b0c:	687b      	ldr	r3, [r7, #4]
}
 8000b0e:	4618      	mov	r0, r3
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	24000088 	.word	0x24000088

08000b1c <MPU_Config>:
/* USER CODE END 4 */

/* MPU Configuration */

void MPU_Config(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	b084      	sub	sp, #16
 8000b20:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b22:	463b      	mov	r3, r7
 8000b24:	2200      	movs	r2, #0
 8000b26:	601a      	str	r2, [r3, #0]
 8000b28:	605a      	str	r2, [r3, #4]
 8000b2a:	609a      	str	r2, [r3, #8]
 8000b2c:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8000b2e:	f000 fbb1 	bl	8001294 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b32:	2301      	movs	r3, #1
 8000b34:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8000b36:	2300      	movs	r3, #0
 8000b38:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x0;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8000b3e:	231f      	movs	r3, #31
 8000b40:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x87;
 8000b42:	2387      	movs	r3, #135	; 0x87
 8000b44:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8000b46:	2300      	movs	r3, #0
 8000b48:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8000b4a:	2300      	movs	r3, #0
 8000b4c:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8000b52:	2301      	movs	r3, #1
 8000b54:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8000b56:	2300      	movs	r3, #0
 8000b58:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5e:	463b      	mov	r3, r7
 8000b60:	4618      	mov	r0, r3
 8000b62:	f000 fbcf 	bl	8001304 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b66:	2004      	movs	r0, #4
 8000b68:	f000 fbac 	bl	80012c4 <HAL_MPU_Enable>

}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b78:	b672      	cpsid	i
}
 8000b7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <Error_Handler+0x8>
	...

08000b80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b86:	4b0a      	ldr	r3, [pc, #40]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b88:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b8c:	4a08      	ldr	r2, [pc, #32]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b8e:	f043 0302 	orr.w	r3, r3, #2
 8000b92:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b96:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_MspInit+0x30>)
 8000b98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b9c:	f003 0302 	and.w	r3, r3, #2
 8000ba0:	607b      	str	r3, [r7, #4]
 8000ba2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ba4:	bf00      	nop
 8000ba6:	370c      	adds	r7, #12
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b0ba      	sub	sp, #232	; 0xe8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bbc:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]
 8000bca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bcc:	f107 0310 	add.w	r3, r7, #16
 8000bd0:	22c0      	movs	r2, #192	; 0xc0
 8000bd2:	2100      	movs	r1, #0
 8000bd4:	4618      	mov	r0, r3
 8000bd6:	f004 fe6b 	bl	80058b0 <memset>
  if(huart->Instance==USART1)
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a26      	ldr	r2, [pc, #152]	; (8000c78 <HAL_UART_MspInit+0xc4>)
 8000be0:	4293      	cmp	r3, r2
 8000be2:	d145      	bne.n	8000c70 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000be4:	f04f 0201 	mov.w	r2, #1
 8000be8:	f04f 0300 	mov.w	r3, #0
 8000bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bf6:	f107 0310 	add.w	r3, r7, #16
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 fd92 	bl	8002724 <HAL_RCCEx_PeriphCLKConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c06:	f7ff ffb5 	bl	8000b74 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c0a:	4b1c      	ldr	r3, [pc, #112]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c0c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c10:	4a1a      	ldr	r2, [pc, #104]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c12:	f043 0310 	orr.w	r3, r3, #16
 8000c16:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000c1a:	4b18      	ldr	r3, [pc, #96]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c1c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000c20:	f003 0310 	and.w	r3, r3, #16
 8000c24:	60fb      	str	r3, [r7, #12]
 8000c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c28:	4b14      	ldr	r3, [pc, #80]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	4a13      	ldr	r2, [pc, #76]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c30:	f043 0302 	orr.w	r3, r3, #2
 8000c34:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c38:	4b10      	ldr	r3, [pc, #64]	; (8000c7c <HAL_UART_MspInit+0xc8>)
 8000c3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c3e:	f003 0302 	and.w	r3, r3, #2
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000c46:	23c0      	movs	r3, #192	; 0xc0
 8000c48:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c52:	2300      	movs	r3, #0
 8000c54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c5e:	2307      	movs	r3, #7
 8000c60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c64:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000c68:	4619      	mov	r1, r3
 8000c6a:	4805      	ldr	r0, [pc, #20]	; (8000c80 <HAL_UART_MspInit+0xcc>)
 8000c6c:	f000 fb8a 	bl	8001384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000c70:	bf00      	nop
 8000c72:	37e8      	adds	r7, #232	; 0xe8
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	40011000 	.word	0x40011000
 8000c7c:	58024400 	.word	0x58024400
 8000c80:	58020400 	.word	0x58020400

08000c84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c88:	e7fe      	b.n	8000c88 <NMI_Handler+0x4>

08000c8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c8a:	b480      	push	{r7}
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c8e:	e7fe      	b.n	8000c8e <HardFault_Handler+0x4>

08000c90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c94:	e7fe      	b.n	8000c94 <MemManage_Handler+0x4>

08000c96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c96:	b480      	push	{r7}
 8000c98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c9a:	e7fe      	b.n	8000c9a <BusFault_Handler+0x4>

08000c9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ca0:	e7fe      	b.n	8000ca0 <UsageFault_Handler+0x4>

08000ca2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ca6:	bf00      	nop
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr

08000cb0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000cb4:	bf00      	nop
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbc:	4770      	bx	lr

08000cbe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000cbe:	b480      	push	{r7}
 8000cc0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000cc2:	bf00      	nop
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cca:	4770      	bx	lr

08000ccc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000cd0:	f000 f9d0 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000cd4:	bf00      	nop
 8000cd6:	bd80      	pop	{r7, pc}

08000cd8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  return 1;
 8000cdc:	2301      	movs	r3, #1
}
 8000cde:	4618      	mov	r0, r3
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <_kill>:

int _kill(int pid, int sig)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
 8000cf0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000cf2:	f004 fde5 	bl	80058c0 <__errno>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	2216      	movs	r2, #22
 8000cfa:	601a      	str	r2, [r3, #0]
  return -1;
 8000cfc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d00:	4618      	mov	r0, r3
 8000d02:	3708      	adds	r7, #8
 8000d04:	46bd      	mov	sp, r7
 8000d06:	bd80      	pop	{r7, pc}

08000d08 <_exit>:

void _exit (int status)
{
 8000d08:	b580      	push	{r7, lr}
 8000d0a:	b082      	sub	sp, #8
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000d10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d14:	6878      	ldr	r0, [r7, #4]
 8000d16:	f7ff ffe7 	bl	8000ce8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000d1a:	e7fe      	b.n	8000d1a <_exit+0x12>

08000d1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d1c:	b580      	push	{r7, lr}
 8000d1e:	b086      	sub	sp, #24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
 8000d2c:	e00a      	b.n	8000d44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d2e:	f3af 8000 	nop.w
 8000d32:	4601      	mov	r1, r0
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	1c5a      	adds	r2, r3, #1
 8000d38:	60ba      	str	r2, [r7, #8]
 8000d3a:	b2ca      	uxtb	r2, r1
 8000d3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d3e:	697b      	ldr	r3, [r7, #20]
 8000d40:	3301      	adds	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
 8000d44:	697a      	ldr	r2, [r7, #20]
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	429a      	cmp	r2, r3
 8000d4a:	dbf0      	blt.n	8000d2e <_read+0x12>
  }

  return len;
 8000d4c:	687b      	ldr	r3, [r7, #4]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3718      	adds	r7, #24
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}

08000d56 <_close>:
  }
  return len;
}

int _close(int file)
{
 8000d56:	b480      	push	{r7}
 8000d58:	b083      	sub	sp, #12
 8000d5a:	af00      	add	r7, sp, #0
 8000d5c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr

08000d6e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d6e:	b480      	push	{r7}
 8000d70:	b083      	sub	sp, #12
 8000d72:	af00      	add	r7, sp, #0
 8000d74:	6078      	str	r0, [r7, #4]
 8000d76:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d7e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <_isatty>:

int _isatty(int file)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d96:	2301      	movs	r3, #1
}
 8000d98:	4618      	mov	r0, r3
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	60f8      	str	r0, [r7, #12]
 8000dac:	60b9      	str	r1, [r7, #8]
 8000dae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000db0:	2300      	movs	r3, #0
}
 8000db2:	4618      	mov	r0, r3
 8000db4:	3714      	adds	r7, #20
 8000db6:	46bd      	mov	sp, r7
 8000db8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbc:	4770      	bx	lr
	...

08000dc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000dc8:	4a14      	ldr	r2, [pc, #80]	; (8000e1c <_sbrk+0x5c>)
 8000dca:	4b15      	ldr	r3, [pc, #84]	; (8000e20 <_sbrk+0x60>)
 8000dcc:	1ad3      	subs	r3, r2, r3
 8000dce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000dd0:	697b      	ldr	r3, [r7, #20]
 8000dd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dd4:	4b13      	ldr	r3, [pc, #76]	; (8000e24 <_sbrk+0x64>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d102      	bne.n	8000de2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ddc:	4b11      	ldr	r3, [pc, #68]	; (8000e24 <_sbrk+0x64>)
 8000dde:	4a12      	ldr	r2, [pc, #72]	; (8000e28 <_sbrk+0x68>)
 8000de0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000de2:	4b10      	ldr	r3, [pc, #64]	; (8000e24 <_sbrk+0x64>)
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	4413      	add	r3, r2
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d207      	bcs.n	8000e00 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000df0:	f004 fd66 	bl	80058c0 <__errno>
 8000df4:	4603      	mov	r3, r0
 8000df6:	220c      	movs	r2, #12
 8000df8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	e009      	b.n	8000e14 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e00:	4b08      	ldr	r3, [pc, #32]	; (8000e24 <_sbrk+0x64>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e06:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <_sbrk+0x64>)
 8000e08:	681a      	ldr	r2, [r3, #0]
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a05      	ldr	r2, [pc, #20]	; (8000e24 <_sbrk+0x64>)
 8000e10:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e12:	68fb      	ldr	r3, [r7, #12]
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	24080000 	.word	0x24080000
 8000e20:	00000400 	.word	0x00000400
 8000e24:	2400011c 	.word	0x2400011c
 8000e28:	24000270 	.word	0x24000270

08000e2c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000e30:	4b37      	ldr	r3, [pc, #220]	; (8000f10 <SystemInit+0xe4>)
 8000e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e36:	4a36      	ldr	r2, [pc, #216]	; (8000f10 <SystemInit+0xe4>)
 8000e38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e40:	4b34      	ldr	r3, [pc, #208]	; (8000f14 <SystemInit+0xe8>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	f003 030f 	and.w	r3, r3, #15
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d807      	bhi.n	8000e5c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <SystemInit+0xe8>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f023 030f 	bic.w	r3, r3, #15
 8000e54:	4a2f      	ldr	r2, [pc, #188]	; (8000f14 <SystemInit+0xe8>)
 8000e56:	f043 0307 	orr.w	r3, r3, #7
 8000e5a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000e5c:	4b2e      	ldr	r3, [pc, #184]	; (8000f18 <SystemInit+0xec>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a2d      	ldr	r2, [pc, #180]	; (8000f18 <SystemInit+0xec>)
 8000e62:	f043 0301 	orr.w	r3, r3, #1
 8000e66:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000e68:	4b2b      	ldr	r3, [pc, #172]	; (8000f18 <SystemInit+0xec>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000e6e:	4b2a      	ldr	r3, [pc, #168]	; (8000f18 <SystemInit+0xec>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	4929      	ldr	r1, [pc, #164]	; (8000f18 <SystemInit+0xec>)
 8000e74:	4b29      	ldr	r3, [pc, #164]	; (8000f1c <SystemInit+0xf0>)
 8000e76:	4013      	ands	r3, r2
 8000e78:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000e7a:	4b26      	ldr	r3, [pc, #152]	; (8000f14 <SystemInit+0xe8>)
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	f003 0308 	and.w	r3, r3, #8
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d007      	beq.n	8000e96 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000e86:	4b23      	ldr	r3, [pc, #140]	; (8000f14 <SystemInit+0xe8>)
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f023 030f 	bic.w	r3, r3, #15
 8000e8e:	4a21      	ldr	r2, [pc, #132]	; (8000f14 <SystemInit+0xe8>)
 8000e90:	f043 0307 	orr.w	r3, r3, #7
 8000e94:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000e96:	4b20      	ldr	r3, [pc, #128]	; (8000f18 <SystemInit+0xec>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000e9c:	4b1e      	ldr	r3, [pc, #120]	; (8000f18 <SystemInit+0xec>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000ea2:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <SystemInit+0xec>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000ea8:	4b1b      	ldr	r3, [pc, #108]	; (8000f18 <SystemInit+0xec>)
 8000eaa:	4a1d      	ldr	r2, [pc, #116]	; (8000f20 <SystemInit+0xf4>)
 8000eac:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000eae:	4b1a      	ldr	r3, [pc, #104]	; (8000f18 <SystemInit+0xec>)
 8000eb0:	4a1c      	ldr	r2, [pc, #112]	; (8000f24 <SystemInit+0xf8>)
 8000eb2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000eb4:	4b18      	ldr	r3, [pc, #96]	; (8000f18 <SystemInit+0xec>)
 8000eb6:	4a1c      	ldr	r2, [pc, #112]	; (8000f28 <SystemInit+0xfc>)
 8000eb8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000eba:	4b17      	ldr	r3, [pc, #92]	; (8000f18 <SystemInit+0xec>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <SystemInit+0xec>)
 8000ec2:	4a19      	ldr	r2, [pc, #100]	; (8000f28 <SystemInit+0xfc>)
 8000ec4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <SystemInit+0xec>)
 8000ec8:	2200      	movs	r2, #0
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000ecc:	4b12      	ldr	r3, [pc, #72]	; (8000f18 <SystemInit+0xec>)
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <SystemInit+0xfc>)
 8000ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <SystemInit+0xec>)
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ed8:	4b0f      	ldr	r3, [pc, #60]	; (8000f18 <SystemInit+0xec>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	4a0e      	ldr	r2, [pc, #56]	; (8000f18 <SystemInit+0xec>)
 8000ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ee2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000ee4:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <SystemInit+0xec>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	661a      	str	r2, [r3, #96]	; 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <SystemInit+0x100>)
 8000eec:	681a      	ldr	r2, [r3, #0]
 8000eee:	4b10      	ldr	r3, [pc, #64]	; (8000f30 <SystemInit+0x104>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000ef6:	d202      	bcs.n	8000efe <SystemInit+0xd2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000ef8:	4b0e      	ldr	r3, [pc, #56]	; (8000f34 <SystemInit+0x108>)
 8000efa:	2201      	movs	r2, #1
 8000efc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000efe:	4b0e      	ldr	r3, [pc, #56]	; (8000f38 <SystemInit+0x10c>)
 8000f00:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000f04:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00
 8000f14:	52002000 	.word	0x52002000
 8000f18:	58024400 	.word	0x58024400
 8000f1c:	eaf6ed7f 	.word	0xeaf6ed7f
 8000f20:	02020200 	.word	0x02020200
 8000f24:	01ff0000 	.word	0x01ff0000
 8000f28:	01010280 	.word	0x01010280
 8000f2c:	5c001000 	.word	0x5c001000
 8000f30:	ffff0000 	.word	0xffff0000
 8000f34:	51008108 	.word	0x51008108
 8000f38:	52004000 	.word	0x52004000

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff ff74 	bl	8000e2c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f004 fcaf 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc7b 	bl	8000868 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	2400006c 	.word	0x2400006c
  ldr r2, =_sidata
 8000f80:	08006934 	.word	0x08006934
  ldr r2, =_sbss
 8000f84:	2400006c 	.word	0x2400006c
  ldr r4, =_ebss
 8000f88:	24000270 	.word	0x24000270

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f94a 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f001 f9ec 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	200f      	movs	r0, #15
 8000fdc:	f000 f814 	bl	8001008 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff fdc9 	bl	8000b80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	0800680c 	.word	0x0800680c
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e021      	b.n	8001060 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_InitTick+0x64>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f921 	bl	800127a <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001050:	f000 f8f9 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x68>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	2400000c 	.word	0x2400000c
 800106c:	24000000 	.word	0x24000000
 8001070:	24000008 	.word	0x24000008

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	2400000c 	.word	0x2400000c
 8001098:	24000120 	.word	0x24000120

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	24000120 	.word	0x24000120

080010b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetREVID+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	5c001000 	.word	0x5c001000

080010cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
         );
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff5e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff90 	bl	8001184 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5f 	bl	8001130 <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffb2 	bl	80011ec <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8001294:	b480      	push	{r7}
 8001296:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001298:	f3bf 8f5f 	dmb	sy
}
 800129c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800129e:	4b07      	ldr	r3, [pc, #28]	; (80012bc <HAL_MPU_Disable+0x28>)
 80012a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a2:	4a06      	ldr	r2, [pc, #24]	; (80012bc <HAL_MPU_Disable+0x28>)
 80012a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012a8:	6253      	str	r3, [r2, #36]	; 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80012aa:	4b05      	ldr	r3, [pc, #20]	; (80012c0 <HAL_MPU_Disable+0x2c>)
 80012ac:	2200      	movs	r2, #0
 80012ae:	605a      	str	r2, [r3, #4]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	e000ed00 	.word	0xe000ed00
 80012c0:	e000ed90 	.word	0xe000ed90

080012c4 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80012cc:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <HAL_MPU_Enable+0x38>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	f043 0301 	orr.w	r3, r3, #1
 80012d4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_MPU_Enable+0x3c>)
 80012d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012da:	4a09      	ldr	r2, [pc, #36]	; (8001300 <HAL_MPU_Enable+0x3c>)
 80012dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e0:	6253      	str	r3, [r2, #36]	; 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80012e2:	f3bf 8f4f 	dsb	sy
}
 80012e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80012e8:	f3bf 8f6f 	isb	sy
}
 80012ec:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	e000ed90 	.word	0xe000ed90
 8001300:	e000ed00 	.word	0xe000ed00

08001304 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8001304:	b480      	push	{r7}
 8001306:	b083      	sub	sp, #12
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	785a      	ldrb	r2, [r3, #1]
 8001310:	4b1b      	ldr	r3, [pc, #108]	; (8001380 <HAL_MPU_ConfigRegion+0x7c>)
 8001312:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8001314:	4b1a      	ldr	r3, [pc, #104]	; (8001380 <HAL_MPU_ConfigRegion+0x7c>)
 8001316:	691b      	ldr	r3, [r3, #16]
 8001318:	4a19      	ldr	r2, [pc, #100]	; (8001380 <HAL_MPU_ConfigRegion+0x7c>)
 800131a:	f023 0301 	bic.w	r3, r3, #1
 800131e:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8001320:	4a17      	ldr	r2, [pc, #92]	; (8001380 <HAL_MPU_ConfigRegion+0x7c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	7b1b      	ldrb	r3, [r3, #12]
 800132c:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	7adb      	ldrb	r3, [r3, #11]
 8001332:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001334:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	7a9b      	ldrb	r3, [r3, #10]
 800133a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800133c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	7b5b      	ldrb	r3, [r3, #13]
 8001342:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8001344:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	7b9b      	ldrb	r3, [r3, #14]
 800134a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800134c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	7bdb      	ldrb	r3, [r3, #15]
 8001352:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8001354:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	7a5b      	ldrb	r3, [r3, #9]
 800135a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800135c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7a1b      	ldrb	r3, [r3, #8]
 8001362:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8001364:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8001366:	687a      	ldr	r2, [r7, #4]
 8001368:	7812      	ldrb	r2, [r2, #0]
 800136a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800136c:	4a04      	ldr	r2, [pc, #16]	; (8001380 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800136e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8001370:	6113      	str	r3, [r2, #16]
}
 8001372:	bf00      	nop
 8001374:	370c      	adds	r7, #12
 8001376:	46bd      	mov	sp, r7
 8001378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137c:	4770      	bx	lr
 800137e:	bf00      	nop
 8001380:	e000ed90 	.word	0xe000ed90

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800138e:	2300      	movs	r3, #0
 8001390:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001392:	4b89      	ldr	r3, [pc, #548]	; (80015b8 <HAL_GPIO_Init+0x234>)
 8001394:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001396:	e194      	b.n	80016c2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	681a      	ldr	r2, [r3, #0]
 800139c:	2101      	movs	r1, #1
 800139e:	69fb      	ldr	r3, [r7, #28]
 80013a0:	fa01 f303 	lsl.w	r3, r1, r3
 80013a4:	4013      	ands	r3, r2
 80013a6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 80013a8:	693b      	ldr	r3, [r7, #16]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	f000 8186 	beq.w	80016bc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d005      	beq.n	80013c8 <HAL_GPIO_Init+0x44>
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 0303 	and.w	r3, r3, #3
 80013c4:	2b02      	cmp	r3, #2
 80013c6:	d130      	bne.n	800142a <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80013ce:	69fb      	ldr	r3, [r7, #28]
 80013d0:	005b      	lsls	r3, r3, #1
 80013d2:	2203      	movs	r2, #3
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	68da      	ldr	r2, [r3, #12]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	005b      	lsls	r3, r3, #1
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	69ba      	ldr	r2, [r7, #24]
 80013ee:	4313      	orrs	r3, r2
 80013f0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	69ba      	ldr	r2, [r7, #24]
 80013f6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fe:	2201      	movs	r2, #1
 8001400:	69fb      	ldr	r3, [r7, #28]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	43db      	mvns	r3, r3
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	4013      	ands	r3, r2
 800140c:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	091b      	lsrs	r3, r3, #4
 8001414:	f003 0201 	and.w	r2, r3, #1
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	69ba      	ldr	r2, [r7, #24]
 8001420:	4313      	orrs	r3, r2
 8001422:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	69ba      	ldr	r2, [r7, #24]
 8001428:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f003 0303 	and.w	r3, r3, #3
 8001432:	2b03      	cmp	r3, #3
 8001434:	d017      	beq.n	8001466 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800143c:	69fb      	ldr	r3, [r7, #28]
 800143e:	005b      	lsls	r3, r3, #1
 8001440:	2203      	movs	r2, #3
 8001442:	fa02 f303 	lsl.w	r3, r2, r3
 8001446:	43db      	mvns	r3, r3
 8001448:	69ba      	ldr	r2, [r7, #24]
 800144a:	4013      	ands	r3, r2
 800144c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	fa02 f303 	lsl.w	r3, r2, r3
 800145a:	69ba      	ldr	r2, [r7, #24]
 800145c:	4313      	orrs	r3, r2
 800145e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 0303 	and.w	r3, r3, #3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d123      	bne.n	80014ba <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	08da      	lsrs	r2, r3, #3
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	3208      	adds	r2, #8
 800147a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	220f      	movs	r2, #15
 800148a:	fa02 f303 	lsl.w	r3, r2, r3
 800148e:	43db      	mvns	r3, r3
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	4013      	ands	r3, r2
 8001494:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001496:	683b      	ldr	r3, [r7, #0]
 8001498:	691a      	ldr	r2, [r3, #16]
 800149a:	69fb      	ldr	r3, [r7, #28]
 800149c:	f003 0307 	and.w	r3, r3, #7
 80014a0:	009b      	lsls	r3, r3, #2
 80014a2:	fa02 f303 	lsl.w	r3, r2, r3
 80014a6:	69ba      	ldr	r2, [r7, #24]
 80014a8:	4313      	orrs	r3, r2
 80014aa:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	08da      	lsrs	r2, r3, #3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3208      	adds	r2, #8
 80014b4:	69b9      	ldr	r1, [r7, #24]
 80014b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	2203      	movs	r2, #3
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	69ba      	ldr	r2, [r7, #24]
 80014ce:	4013      	ands	r3, r2
 80014d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	f003 0203 	and.w	r2, r3, #3
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	69ba      	ldr	r2, [r7, #24]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	f000 80e0 	beq.w	80016bc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014fc:	4b2f      	ldr	r3, [pc, #188]	; (80015bc <HAL_GPIO_Init+0x238>)
 80014fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001502:	4a2e      	ldr	r2, [pc, #184]	; (80015bc <HAL_GPIO_Init+0x238>)
 8001504:	f043 0302 	orr.w	r3, r3, #2
 8001508:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800150c:	4b2b      	ldr	r3, [pc, #172]	; (80015bc <HAL_GPIO_Init+0x238>)
 800150e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001512:	f003 0302 	and.w	r3, r3, #2
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800151a:	4a29      	ldr	r2, [pc, #164]	; (80015c0 <HAL_GPIO_Init+0x23c>)
 800151c:	69fb      	ldr	r3, [r7, #28]
 800151e:	089b      	lsrs	r3, r3, #2
 8001520:	3302      	adds	r3, #2
 8001522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001528:	69fb      	ldr	r3, [r7, #28]
 800152a:	f003 0303 	and.w	r3, r3, #3
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	220f      	movs	r2, #15
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43db      	mvns	r3, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4013      	ands	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a20      	ldr	r2, [pc, #128]	; (80015c4 <HAL_GPIO_Init+0x240>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d052      	beq.n	80015ec <HAL_GPIO_Init+0x268>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a1f      	ldr	r2, [pc, #124]	; (80015c8 <HAL_GPIO_Init+0x244>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d031      	beq.n	80015b2 <HAL_GPIO_Init+0x22e>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <HAL_GPIO_Init+0x248>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d02b      	beq.n	80015ae <HAL_GPIO_Init+0x22a>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a1d      	ldr	r2, [pc, #116]	; (80015d0 <HAL_GPIO_Init+0x24c>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d025      	beq.n	80015aa <HAL_GPIO_Init+0x226>
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4a1c      	ldr	r2, [pc, #112]	; (80015d4 <HAL_GPIO_Init+0x250>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d01f      	beq.n	80015a6 <HAL_GPIO_Init+0x222>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	4a1b      	ldr	r2, [pc, #108]	; (80015d8 <HAL_GPIO_Init+0x254>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d019      	beq.n	80015a2 <HAL_GPIO_Init+0x21e>
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	4a1a      	ldr	r2, [pc, #104]	; (80015dc <HAL_GPIO_Init+0x258>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d013      	beq.n	800159e <HAL_GPIO_Init+0x21a>
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4a19      	ldr	r2, [pc, #100]	; (80015e0 <HAL_GPIO_Init+0x25c>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d00d      	beq.n	800159a <HAL_GPIO_Init+0x216>
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	4a18      	ldr	r2, [pc, #96]	; (80015e4 <HAL_GPIO_Init+0x260>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d007      	beq.n	8001596 <HAL_GPIO_Init+0x212>
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	4a17      	ldr	r2, [pc, #92]	; (80015e8 <HAL_GPIO_Init+0x264>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d101      	bne.n	8001592 <HAL_GPIO_Init+0x20e>
 800158e:	2309      	movs	r3, #9
 8001590:	e02d      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 8001592:	230a      	movs	r3, #10
 8001594:	e02b      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 8001596:	2308      	movs	r3, #8
 8001598:	e029      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 800159a:	2307      	movs	r3, #7
 800159c:	e027      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 800159e:	2306      	movs	r3, #6
 80015a0:	e025      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015a2:	2305      	movs	r3, #5
 80015a4:	e023      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015a6:	2304      	movs	r3, #4
 80015a8:	e021      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015aa:	2303      	movs	r3, #3
 80015ac:	e01f      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015ae:	2302      	movs	r3, #2
 80015b0:	e01d      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e01b      	b.n	80015ee <HAL_GPIO_Init+0x26a>
 80015b6:	bf00      	nop
 80015b8:	58000080 	.word	0x58000080
 80015bc:	58024400 	.word	0x58024400
 80015c0:	58000400 	.word	0x58000400
 80015c4:	58020000 	.word	0x58020000
 80015c8:	58020400 	.word	0x58020400
 80015cc:	58020800 	.word	0x58020800
 80015d0:	58020c00 	.word	0x58020c00
 80015d4:	58021000 	.word	0x58021000
 80015d8:	58021400 	.word	0x58021400
 80015dc:	58021800 	.word	0x58021800
 80015e0:	58021c00 	.word	0x58021c00
 80015e4:	58022000 	.word	0x58022000
 80015e8:	58022400 	.word	0x58022400
 80015ec:	2300      	movs	r3, #0
 80015ee:	69fa      	ldr	r2, [r7, #28]
 80015f0:	f002 0203 	and.w	r2, r2, #3
 80015f4:	0092      	lsls	r2, r2, #2
 80015f6:	4093      	lsls	r3, r2
 80015f8:	69ba      	ldr	r2, [r7, #24]
 80015fa:	4313      	orrs	r3, r2
 80015fc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80015fe:	4938      	ldr	r1, [pc, #224]	; (80016e0 <HAL_GPIO_Init+0x35c>)
 8001600:	69fb      	ldr	r3, [r7, #28]
 8001602:	089b      	lsrs	r3, r3, #2
 8001604:	3302      	adds	r3, #2
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800160c:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	43db      	mvns	r3, r3
 8001618:	69ba      	ldr	r2, [r7, #24]
 800161a:	4013      	ands	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001626:	2b00      	cmp	r3, #0
 8001628:	d003      	beq.n	8001632 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800162a:	69ba      	ldr	r2, [r7, #24]
 800162c:	693b      	ldr	r3, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001632:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800163a:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	43db      	mvns	r3, r3
 8001646:	69ba      	ldr	r2, [r7, #24]
 8001648:	4013      	ands	r3, r2
 800164a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001654:	2b00      	cmp	r3, #0
 8001656:	d003      	beq.n	8001660 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	4313      	orrs	r3, r2
 800165e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001660:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001664:	69bb      	ldr	r3, [r7, #24]
 8001666:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	685b      	ldr	r3, [r3, #4]
 800166c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	43db      	mvns	r3, r3
 8001672:	69ba      	ldr	r2, [r7, #24]
 8001674:	4013      	ands	r3, r2
 8001676:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001678:	683b      	ldr	r3, [r7, #0]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	2b00      	cmp	r3, #0
 8001682:	d003      	beq.n	800168c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001684:	69ba      	ldr	r2, [r7, #24]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	69ba      	ldr	r2, [r7, #24]
 8001690:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001698:	693b      	ldr	r3, [r7, #16]
 800169a:	43db      	mvns	r3, r3
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	4013      	ands	r3, r2
 80016a0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	685b      	ldr	r3, [r3, #4]
 80016a6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d003      	beq.n	80016b6 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 80016ae:	69ba      	ldr	r2, [r7, #24]
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	4313      	orrs	r3, r2
 80016b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	69ba      	ldr	r2, [r7, #24]
 80016ba:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80016bc:	69fb      	ldr	r3, [r7, #28]
 80016be:	3301      	adds	r3, #1
 80016c0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	681a      	ldr	r2, [r3, #0]
 80016c6:	69fb      	ldr	r3, [r7, #28]
 80016c8:	fa22 f303 	lsr.w	r3, r2, r3
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	f47f ae63 	bne.w	8001398 <HAL_GPIO_Init+0x14>
  }
}
 80016d2:	bf00      	nop
 80016d4:	bf00      	nop
 80016d6:	3724      	adds	r7, #36	; 0x24
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr
 80016e0:	58000400 	.word	0x58000400

080016e4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b084      	sub	sp, #16
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 80016ec:	4b19      	ldr	r3, [pc, #100]	; (8001754 <HAL_PWREx_ConfigSupply+0x70>)
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	f003 0304 	and.w	r3, r3, #4
 80016f4:	2b04      	cmp	r3, #4
 80016f6:	d00a      	beq.n	800170e <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80016f8:	4b16      	ldr	r3, [pc, #88]	; (8001754 <HAL_PWREx_ConfigSupply+0x70>)
 80016fa:	68db      	ldr	r3, [r3, #12]
 80016fc:	f003 0307 	and.w	r3, r3, #7
 8001700:	687a      	ldr	r2, [r7, #4]
 8001702:	429a      	cmp	r2, r3
 8001704:	d001      	beq.n	800170a <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001706:	2301      	movs	r3, #1
 8001708:	e01f      	b.n	800174a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800170a:	2300      	movs	r3, #0
 800170c:	e01d      	b.n	800174a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800170e:	4b11      	ldr	r3, [pc, #68]	; (8001754 <HAL_PWREx_ConfigSupply+0x70>)
 8001710:	68db      	ldr	r3, [r3, #12]
 8001712:	f023 0207 	bic.w	r2, r3, #7
 8001716:	490f      	ldr	r1, [pc, #60]	; (8001754 <HAL_PWREx_ConfigSupply+0x70>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	4313      	orrs	r3, r2
 800171c:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800171e:	f7ff fcbd 	bl	800109c <HAL_GetTick>
 8001722:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001724:	e009      	b.n	800173a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001726:	f7ff fcb9 	bl	800109c <HAL_GetTick>
 800172a:	4602      	mov	r2, r0
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	1ad3      	subs	r3, r2, r3
 8001730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001734:	d901      	bls.n	800173a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001736:	2301      	movs	r3, #1
 8001738:	e007      	b.n	800174a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800173a:	4b06      	ldr	r3, [pc, #24]	; (8001754 <HAL_PWREx_ConfigSupply+0x70>)
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001746:	d1ee      	bne.n	8001726 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001748:	2300      	movs	r3, #0
}
 800174a:	4618      	mov	r0, r3
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	58024800 	.word	0x58024800

08001758 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d102      	bne.n	800176c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	f000 bc48 	b.w	8001ffc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	f000 8088 	beq.w	800188a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800177a:	4b99      	ldr	r3, [pc, #612]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001782:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001784:	4b96      	ldr	r3, [pc, #600]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001786:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001788:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800178a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800178c:	2b10      	cmp	r3, #16
 800178e:	d007      	beq.n	80017a0 <HAL_RCC_OscConfig+0x48>
 8001790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001792:	2b18      	cmp	r3, #24
 8001794:	d111      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
 8001796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001798:	f003 0303 	and.w	r3, r3, #3
 800179c:	2b02      	cmp	r3, #2
 800179e:	d10c      	bne.n	80017ba <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017a0:	4b8f      	ldr	r3, [pc, #572]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d06d      	beq.n	8001888 <HAL_RCC_OscConfig+0x130>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d169      	bne.n	8001888 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	f000 bc21 	b.w	8001ffc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017c2:	d106      	bne.n	80017d2 <HAL_RCC_OscConfig+0x7a>
 80017c4:	4b86      	ldr	r3, [pc, #536]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a85      	ldr	r2, [pc, #532]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	e02e      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d10c      	bne.n	80017f4 <HAL_RCC_OscConfig+0x9c>
 80017da:	4b81      	ldr	r3, [pc, #516]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	4a80      	ldr	r2, [pc, #512]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017e0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e4:	6013      	str	r3, [r2, #0]
 80017e6:	4b7e      	ldr	r3, [pc, #504]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	4a7d      	ldr	r2, [pc, #500]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80017ec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f0:	6013      	str	r3, [r2, #0]
 80017f2:	e01d      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017fc:	d10c      	bne.n	8001818 <HAL_RCC_OscConfig+0xc0>
 80017fe:	4b78      	ldr	r3, [pc, #480]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a77      	ldr	r2, [pc, #476]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001804:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001808:	6013      	str	r3, [r2, #0]
 800180a:	4b75      	ldr	r3, [pc, #468]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4a74      	ldr	r2, [pc, #464]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001810:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001814:	6013      	str	r3, [r2, #0]
 8001816:	e00b      	b.n	8001830 <HAL_RCC_OscConfig+0xd8>
 8001818:	4b71      	ldr	r3, [pc, #452]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a70      	ldr	r2, [pc, #448]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b6e      	ldr	r3, [pc, #440]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a6d      	ldr	r2, [pc, #436]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fc30 	bl	800109c <HAL_GetTick>
 800183c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fc2c 	bl	800109c <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e3d4      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001852:	4b63      	ldr	r3, [pc, #396]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0xe8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fc1c 	bl	800109c <HAL_GetTick>
 8001864:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fc18 	bl	800109c <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e3c0      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800187a:	4b59      	ldr	r3, [pc, #356]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x110>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	f000 80ca 	beq.w	8001a2c <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001898:	4b51      	ldr	r3, [pc, #324]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800189a:	691b      	ldr	r3, [r3, #16]
 800189c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80018a0:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018a2:	4b4f      	ldr	r3, [pc, #316]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80018a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018a6:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80018a8:	6a3b      	ldr	r3, [r7, #32]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d007      	beq.n	80018be <HAL_RCC_OscConfig+0x166>
 80018ae:	6a3b      	ldr	r3, [r7, #32]
 80018b0:	2b18      	cmp	r3, #24
 80018b2:	d156      	bne.n	8001962 <HAL_RCC_OscConfig+0x20a>
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	f003 0303 	and.w	r3, r3, #3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d151      	bne.n	8001962 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018be:	4b48      	ldr	r3, [pc, #288]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f003 0304 	and.w	r3, r3, #4
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d005      	beq.n	80018d6 <HAL_RCC_OscConfig+0x17e>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	68db      	ldr	r3, [r3, #12]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e392      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80018d6:	4b42      	ldr	r3, [pc, #264]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f023 0219 	bic.w	r2, r3, #25
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	68db      	ldr	r3, [r3, #12]
 80018e2:	493f      	ldr	r1, [pc, #252]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018e8:	f7ff fbd8 	bl	800109c <HAL_GetTick>
 80018ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80018ee:	e008      	b.n	8001902 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f0:	f7ff fbd4 	bl	800109c <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d901      	bls.n	8001902 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80018fe:	2303      	movs	r3, #3
 8001900:	e37c      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001902:	4b37      	ldr	r3, [pc, #220]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	d0f0      	beq.n	80018f0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800190e:	f7ff fbd1 	bl	80010b4 <HAL_GetREVID>
 8001912:	4603      	mov	r3, r0
 8001914:	f241 0203 	movw	r2, #4099	; 0x1003
 8001918:	4293      	cmp	r3, r2
 800191a:	d817      	bhi.n	800194c <HAL_RCC_OscConfig+0x1f4>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	691b      	ldr	r3, [r3, #16]
 8001920:	2b40      	cmp	r3, #64	; 0x40
 8001922:	d108      	bne.n	8001936 <HAL_RCC_OscConfig+0x1de>
 8001924:	4b2e      	ldr	r3, [pc, #184]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800192c:	4a2c      	ldr	r2, [pc, #176]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800192e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001932:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001934:	e07a      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001936:	4b2a      	ldr	r3, [pc, #168]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001938:	685b      	ldr	r3, [r3, #4]
 800193a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	691b      	ldr	r3, [r3, #16]
 8001942:	031b      	lsls	r3, r3, #12
 8001944:	4926      	ldr	r1, [pc, #152]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001946:	4313      	orrs	r3, r2
 8001948:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800194a:	e06f      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800194c:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	061b      	lsls	r3, r3, #24
 800195a:	4921      	ldr	r1, [pc, #132]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800195c:	4313      	orrs	r3, r2
 800195e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001960:	e064      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	68db      	ldr	r3, [r3, #12]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d047      	beq.n	80019fa <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800196a:	4b1d      	ldr	r3, [pc, #116]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f023 0219 	bic.w	r2, r3, #25
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
 8001976:	491a      	ldr	r1, [pc, #104]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001978:	4313      	orrs	r3, r2
 800197a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800197c:	f7ff fb8e 	bl	800109c <HAL_GetTick>
 8001980:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001984:	f7ff fb8a 	bl	800109c <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e332      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001996:	4b12      	ldr	r3, [pc, #72]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80019a2:	f7ff fb87 	bl	80010b4 <HAL_GetREVID>
 80019a6:	4603      	mov	r3, r0
 80019a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d819      	bhi.n	80019e4 <HAL_RCC_OscConfig+0x28c>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	2b40      	cmp	r3, #64	; 0x40
 80019b6:	d108      	bne.n	80019ca <HAL_RCC_OscConfig+0x272>
 80019b8:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80019c0:	4a07      	ldr	r2, [pc, #28]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80019c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019c6:	6053      	str	r3, [r2, #4]
 80019c8:	e030      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
 80019ca:	4b05      	ldr	r3, [pc, #20]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	691b      	ldr	r3, [r3, #16]
 80019d6:	031b      	lsls	r3, r3, #12
 80019d8:	4901      	ldr	r1, [pc, #4]	; (80019e0 <HAL_RCC_OscConfig+0x288>)
 80019da:	4313      	orrs	r3, r2
 80019dc:	604b      	str	r3, [r1, #4]
 80019de:	e025      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
 80019e0:	58024400 	.word	0x58024400
 80019e4:	4b9a      	ldr	r3, [pc, #616]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	061b      	lsls	r3, r3, #24
 80019f2:	4997      	ldr	r1, [pc, #604]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 80019f4:	4313      	orrs	r3, r2
 80019f6:	604b      	str	r3, [r1, #4]
 80019f8:	e018      	b.n	8001a2c <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019fa:	4b95      	ldr	r3, [pc, #596]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a94      	ldr	r2, [pc, #592]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a00:	f023 0301 	bic.w	r3, r3, #1
 8001a04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a06:	f7ff fb49 	bl	800109c <HAL_GetTick>
 8001a0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a0c:	e008      	b.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a0e:	f7ff fb45 	bl	800109c <HAL_GetTick>
 8001a12:	4602      	mov	r2, r0
 8001a14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a16:	1ad3      	subs	r3, r2, r3
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d901      	bls.n	8001a20 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001a1c:	2303      	movs	r3, #3
 8001a1e:	e2ed      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001a20:	4b8b      	ldr	r3, [pc, #556]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f003 0304 	and.w	r3, r3, #4
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d1f0      	bne.n	8001a0e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 0310 	and.w	r3, r3, #16
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	f000 80a9 	beq.w	8001b8c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a3a:	4b85      	ldr	r3, [pc, #532]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a3c:	691b      	ldr	r3, [r3, #16]
 8001a3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001a42:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001a44:	4b82      	ldr	r3, [pc, #520]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a48:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001a4a:	69bb      	ldr	r3, [r7, #24]
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d007      	beq.n	8001a60 <HAL_RCC_OscConfig+0x308>
 8001a50:	69bb      	ldr	r3, [r7, #24]
 8001a52:	2b18      	cmp	r3, #24
 8001a54:	d13a      	bne.n	8001acc <HAL_RCC_OscConfig+0x374>
 8001a56:	697b      	ldr	r3, [r7, #20]
 8001a58:	f003 0303 	and.w	r3, r3, #3
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d135      	bne.n	8001acc <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a60:	4b7b      	ldr	r3, [pc, #492]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x320>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69db      	ldr	r3, [r3, #28]
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d001      	beq.n	8001a78 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e2c1      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001a78:	f7ff fb1c 	bl	80010b4 <HAL_GetREVID>
 8001a7c:	4603      	mov	r3, r0
 8001a7e:	f241 0203 	movw	r2, #4099	; 0x1003
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d817      	bhi.n	8001ab6 <HAL_RCC_OscConfig+0x35e>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	6a1b      	ldr	r3, [r3, #32]
 8001a8a:	2b20      	cmp	r3, #32
 8001a8c:	d108      	bne.n	8001aa0 <HAL_RCC_OscConfig+0x348>
 8001a8e:	4b70      	ldr	r3, [pc, #448]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001a96:	4a6e      	ldr	r2, [pc, #440]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001a98:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001a9c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001a9e:	e075      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001aa0:	4b6b      	ldr	r3, [pc, #428]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6a1b      	ldr	r3, [r3, #32]
 8001aac:	069b      	lsls	r3, r3, #26
 8001aae:	4968      	ldr	r1, [pc, #416]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	4313      	orrs	r3, r2
 8001ab2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001ab4:	e06a      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001ab6:	4b66      	ldr	r3, [pc, #408]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ab8:	68db      	ldr	r3, [r3, #12]
 8001aba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a1b      	ldr	r3, [r3, #32]
 8001ac2:	061b      	lsls	r3, r3, #24
 8001ac4:	4962      	ldr	r1, [pc, #392]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001aca:	e05f      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	69db      	ldr	r3, [r3, #28]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d042      	beq.n	8001b5a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001ad4:	4b5e      	ldr	r3, [pc, #376]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a5d      	ldr	r2, [pc, #372]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ada:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ade:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ae0:	f7ff fadc 	bl	800109c <HAL_GetTick>
 8001ae4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001ae6:	e008      	b.n	8001afa <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001ae8:	f7ff fad8 	bl	800109c <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d901      	bls.n	8001afa <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	e280      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001afa:	4b55      	ldr	r3, [pc, #340]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d0f0      	beq.n	8001ae8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001b06:	f7ff fad5 	bl	80010b4 <HAL_GetREVID>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	f241 0203 	movw	r2, #4099	; 0x1003
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d817      	bhi.n	8001b44 <HAL_RCC_OscConfig+0x3ec>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	6a1b      	ldr	r3, [r3, #32]
 8001b18:	2b20      	cmp	r3, #32
 8001b1a:	d108      	bne.n	8001b2e <HAL_RCC_OscConfig+0x3d6>
 8001b1c:	4b4c      	ldr	r3, [pc, #304]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001b24:	4a4a      	ldr	r2, [pc, #296]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b26:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001b2a:	6053      	str	r3, [r2, #4]
 8001b2c:	e02e      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
 8001b2e:	4b48      	ldr	r3, [pc, #288]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	069b      	lsls	r3, r3, #26
 8001b3c:	4944      	ldr	r1, [pc, #272]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b3e:	4313      	orrs	r3, r2
 8001b40:	604b      	str	r3, [r1, #4]
 8001b42:	e023      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
 8001b44:	4b42      	ldr	r3, [pc, #264]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	6a1b      	ldr	r3, [r3, #32]
 8001b50:	061b      	lsls	r3, r3, #24
 8001b52:	493f      	ldr	r1, [pc, #252]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b54:	4313      	orrs	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e018      	b.n	8001b8c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001b5a:	4b3d      	ldr	r3, [pc, #244]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a3c      	ldr	r2, [pc, #240]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b60:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b64:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b66:	f7ff fa99 	bl	800109c <HAL_GetTick>
 8001b6a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b6c:	e008      	b.n	8001b80 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001b6e:	f7ff fa95 	bl	800109c <HAL_GetTick>
 8001b72:	4602      	mov	r2, r0
 8001b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b76:	1ad3      	subs	r3, r2, r3
 8001b78:	2b02      	cmp	r3, #2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e23d      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001b80:	4b33      	ldr	r3, [pc, #204]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d1f0      	bne.n	8001b6e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f003 0308 	and.w	r3, r3, #8
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d036      	beq.n	8001c06 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	695b      	ldr	r3, [r3, #20]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d019      	beq.n	8001bd4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ba0:	4b2b      	ldr	r3, [pc, #172]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ba2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ba4:	4a2a      	ldr	r2, [pc, #168]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bac:	f7ff fa76 	bl	800109c <HAL_GetTick>
 8001bb0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fa72 	bl	800109c <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e21a      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001bc6:	4b22      	ldr	r3, [pc, #136]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001bc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bca:	f003 0302 	and.w	r3, r3, #2
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d0f0      	beq.n	8001bb4 <HAL_RCC_OscConfig+0x45c>
 8001bd2:	e018      	b.n	8001c06 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001bd4:	4b1e      	ldr	r3, [pc, #120]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001bd6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bd8:	4a1d      	ldr	r2, [pc, #116]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff fa5c 	bl	800109c <HAL_GetTick>
 8001be4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001be6:	e008      	b.n	8001bfa <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001be8:	f7ff fa58 	bl	800109c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d901      	bls.n	8001bfa <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001bf6:	2303      	movs	r3, #3
 8001bf8:	e200      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001bfa:	4b15      	ldr	r3, [pc, #84]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001bfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001bfe:	f003 0302 	and.w	r3, r3, #2
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d1f0      	bne.n	8001be8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f003 0320 	and.w	r3, r3, #32
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d039      	beq.n	8001c86 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	699b      	ldr	r3, [r3, #24]
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d01c      	beq.n	8001c54 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001c1a:	4b0d      	ldr	r3, [pc, #52]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a0c      	ldr	r2, [pc, #48]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001c20:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001c24:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c26:	f7ff fa39 	bl	800109c <HAL_GetTick>
 8001c2a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c2c:	e008      	b.n	8001c40 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c2e:	f7ff fa35 	bl	800109c <HAL_GetTick>
 8001c32:	4602      	mov	r2, r0
 8001c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c36:	1ad3      	subs	r3, r2, r3
 8001c38:	2b02      	cmp	r3, #2
 8001c3a:	d901      	bls.n	8001c40 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001c3c:	2303      	movs	r3, #3
 8001c3e:	e1dd      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001c40:	4b03      	ldr	r3, [pc, #12]	; (8001c50 <HAL_RCC_OscConfig+0x4f8>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d0f0      	beq.n	8001c2e <HAL_RCC_OscConfig+0x4d6>
 8001c4c:	e01b      	b.n	8001c86 <HAL_RCC_OscConfig+0x52e>
 8001c4e:	bf00      	nop
 8001c50:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c54:	4b9b      	ldr	r3, [pc, #620]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a9a      	ldr	r2, [pc, #616]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001c5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001c5e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001c60:	f7ff fa1c 	bl	800109c <HAL_GetTick>
 8001c64:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c66:	e008      	b.n	8001c7a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c68:	f7ff fa18 	bl	800109c <HAL_GetTick>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c70:	1ad3      	subs	r3, r2, r3
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d901      	bls.n	8001c7a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001c76:	2303      	movs	r3, #3
 8001c78:	e1c0      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001c7a:	4b92      	ldr	r3, [pc, #584]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d1f0      	bne.n	8001c68 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0304 	and.w	r3, r3, #4
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	f000 8081 	beq.w	8001d96 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001c94:	4b8c      	ldr	r3, [pc, #560]	; (8001ec8 <HAL_RCC_OscConfig+0x770>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a8b      	ldr	r2, [pc, #556]	; (8001ec8 <HAL_RCC_OscConfig+0x770>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ca0:	f7ff f9fc 	bl	800109c <HAL_GetTick>
 8001ca4:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ca8:	f7ff f9f8 	bl	800109c <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1a0      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001cba:	4b83      	ldr	r3, [pc, #524]	; (8001ec8 <HAL_RCC_OscConfig+0x770>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	2b01      	cmp	r3, #1
 8001ccc:	d106      	bne.n	8001cdc <HAL_RCC_OscConfig+0x584>
 8001cce:	4b7d      	ldr	r3, [pc, #500]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001cd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cd2:	4a7c      	ldr	r2, [pc, #496]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001cd4:	f043 0301 	orr.w	r3, r3, #1
 8001cd8:	6713      	str	r3, [r2, #112]	; 0x70
 8001cda:	e02d      	b.n	8001d38 <HAL_RCC_OscConfig+0x5e0>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d10c      	bne.n	8001cfe <HAL_RCC_OscConfig+0x5a6>
 8001ce4:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	4a76      	ldr	r2, [pc, #472]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001cea:	f023 0301 	bic.w	r3, r3, #1
 8001cee:	6713      	str	r3, [r2, #112]	; 0x70
 8001cf0:	4b74      	ldr	r3, [pc, #464]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001cf2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf4:	4a73      	ldr	r2, [pc, #460]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001cf6:	f023 0304 	bic.w	r3, r3, #4
 8001cfa:	6713      	str	r3, [r2, #112]	; 0x70
 8001cfc:	e01c      	b.n	8001d38 <HAL_RCC_OscConfig+0x5e0>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	2b05      	cmp	r3, #5
 8001d04:	d10c      	bne.n	8001d20 <HAL_RCC_OscConfig+0x5c8>
 8001d06:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d0a:	4a6e      	ldr	r2, [pc, #440]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d0c:	f043 0304 	orr.w	r3, r3, #4
 8001d10:	6713      	str	r3, [r2, #112]	; 0x70
 8001d12:	4b6c      	ldr	r3, [pc, #432]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d16:	4a6b      	ldr	r2, [pc, #428]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d18:	f043 0301 	orr.w	r3, r3, #1
 8001d1c:	6713      	str	r3, [r2, #112]	; 0x70
 8001d1e:	e00b      	b.n	8001d38 <HAL_RCC_OscConfig+0x5e0>
 8001d20:	4b68      	ldr	r3, [pc, #416]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d24:	4a67      	ldr	r2, [pc, #412]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d26:	f023 0301 	bic.w	r3, r3, #1
 8001d2a:	6713      	str	r3, [r2, #112]	; 0x70
 8001d2c:	4b65      	ldr	r3, [pc, #404]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d30:	4a64      	ldr	r2, [pc, #400]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d32:	f023 0304 	bic.w	r3, r3, #4
 8001d36:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d015      	beq.n	8001d6c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d40:	f7ff f9ac 	bl	800109c <HAL_GetTick>
 8001d44:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d46:	e00a      	b.n	8001d5e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d48:	f7ff f9a8 	bl	800109c <HAL_GetTick>
 8001d4c:	4602      	mov	r2, r0
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	1ad3      	subs	r3, r2, r3
 8001d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e14e      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001d5e:	4b59      	ldr	r3, [pc, #356]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d0ee      	beq.n	8001d48 <HAL_RCC_OscConfig+0x5f0>
 8001d6a:	e014      	b.n	8001d96 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff f996 	bl	800109c <HAL_GetTick>
 8001d70:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff f992 	bl	800109c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e138      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001d8a:	4b4e      	ldr	r3, [pc, #312]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d1ee      	bne.n	8001d74 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	f000 812d 	beq.w	8001ffa <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001da0:	4b48      	ldr	r3, [pc, #288]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001da2:	691b      	ldr	r3, [r3, #16]
 8001da4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001da8:	2b18      	cmp	r3, #24
 8001daa:	f000 80bd 	beq.w	8001f28 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	2b02      	cmp	r3, #2
 8001db4:	f040 809e 	bne.w	8001ef4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001db8:	4b42      	ldr	r3, [pc, #264]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a41      	ldr	r2, [pc, #260]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001dbe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001dc2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc4:	f7ff f96a 	bl	800109c <HAL_GetTick>
 8001dc8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f966 	bl	800109c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e10e      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dde:	4b39      	ldr	r3, [pc, #228]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001dea:	4b36      	ldr	r3, [pc, #216]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001dec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dee:	4b37      	ldr	r3, [pc, #220]	; (8001ecc <HAL_RCC_OscConfig+0x774>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	687a      	ldr	r2, [r7, #4]
 8001df4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001df6:	687a      	ldr	r2, [r7, #4]
 8001df8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001dfa:	0112      	lsls	r2, r2, #4
 8001dfc:	430a      	orrs	r2, r1
 8001dfe:	4931      	ldr	r1, [pc, #196]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e00:	4313      	orrs	r3, r2
 8001e02:	628b      	str	r3, [r1, #40]	; 0x28
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e12:	3b01      	subs	r3, #1
 8001e14:	025b      	lsls	r3, r3, #9
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	431a      	orrs	r2, r3
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e1e:	3b01      	subs	r3, #1
 8001e20:	041b      	lsls	r3, r3, #16
 8001e22:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001e26:	431a      	orrs	r2, r3
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e2c:	3b01      	subs	r3, #1
 8001e2e:	061b      	lsls	r3, r3, #24
 8001e30:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001e34:	4923      	ldr	r1, [pc, #140]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e36:	4313      	orrs	r3, r2
 8001e38:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001e3a:	4b22      	ldr	r3, [pc, #136]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e3e:	4a21      	ldr	r2, [pc, #132]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e40:	f023 0301 	bic.w	r3, r3, #1
 8001e44:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e46:	4b1f      	ldr	r3, [pc, #124]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e4a:	4b21      	ldr	r3, [pc, #132]	; (8001ed0 <HAL_RCC_OscConfig+0x778>)
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	687a      	ldr	r2, [r7, #4]
 8001e50:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001e52:	00d2      	lsls	r2, r2, #3
 8001e54:	491b      	ldr	r1, [pc, #108]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001e5a:	4b1a      	ldr	r3, [pc, #104]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e5e:	f023 020c 	bic.w	r2, r3, #12
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e66:	4917      	ldr	r1, [pc, #92]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001e6c:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e70:	f023 0202 	bic.w	r2, r3, #2
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e78:	4912      	ldr	r1, [pc, #72]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001e7e:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	4a10      	ldr	r2, [pc, #64]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e88:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e8e:	4a0d      	ldr	r2, [pc, #52]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001e9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ea0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ea6:	4a07      	ldr	r2, [pc, #28]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001eae:	4b05      	ldr	r3, [pc, #20]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4a04      	ldr	r2, [pc, #16]	; (8001ec4 <HAL_RCC_OscConfig+0x76c>)
 8001eb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001eb8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eba:	f7ff f8ef 	bl	800109c <HAL_GetTick>
 8001ebe:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ec0:	e011      	b.n	8001ee6 <HAL_RCC_OscConfig+0x78e>
 8001ec2:	bf00      	nop
 8001ec4:	58024400 	.word	0x58024400
 8001ec8:	58024800 	.word	0x58024800
 8001ecc:	fffffc0c 	.word	0xfffffc0c
 8001ed0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed4:	f7ff f8e2 	bl	800109c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001edc:	1ad3      	subs	r3, r2, r3
 8001ede:	2b02      	cmp	r3, #2
 8001ee0:	d901      	bls.n	8001ee6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e08a      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001ee6:	4b47      	ldr	r3, [pc, #284]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d0f0      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x77c>
 8001ef2:	e082      	b.n	8001ffa <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef4:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	4a42      	ldr	r2, [pc, #264]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001efa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001efe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7ff f8cc 	bl	800109c <HAL_GetTick>
 8001f04:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f06:	e008      	b.n	8001f1a <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f08:	f7ff f8c8 	bl	800109c <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	2b02      	cmp	r3, #2
 8001f14:	d901      	bls.n	8001f1a <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001f16:	2303      	movs	r3, #3
 8001f18:	e070      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001f1a:	4b3a      	ldr	r3, [pc, #232]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d1f0      	bne.n	8001f08 <HAL_RCC_OscConfig+0x7b0>
 8001f26:	e068      	b.n	8001ffa <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001f28:	4b36      	ldr	r3, [pc, #216]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001f2e:	4b35      	ldr	r3, [pc, #212]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f32:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2b01      	cmp	r3, #1
 8001f3a:	d031      	beq.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	f003 0203 	and.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f46:	429a      	cmp	r2, r3
 8001f48:	d12a      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	091b      	lsrs	r3, r3, #4
 8001f4e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d122      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f64:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d11a      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	0a5b      	lsrs	r3, r3, #9
 8001f6e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f76:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d111      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	0c1b      	lsrs	r3, r3, #16
 8001f80:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f88:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001f8a:	429a      	cmp	r2, r3
 8001f8c:	d108      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	0e1b      	lsrs	r3, r3, #24
 8001f92:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d001      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	e02b      	b.n	8001ffc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001fa4:	4b17      	ldr	r3, [pc, #92]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	08db      	lsrs	r3, r3, #3
 8001faa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001fae:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	429a      	cmp	r2, r3
 8001fb8:	d01f      	beq.n	8001ffa <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001fba:	4b12      	ldr	r3, [pc, #72]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001fbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fbe:	4a11      	ldr	r2, [pc, #68]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001fc0:	f023 0301 	bic.w	r3, r3, #1
 8001fc4:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fc6:	f7ff f869 	bl	800109c <HAL_GetTick>
 8001fca:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001fcc:	bf00      	nop
 8001fce:	f7ff f865 	bl	800109c <HAL_GetTick>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d0f9      	beq.n	8001fce <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001fdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_OscConfig+0x8b0>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	687a      	ldr	r2, [r7, #4]
 8001fe4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fe6:	00d2      	lsls	r2, r2, #3
 8001fe8:	4906      	ldr	r1, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001fee:	4b05      	ldr	r3, [pc, #20]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff2:	4a04      	ldr	r2, [pc, #16]	; (8002004 <HAL_RCC_OscConfig+0x8ac>)
 8001ff4:	f043 0301 	orr.w	r3, r3, #1
 8001ff8:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3730      	adds	r7, #48	; 0x30
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	58024400 	.word	0x58024400
 8002008:	ffff0007 	.word	0xffff0007

0800200c <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b086      	sub	sp, #24
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2b00      	cmp	r3, #0
 800201a:	d101      	bne.n	8002020 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e19c      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002020:	4b8a      	ldr	r3, [pc, #552]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f003 030f 	and.w	r3, r3, #15
 8002028:	683a      	ldr	r2, [r7, #0]
 800202a:	429a      	cmp	r2, r3
 800202c:	d910      	bls.n	8002050 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800202e:	4b87      	ldr	r3, [pc, #540]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f023 020f 	bic.w	r2, r3, #15
 8002036:	4985      	ldr	r1, [pc, #532]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	4313      	orrs	r3, r2
 800203c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800203e:	4b83      	ldr	r3, [pc, #524]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f003 030f 	and.w	r3, r3, #15
 8002046:	683a      	ldr	r2, [r7, #0]
 8002048:	429a      	cmp	r2, r3
 800204a:	d001      	beq.n	8002050 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e184      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d010      	beq.n	800207e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	691a      	ldr	r2, [r3, #16]
 8002060:	4b7b      	ldr	r3, [pc, #492]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002062:	699b      	ldr	r3, [r3, #24]
 8002064:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002068:	429a      	cmp	r2, r3
 800206a:	d908      	bls.n	800207e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800206c:	4b78      	ldr	r3, [pc, #480]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800206e:	699b      	ldr	r3, [r3, #24]
 8002070:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	4975      	ldr	r1, [pc, #468]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800207a:	4313      	orrs	r3, r2
 800207c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	2b00      	cmp	r3, #0
 8002088:	d010      	beq.n	80020ac <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	695a      	ldr	r2, [r3, #20]
 800208e:	4b70      	ldr	r3, [pc, #448]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002096:	429a      	cmp	r2, r3
 8002098:	d908      	bls.n	80020ac <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800209c:	69db      	ldr	r3, [r3, #28]
 800209e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	695b      	ldr	r3, [r3, #20]
 80020a6:	496a      	ldr	r1, [pc, #424]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f003 0310 	and.w	r3, r3, #16
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d010      	beq.n	80020da <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	699a      	ldr	r2, [r3, #24]
 80020bc:	4b64      	ldr	r3, [pc, #400]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020be:	69db      	ldr	r3, [r3, #28]
 80020c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80020c4:	429a      	cmp	r2, r3
 80020c6:	d908      	bls.n	80020da <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80020c8:	4b61      	ldr	r3, [pc, #388]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020ca:	69db      	ldr	r3, [r3, #28]
 80020cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	699b      	ldr	r3, [r3, #24]
 80020d4:	495e      	ldr	r1, [pc, #376]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f003 0320 	and.w	r3, r3, #32
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d010      	beq.n	8002108 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	69da      	ldr	r2, [r3, #28]
 80020ea:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80020f2:	429a      	cmp	r2, r3
 80020f4:	d908      	bls.n	8002108 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80020f6:	4b56      	ldr	r3, [pc, #344]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	69db      	ldr	r3, [r3, #28]
 8002102:	4953      	ldr	r1, [pc, #332]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002104:	4313      	orrs	r3, r2
 8002106:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0302 	and.w	r3, r3, #2
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	68da      	ldr	r2, [r3, #12]
 8002118:	4b4d      	ldr	r3, [pc, #308]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 030f 	and.w	r3, r3, #15
 8002120:	429a      	cmp	r2, r3
 8002122:	d908      	bls.n	8002136 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002124:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 020f 	bic.w	r2, r3, #15
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	4947      	ldr	r1, [pc, #284]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	2b00      	cmp	r3, #0
 8002140:	d055      	beq.n	80021ee <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002142:	4b43      	ldr	r3, [pc, #268]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002144:	699b      	ldr	r3, [r3, #24]
 8002146:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	689b      	ldr	r3, [r3, #8]
 800214e:	4940      	ldr	r1, [pc, #256]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002150:	4313      	orrs	r3, r2
 8002152:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d107      	bne.n	800216c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800215c:	4b3c      	ldr	r3, [pc, #240]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002164:	2b00      	cmp	r3, #0
 8002166:	d121      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002168:	2301      	movs	r3, #1
 800216a:	e0f6      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	2b03      	cmp	r3, #3
 8002172:	d107      	bne.n	8002184 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002174:	4b36      	ldr	r3, [pc, #216]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800217c:	2b00      	cmp	r3, #0
 800217e:	d115      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e0ea      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d107      	bne.n	800219c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800218c:	4b30      	ldr	r3, [pc, #192]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002194:	2b00      	cmp	r3, #0
 8002196:	d109      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002198:	2301      	movs	r3, #1
 800219a:	e0de      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800219c:	4b2c      	ldr	r3, [pc, #176]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f003 0304 	and.w	r3, r3, #4
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d101      	bne.n	80021ac <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e0d6      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80021ac:	4b28      	ldr	r3, [pc, #160]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021ae:	691b      	ldr	r3, [r3, #16]
 80021b0:	f023 0207 	bic.w	r2, r3, #7
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	4925      	ldr	r1, [pc, #148]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021ba:	4313      	orrs	r3, r2
 80021bc:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021be:	f7fe ff6d 	bl	800109c <HAL_GetTick>
 80021c2:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021c4:	e00a      	b.n	80021dc <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021c6:	f7fe ff69 	bl	800109c <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	697b      	ldr	r3, [r7, #20]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021d4:	4293      	cmp	r3, r2
 80021d6:	d901      	bls.n	80021dc <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 80021d8:	2303      	movs	r3, #3
 80021da:	e0be      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80021dc:	4b1c      	ldr	r3, [pc, #112]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 80021de:	691b      	ldr	r3, [r3, #16]
 80021e0:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	429a      	cmp	r2, r3
 80021ec:	d1eb      	bne.n	80021c6 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d010      	beq.n	800221c <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	68da      	ldr	r2, [r3, #12]
 80021fe:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002200:	699b      	ldr	r3, [r3, #24]
 8002202:	f003 030f 	and.w	r3, r3, #15
 8002206:	429a      	cmp	r2, r3
 8002208:	d208      	bcs.n	800221c <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800220a:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 800220c:	699b      	ldr	r3, [r3, #24]
 800220e:	f023 020f 	bic.w	r2, r3, #15
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
 8002216:	490e      	ldr	r1, [pc, #56]	; (8002250 <HAL_RCC_ClockConfig+0x244>)
 8002218:	4313      	orrs	r3, r2
 800221a:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800221c:	4b0b      	ldr	r3, [pc, #44]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d214      	bcs.n	8002254 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f023 020f 	bic.w	r2, r3, #15
 8002232:	4906      	ldr	r1, [pc, #24]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	4313      	orrs	r3, r2
 8002238:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223a:	4b04      	ldr	r3, [pc, #16]	; (800224c <HAL_RCC_ClockConfig+0x240>)
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	f003 030f 	and.w	r3, r3, #15
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	429a      	cmp	r2, r3
 8002246:	d005      	beq.n	8002254 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	e086      	b.n	800235a <HAL_RCC_ClockConfig+0x34e>
 800224c:	52002000 	.word	0x52002000
 8002250:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f003 0304 	and.w	r3, r3, #4
 800225c:	2b00      	cmp	r3, #0
 800225e:	d010      	beq.n	8002282 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	691a      	ldr	r2, [r3, #16]
 8002264:	4b3f      	ldr	r3, [pc, #252]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800226c:	429a      	cmp	r2, r3
 800226e:	d208      	bcs.n	8002282 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002270:	4b3c      	ldr	r3, [pc, #240]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002272:	699b      	ldr	r3, [r3, #24]
 8002274:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	691b      	ldr	r3, [r3, #16]
 800227c:	4939      	ldr	r1, [pc, #228]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 800227e:	4313      	orrs	r3, r2
 8002280:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	f003 0308 	and.w	r3, r3, #8
 800228a:	2b00      	cmp	r3, #0
 800228c:	d010      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	695a      	ldr	r2, [r3, #20]
 8002292:	4b34      	ldr	r3, [pc, #208]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002294:	69db      	ldr	r3, [r3, #28]
 8002296:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800229a:	429a      	cmp	r2, r3
 800229c:	d208      	bcs.n	80022b0 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800229e:	4b31      	ldr	r3, [pc, #196]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022a0:	69db      	ldr	r3, [r3, #28]
 80022a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	695b      	ldr	r3, [r3, #20]
 80022aa:	492e      	ldr	r1, [pc, #184]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0310 	and.w	r3, r3, #16
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d010      	beq.n	80022de <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	699a      	ldr	r2, [r3, #24]
 80022c0:	4b28      	ldr	r3, [pc, #160]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d208      	bcs.n	80022de <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80022cc:	4b25      	ldr	r3, [pc, #148]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	699b      	ldr	r3, [r3, #24]
 80022d8:	4922      	ldr	r1, [pc, #136]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022da:	4313      	orrs	r3, r2
 80022dc:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d010      	beq.n	800230c <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	69da      	ldr	r2, [r3, #28]
 80022ee:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d208      	bcs.n	800230c <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80022fa:	4b1a      	ldr	r3, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 80022fc:	6a1b      	ldr	r3, [r3, #32]
 80022fe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	69db      	ldr	r3, [r3, #28]
 8002306:	4917      	ldr	r1, [pc, #92]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002308:	4313      	orrs	r3, r2
 800230a:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800230c:	f000 f834 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002310:	4602      	mov	r2, r0
 8002312:	4b14      	ldr	r3, [pc, #80]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 8002314:	699b      	ldr	r3, [r3, #24]
 8002316:	0a1b      	lsrs	r3, r3, #8
 8002318:	f003 030f 	and.w	r3, r3, #15
 800231c:	4912      	ldr	r1, [pc, #72]	; (8002368 <HAL_RCC_ClockConfig+0x35c>)
 800231e:	5ccb      	ldrb	r3, [r1, r3]
 8002320:	f003 031f 	and.w	r3, r3, #31
 8002324:	fa22 f303 	lsr.w	r3, r2, r3
 8002328:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800232a:	4b0e      	ldr	r3, [pc, #56]	; (8002364 <HAL_RCC_ClockConfig+0x358>)
 800232c:	699b      	ldr	r3, [r3, #24]
 800232e:	f003 030f 	and.w	r3, r3, #15
 8002332:	4a0d      	ldr	r2, [pc, #52]	; (8002368 <HAL_RCC_ClockConfig+0x35c>)
 8002334:	5cd3      	ldrb	r3, [r2, r3]
 8002336:	f003 031f 	and.w	r3, r3, #31
 800233a:	693a      	ldr	r2, [r7, #16]
 800233c:	fa22 f303 	lsr.w	r3, r2, r3
 8002340:	4a0a      	ldr	r2, [pc, #40]	; (800236c <HAL_RCC_ClockConfig+0x360>)
 8002342:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002344:	4a0a      	ldr	r2, [pc, #40]	; (8002370 <HAL_RCC_ClockConfig+0x364>)
 8002346:	693b      	ldr	r3, [r7, #16]
 8002348:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800234a:	4b0a      	ldr	r3, [pc, #40]	; (8002374 <HAL_RCC_ClockConfig+0x368>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	f7fe fe5a 	bl	8001008 <HAL_InitTick>
 8002354:	4603      	mov	r3, r0
 8002356:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002358:	7bfb      	ldrb	r3, [r7, #15]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3718      	adds	r7, #24
 800235e:	46bd      	mov	sp, r7
 8002360:	bd80      	pop	{r7, pc}
 8002362:	bf00      	nop
 8002364:	58024400 	.word	0x58024400
 8002368:	0800680c 	.word	0x0800680c
 800236c:	24000004 	.word	0x24000004
 8002370:	24000000 	.word	0x24000000
 8002374:	24000008 	.word	0x24000008

08002378 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800237e:	4bb3      	ldr	r3, [pc, #716]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002386:	2b18      	cmp	r3, #24
 8002388:	f200 8155 	bhi.w	8002636 <HAL_RCC_GetSysClockFreq+0x2be>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <HAL_RCC_GetSysClockFreq+0x1c>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023f9 	.word	0x080023f9
 8002398:	08002637 	.word	0x08002637
 800239c:	08002637 	.word	0x08002637
 80023a0:	08002637 	.word	0x08002637
 80023a4:	08002637 	.word	0x08002637
 80023a8:	08002637 	.word	0x08002637
 80023ac:	08002637 	.word	0x08002637
 80023b0:	08002637 	.word	0x08002637
 80023b4:	0800241f 	.word	0x0800241f
 80023b8:	08002637 	.word	0x08002637
 80023bc:	08002637 	.word	0x08002637
 80023c0:	08002637 	.word	0x08002637
 80023c4:	08002637 	.word	0x08002637
 80023c8:	08002637 	.word	0x08002637
 80023cc:	08002637 	.word	0x08002637
 80023d0:	08002637 	.word	0x08002637
 80023d4:	08002425 	.word	0x08002425
 80023d8:	08002637 	.word	0x08002637
 80023dc:	08002637 	.word	0x08002637
 80023e0:	08002637 	.word	0x08002637
 80023e4:	08002637 	.word	0x08002637
 80023e8:	08002637 	.word	0x08002637
 80023ec:	08002637 	.word	0x08002637
 80023f0:	08002637 	.word	0x08002637
 80023f4:	0800242b 	.word	0x0800242b
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80023f8:	4b94      	ldr	r3, [pc, #592]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0320 	and.w	r3, r3, #32
 8002400:	2b00      	cmp	r3, #0
 8002402:	d009      	beq.n	8002418 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002404:	4b91      	ldr	r3, [pc, #580]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	08db      	lsrs	r3, r3, #3
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	4a90      	ldr	r2, [pc, #576]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002410:	fa22 f303 	lsr.w	r3, r2, r3
 8002414:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002416:	e111      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002418:	4b8d      	ldr	r3, [pc, #564]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 800241a:	61bb      	str	r3, [r7, #24]
      break;
 800241c:	e10e      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800241e:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002420:	61bb      	str	r3, [r7, #24]
      break;
 8002422:	e10b      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002424:	4b8c      	ldr	r3, [pc, #560]	; (8002658 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002426:	61bb      	str	r3, [r7, #24]
      break;
 8002428:	e108      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800242a:	4b88      	ldr	r3, [pc, #544]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800242c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242e:	f003 0303 	and.w	r3, r3, #3
 8002432:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002434:	4b85      	ldr	r3, [pc, #532]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002438:	091b      	lsrs	r3, r3, #4
 800243a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800243e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002440:	4b82      	ldr	r3, [pc, #520]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002444:	f003 0301 	and.w	r3, r3, #1
 8002448:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800244a:	4b80      	ldr	r3, [pc, #512]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800244c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800244e:	08db      	lsrs	r3, r3, #3
 8002450:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	fb02 f303 	mul.w	r3, r2, r3
 800245a:	ee07 3a90 	vmov	s15, r3
 800245e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002462:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80e1 	beq.w	8002630 <HAL_RCC_GetSysClockFreq+0x2b8>
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b02      	cmp	r3, #2
 8002472:	f000 8083 	beq.w	800257c <HAL_RCC_GetSysClockFreq+0x204>
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	2b02      	cmp	r3, #2
 800247a:	f200 80a1 	bhi.w	80025c0 <HAL_RCC_GetSysClockFreq+0x248>
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	2b00      	cmp	r3, #0
 8002482:	d003      	beq.n	800248c <HAL_RCC_GetSysClockFreq+0x114>
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	2b01      	cmp	r3, #1
 8002488:	d056      	beq.n	8002538 <HAL_RCC_GetSysClockFreq+0x1c0>
 800248a:	e099      	b.n	80025c0 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800248c:	4b6f      	ldr	r3, [pc, #444]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	2b00      	cmp	r3, #0
 8002496:	d02d      	beq.n	80024f4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002498:	4b6c      	ldr	r3, [pc, #432]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	08db      	lsrs	r3, r3, #3
 800249e:	f003 0303 	and.w	r3, r3, #3
 80024a2:	4a6b      	ldr	r2, [pc, #428]	; (8002650 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80024a4:	fa22 f303 	lsr.w	r3, r2, r3
 80024a8:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024b4:	693b      	ldr	r3, [r7, #16]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80024c2:	4b62      	ldr	r3, [pc, #392]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80024d2:	ed97 6a02 	vldr	s12, [r7, #8]
 80024d6:	eddf 5a61 	vldr	s11, [pc, #388]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80024da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024ee:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80024f2:	e087      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	ee07 3a90 	vmov	s15, r3
 80024fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80024fe:	eddf 6a58 	vldr	s13, [pc, #352]	; 8002660 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002506:	4b51      	ldr	r3, [pc, #324]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800250e:	ee07 3a90 	vmov	s15, r3
 8002512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002516:	ed97 6a02 	vldr	s12, [r7, #8]
 800251a:	eddf 5a50 	vldr	s11, [pc, #320]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 800251e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002526:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800252a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800252e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002532:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002536:	e065      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002538:	693b      	ldr	r3, [r7, #16]
 800253a:	ee07 3a90 	vmov	s15, r3
 800253e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002542:	eddf 6a48 	vldr	s13, [pc, #288]	; 8002664 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800254a:	4b40      	ldr	r3, [pc, #256]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002552:	ee07 3a90 	vmov	s15, r3
 8002556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800255a:	ed97 6a02 	vldr	s12, [r7, #8]
 800255e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 8002562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800256a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800256e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002572:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002576:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800257a:	e043      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	ee07 3a90 	vmov	s15, r3
 8002582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002586:	eddf 6a38 	vldr	s13, [pc, #224]	; 8002668 <HAL_RCC_GetSysClockFreq+0x2f0>
 800258a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800258e:	4b2f      	ldr	r3, [pc, #188]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002596:	ee07 3a90 	vmov	s15, r3
 800259a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800259e:	ed97 6a02 	vldr	s12, [r7, #8]
 80025a2:	eddf 5a2e 	vldr	s11, [pc, #184]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025ba:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80025be:	e021      	b.n	8002604 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	ee07 3a90 	vmov	s15, r3
 80025c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025ca:	eddf 6a26 	vldr	s13, [pc, #152]	; 8002664 <HAL_RCC_GetSysClockFreq+0x2ec>
 80025ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80025d2:	4b1e      	ldr	r3, [pc, #120]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 80025d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80025da:	ee07 3a90 	vmov	s15, r3
 80025de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80025e2:	ed97 6a02 	vldr	s12, [r7, #8]
 80025e6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800265c <HAL_RCC_GetSysClockFreq+0x2e4>
 80025ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80025ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80025f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80025f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80025fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80025fe:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002602:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002604:	4b11      	ldr	r3, [pc, #68]	; (800264c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002608:	0a5b      	lsrs	r3, r3, #9
 800260a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800260e:	3301      	adds	r3, #1
 8002610:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	ee07 3a90 	vmov	s15, r3
 8002618:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800261c:	edd7 6a07 	vldr	s13, [r7, #28]
 8002620:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002624:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002628:	ee17 3a90 	vmov	r3, s15
 800262c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800262e:	e005      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8002630:	2300      	movs	r3, #0
 8002632:	61bb      	str	r3, [r7, #24]
      break;
 8002634:	e002      	b.n	800263c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002636:	4b07      	ldr	r3, [pc, #28]	; (8002654 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002638:	61bb      	str	r3, [r7, #24]
      break;
 800263a:	bf00      	nop
  }

  return sysclockfreq;
 800263c:	69bb      	ldr	r3, [r7, #24]
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	58024400 	.word	0x58024400
 8002650:	03d09000 	.word	0x03d09000
 8002654:	003d0900 	.word	0x003d0900
 8002658:	017d7840 	.word	0x017d7840
 800265c:	46000000 	.word	0x46000000
 8002660:	4c742400 	.word	0x4c742400
 8002664:	4a742400 	.word	0x4a742400
 8002668:	4bbebc20 	.word	0x4bbebc20

0800266c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002672:	f7ff fe81 	bl	8002378 <HAL_RCC_GetSysClockFreq>
 8002676:	4602      	mov	r2, r0
 8002678:	4b10      	ldr	r3, [pc, #64]	; (80026bc <HAL_RCC_GetHCLKFreq+0x50>)
 800267a:	699b      	ldr	r3, [r3, #24]
 800267c:	0a1b      	lsrs	r3, r3, #8
 800267e:	f003 030f 	and.w	r3, r3, #15
 8002682:	490f      	ldr	r1, [pc, #60]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x54>)
 8002684:	5ccb      	ldrb	r3, [r1, r3]
 8002686:	f003 031f 	and.w	r3, r3, #31
 800268a:	fa22 f303 	lsr.w	r3, r2, r3
 800268e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002690:	4b0a      	ldr	r3, [pc, #40]	; (80026bc <HAL_RCC_GetHCLKFreq+0x50>)
 8002692:	699b      	ldr	r3, [r3, #24]
 8002694:	f003 030f 	and.w	r3, r3, #15
 8002698:	4a09      	ldr	r2, [pc, #36]	; (80026c0 <HAL_RCC_GetHCLKFreq+0x54>)
 800269a:	5cd3      	ldrb	r3, [r2, r3]
 800269c:	f003 031f 	and.w	r3, r3, #31
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	fa22 f303 	lsr.w	r3, r2, r3
 80026a6:	4a07      	ldr	r2, [pc, #28]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026a8:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80026aa:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_RCC_GetHCLKFreq+0x5c>)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80026b0:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <HAL_RCC_GetHCLKFreq+0x58>)
 80026b2:	681b      	ldr	r3, [r3, #0]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3708      	adds	r7, #8
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	58024400 	.word	0x58024400
 80026c0:	0800680c 	.word	0x0800680c
 80026c4:	24000004 	.word	0x24000004
 80026c8:	24000000 	.word	0x24000000

080026cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 80026d0:	f7ff ffcc 	bl	800266c <HAL_RCC_GetHCLKFreq>
 80026d4:	4602      	mov	r2, r0
 80026d6:	4b06      	ldr	r3, [pc, #24]	; (80026f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	091b      	lsrs	r3, r3, #4
 80026dc:	f003 0307 	and.w	r3, r3, #7
 80026e0:	4904      	ldr	r1, [pc, #16]	; (80026f4 <HAL_RCC_GetPCLK1Freq+0x28>)
 80026e2:	5ccb      	ldrb	r3, [r1, r3]
 80026e4:	f003 031f 	and.w	r3, r3, #31
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	58024400 	.word	0x58024400
 80026f4:	0800680c 	.word	0x0800680c

080026f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80026fc:	f7ff ffb6 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8002700:	4602      	mov	r2, r0
 8002702:	4b06      	ldr	r3, [pc, #24]	; (800271c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002704:	69db      	ldr	r3, [r3, #28]
 8002706:	0a1b      	lsrs	r3, r3, #8
 8002708:	f003 0307 	and.w	r3, r3, #7
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <HAL_RCC_GetPCLK2Freq+0x28>)
 800270e:	5ccb      	ldrb	r3, [r1, r3]
 8002710:	f003 031f 	and.w	r3, r3, #31
 8002714:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002718:	4618      	mov	r0, r3
 800271a:	bd80      	pop	{r7, pc}
 800271c:	58024400 	.word	0x58024400
 8002720:	0800680c 	.word	0x0800680c

08002724 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002724:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002728:	b0ca      	sub	sp, #296	; 0x128
 800272a:	af00      	add	r7, sp, #0
 800272c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002730:	2300      	movs	r3, #0
 8002732:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002736:	2300      	movs	r3, #0
 8002738:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800273c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002740:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002744:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8002748:	2500      	movs	r5, #0
 800274a:	ea54 0305 	orrs.w	r3, r4, r5
 800274e:	d049      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002750:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002754:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002756:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800275a:	d02f      	beq.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x98>
 800275c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002760:	d828      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002762:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002766:	d01a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8002768:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800276c:	d822      	bhi.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800276e:	2b00      	cmp	r3, #0
 8002770:	d003      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002772:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002776:	d007      	beq.n	8002788 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8002778:	e01c      	b.n	80027b4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800277a:	4bb8      	ldr	r3, [pc, #736]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800277c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800277e:	4ab7      	ldr	r2, [pc, #732]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002780:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002784:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002786:	e01a      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002788:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800278c:	3308      	adds	r3, #8
 800278e:	2102      	movs	r1, #2
 8002790:	4618      	mov	r0, r3
 8002792:	f001 fc8f 	bl	80040b4 <RCCEx_PLL2_Config>
 8002796:	4603      	mov	r3, r0
 8002798:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800279c:	e00f      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800279e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027a2:	3328      	adds	r3, #40	; 0x28
 80027a4:	2102      	movs	r1, #2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f001 fd36 	bl	8004218 <RCCEx_PLL3_Config>
 80027ac:	4603      	mov	r3, r0
 80027ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80027b2:	e004      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027b4:	2301      	movs	r3, #1
 80027b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80027ba:	e000      	b.n	80027be <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80027bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10a      	bne.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80027c6:	4ba5      	ldr	r3, [pc, #660]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80027ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027d2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d4:	4aa1      	ldr	r2, [pc, #644]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d6:	430b      	orrs	r3, r1
 80027d8:	6513      	str	r3, [r2, #80]	; 0x50
 80027da:	e003      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027dc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80027e0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027ec:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80027f0:	f04f 0900 	mov.w	r9, #0
 80027f4:	ea58 0309 	orrs.w	r3, r8, r9
 80027f8:	d047      	beq.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80027fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80027fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002800:	2b04      	cmp	r3, #4
 8002802:	d82a      	bhi.n	800285a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8002804:	a201      	add	r2, pc, #4	; (adr r2, 800280c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8002806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800280a:	bf00      	nop
 800280c:	08002821 	.word	0x08002821
 8002810:	0800282f 	.word	0x0800282f
 8002814:	08002845 	.word	0x08002845
 8002818:	08002863 	.word	0x08002863
 800281c:	08002863 	.word	0x08002863
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002820:	4b8e      	ldr	r3, [pc, #568]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002822:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002824:	4a8d      	ldr	r2, [pc, #564]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002826:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800282a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800282c:	e01a      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800282e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002832:	3308      	adds	r3, #8
 8002834:	2100      	movs	r1, #0
 8002836:	4618      	mov	r0, r3
 8002838:	f001 fc3c 	bl	80040b4 <RCCEx_PLL2_Config>
 800283c:	4603      	mov	r3, r0
 800283e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002842:	e00f      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002844:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002848:	3328      	adds	r3, #40	; 0x28
 800284a:	2100      	movs	r1, #0
 800284c:	4618      	mov	r0, r3
 800284e:	f001 fce3 	bl	8004218 <RCCEx_PLL3_Config>
 8002852:	4603      	mov	r3, r0
 8002854:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002858:	e004      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002860:	e000      	b.n	8002864 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002862:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002868:	2b00      	cmp	r3, #0
 800286a:	d10a      	bne.n	8002882 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800286c:	4b7b      	ldr	r3, [pc, #492]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800286e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002870:	f023 0107 	bic.w	r1, r3, #7
 8002874:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800287a:	4a78      	ldr	r2, [pc, #480]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800287c:	430b      	orrs	r3, r1
 800287e:	6513      	str	r3, [r2, #80]	; 0x50
 8002880:	e003      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002882:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002886:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800288a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800288e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002892:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 8002896:	f04f 0b00 	mov.w	fp, #0
 800289a:	ea5a 030b 	orrs.w	r3, sl, fp
 800289e:	d04c      	beq.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80028a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028aa:	d030      	beq.n	800290e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80028ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028b0:	d829      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028b2:	2bc0      	cmp	r3, #192	; 0xc0
 80028b4:	d02d      	beq.n	8002912 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80028b6:	2bc0      	cmp	r3, #192	; 0xc0
 80028b8:	d825      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028ba:	2b80      	cmp	r3, #128	; 0x80
 80028bc:	d018      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80028be:	2b80      	cmp	r3, #128	; 0x80
 80028c0:	d821      	bhi.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d002      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80028c6:	2b40      	cmp	r3, #64	; 0x40
 80028c8:	d007      	beq.n	80028da <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80028ca:	e01c      	b.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80028cc:	4b63      	ldr	r3, [pc, #396]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d0:	4a62      	ldr	r2, [pc, #392]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80028d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028d8:	e01c      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80028da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028de:	3308      	adds	r3, #8
 80028e0:	2100      	movs	r1, #0
 80028e2:	4618      	mov	r0, r3
 80028e4:	f001 fbe6 	bl	80040b4 <RCCEx_PLL2_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80028ee:	e011      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80028f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028f4:	3328      	adds	r3, #40	; 0x28
 80028f6:	2100      	movs	r1, #0
 80028f8:	4618      	mov	r0, r3
 80028fa:	f001 fc8d 	bl	8004218 <RCCEx_PLL3_Config>
 80028fe:	4603      	mov	r3, r0
 8002900:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8002904:	e006      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800290c:	e002      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800290e:	bf00      	nop
 8002910:	e000      	b.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8002912:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002914:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10a      	bne.n	8002932 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800291c:	4b4f      	ldr	r3, [pc, #316]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8002924:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800292a:	4a4c      	ldr	r2, [pc, #304]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800292c:	430b      	orrs	r3, r1
 800292e:	6513      	str	r3, [r2, #80]	; 0x50
 8002930:	e003      	b.n	800293a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002932:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002936:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800293a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800293e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002942:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8002946:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800294a:	2300      	movs	r3, #0
 800294c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8002950:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8002954:	460b      	mov	r3, r1
 8002956:	4313      	orrs	r3, r2
 8002958:	d053      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800295a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800295e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8002962:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002966:	d035      	beq.n	80029d4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8002968:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800296c:	d82e      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800296e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002972:	d031      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002974:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8002978:	d828      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800297a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800297e:	d01a      	beq.n	80029b6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002984:	d822      	bhi.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002986:	2b00      	cmp	r3, #0
 8002988:	d003      	beq.n	8002992 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800298a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800298e:	d007      	beq.n	80029a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002990:	e01c      	b.n	80029cc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002992:	4b32      	ldr	r3, [pc, #200]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002996:	4a31      	ldr	r2, [pc, #196]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002998:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800299c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800299e:	e01c      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80029a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029a4:	3308      	adds	r3, #8
 80029a6:	2100      	movs	r1, #0
 80029a8:	4618      	mov	r0, r3
 80029aa:	f001 fb83 	bl	80040b4 <RCCEx_PLL2_Config>
 80029ae:	4603      	mov	r3, r0
 80029b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80029b4:	e011      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80029b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ba:	3328      	adds	r3, #40	; 0x28
 80029bc:	2100      	movs	r1, #0
 80029be:	4618      	mov	r0, r3
 80029c0:	f001 fc2a 	bl	8004218 <RCCEx_PLL3_Config>
 80029c4:	4603      	mov	r3, r0
 80029c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80029ca:	e006      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80029cc:	2301      	movs	r3, #1
 80029ce:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80029d2:	e002      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029d4:	bf00      	nop
 80029d6:	e000      	b.n	80029da <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80029d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029da:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d10b      	bne.n	80029fa <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80029e2:	4b1e      	ldr	r3, [pc, #120]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80029e6:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80029ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80029ee:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80029f2:	4a1a      	ldr	r2, [pc, #104]	; (8002a5c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80029f4:	430b      	orrs	r3, r1
 80029f6:	6593      	str	r3, [r2, #88]	; 0x58
 80029f8:	e003      	b.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80029fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80029fe:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8002a02:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a0a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8002a0e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8002a12:	2300      	movs	r3, #0
 8002a14:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002a18:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8002a1c:	460b      	mov	r3, r1
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	d056      	beq.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8002a22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a26:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002a2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a2e:	d038      	beq.n	8002aa2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8002a30:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a34:	d831      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a36:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a3a:	d034      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8002a3c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002a40:	d82b      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a46:	d01d      	beq.n	8002a84 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8002a48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002a4c:	d825      	bhi.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d006      	beq.n	8002a60 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002a52:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a56:	d00a      	beq.n	8002a6e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8002a58:	e01f      	b.n	8002a9a <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002a5a:	bf00      	nop
 8002a5c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a60:	4ba2      	ldr	r3, [pc, #648]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a64:	4aa1      	ldr	r2, [pc, #644]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a66:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a6a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a6c:	e01c      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a72:	3308      	adds	r3, #8
 8002a74:	2100      	movs	r1, #0
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fb1c 	bl	80040b4 <RCCEx_PLL2_Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002a82:	e011      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002a88:	3328      	adds	r3, #40	; 0x28
 8002a8a:	2100      	movs	r1, #0
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f001 fbc3 	bl	8004218 <RCCEx_PLL3_Config>
 8002a92:	4603      	mov	r3, r0
 8002a94:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002a98:	e006      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002a9a:	2301      	movs	r3, #1
 8002a9c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002aa0:	e002      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002aa2:	bf00      	nop
 8002aa4:	e000      	b.n	8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002aa6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002aa8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10b      	bne.n	8002ac8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002ab0:	4b8e      	ldr	r3, [pc, #568]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ab4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8002ab8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002abc:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8002ac0:	4a8a      	ldr	r2, [pc, #552]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac2:	430b      	orrs	r3, r1
 8002ac4:	6593      	str	r3, [r2, #88]	; 0x58
 8002ac6:	e003      	b.n	8002ad0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ac8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002acc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002ad0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8002adc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002ae6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8002aea:	460b      	mov	r3, r1
 8002aec:	4313      	orrs	r3, r2
 8002aee:	d03a      	beq.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8002af0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002af4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002af6:	2b30      	cmp	r3, #48	; 0x30
 8002af8:	d01f      	beq.n	8002b3a <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002afa:	2b30      	cmp	r3, #48	; 0x30
 8002afc:	d819      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002afe:	2b20      	cmp	r3, #32
 8002b00:	d00c      	beq.n	8002b1c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d815      	bhi.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d019      	beq.n	8002b3e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8002b0a:	2b10      	cmp	r3, #16
 8002b0c:	d111      	bne.n	8002b32 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002b0e:	4b77      	ldr	r3, [pc, #476]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b12:	4a76      	ldr	r2, [pc, #472]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b18:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b1a:	e011      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002b1c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b20:	3308      	adds	r3, #8
 8002b22:	2102      	movs	r1, #2
 8002b24:	4618      	mov	r0, r3
 8002b26:	f001 fac5 	bl	80040b4 <RCCEx_PLL2_Config>
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8002b30:	e006      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002b38:	e002      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b3a:	bf00      	nop
 8002b3c:	e000      	b.n	8002b40 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8002b3e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b40:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d10a      	bne.n	8002b5e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b4a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b4c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8002b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b56:	4a65      	ldr	r2, [pc, #404]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b58:	430b      	orrs	r3, r1
 8002b5a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b5c:	e003      	b.n	8002b66 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002b62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8002b72:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002b76:	2300      	movs	r3, #0
 8002b78:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002b7c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8002b80:	460b      	mov	r3, r1
 8002b82:	4313      	orrs	r3, r2
 8002b84:	d051      	beq.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002b86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002b8a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b90:	d035      	beq.n	8002bfe <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002b92:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002b96:	d82e      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002b98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002b9c:	d031      	beq.n	8002c02 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002b9e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002ba2:	d828      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002ba4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002ba8:	d01a      	beq.n	8002be0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bae:	d822      	bhi.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d003      	beq.n	8002bbc <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002bb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bb8:	d007      	beq.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002bba:	e01c      	b.n	8002bf6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002bbc:	4b4b      	ldr	r3, [pc, #300]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bc0:	4a4a      	ldr	r2, [pc, #296]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002bc2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bc6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bc8:	e01c      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002bca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002bce:	3308      	adds	r3, #8
 8002bd0:	2100      	movs	r1, #0
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f001 fa6e 	bl	80040b4 <RCCEx_PLL2_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bde:	e011      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002be0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002be4:	3328      	adds	r3, #40	; 0x28
 8002be6:	2100      	movs	r1, #0
 8002be8:	4618      	mov	r0, r3
 8002bea:	f001 fb15 	bl	8004218 <RCCEx_PLL3_Config>
 8002bee:	4603      	mov	r3, r0
 8002bf0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002bf4:	e006      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002bfc:	e002      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002bfe:	bf00      	nop
 8002c00:	e000      	b.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002c02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002c0c:	4b37      	ldr	r3, [pc, #220]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c10:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8002c14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c1a:	4a34      	ldr	r2, [pc, #208]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002c1c:	430b      	orrs	r3, r1
 8002c1e:	6513      	str	r3, [r2, #80]	; 0x50
 8002c20:	e003      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c22:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002c26:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c32:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8002c36:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8002c40:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8002c44:	460b      	mov	r3, r1
 8002c46:	4313      	orrs	r3, r2
 8002c48:	d056      	beq.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002c4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c4e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002c50:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c54:	d033      	beq.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002c56:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002c5a:	d82c      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c5c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c60:	d02f      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002c62:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c66:	d826      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c68:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c6c:	d02b      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002c6e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8002c72:	d820      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c74:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c78:	d012      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002c7a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002c7e:	d81a      	bhi.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d022      	beq.n	8002cca <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002c84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c88:	d115      	bne.n	8002cb6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002c8e:	3308      	adds	r3, #8
 8002c90:	2101      	movs	r1, #1
 8002c92:	4618      	mov	r0, r3
 8002c94:	f001 fa0e 	bl	80040b4 <RCCEx_PLL2_Config>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002c9e:	e015      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002ca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ca4:	3328      	adds	r3, #40	; 0x28
 8002ca6:	2101      	movs	r1, #1
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f001 fab5 	bl	8004218 <RCCEx_PLL3_Config>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002cb4:	e00a      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cb6:	2301      	movs	r3, #1
 8002cb8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002cbc:	e006      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cbe:	bf00      	nop
 8002cc0:	e004      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cc2:	bf00      	nop
 8002cc4:	e002      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cc6:	bf00      	nop
 8002cc8:	e000      	b.n	8002ccc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002cca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ccc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	d10d      	bne.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002cd4:	4b05      	ldr	r3, [pc, #20]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002cd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002cd8:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8002cdc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ce0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002ce2:	4a02      	ldr	r2, [pc, #8]	; (8002cec <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ce4:	430b      	orrs	r3, r1
 8002ce6:	6513      	str	r3, [r2, #80]	; 0x50
 8002ce8:	e006      	b.n	8002cf8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002cea:	bf00      	nop
 8002cec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002cf0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002cf4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002cf8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002cfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d00:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8002d04:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8002d08:	2300      	movs	r3, #0
 8002d0a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8002d0e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8002d12:	460b      	mov	r3, r1
 8002d14:	4313      	orrs	r3, r2
 8002d16:	d055      	beq.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002d18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d1c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002d20:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d24:	d033      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002d26:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d2a:	d82c      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d30:	d02f      	beq.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d826      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d38:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d3c:	d02b      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002d3e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8002d42:	d820      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d48:	d012      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002d4a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d4e:	d81a      	bhi.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d022      	beq.n	8002d9a <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002d54:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d58:	d115      	bne.n	8002d86 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d5e:	3308      	adds	r3, #8
 8002d60:	2101      	movs	r1, #1
 8002d62:	4618      	mov	r0, r3
 8002d64:	f001 f9a6 	bl	80040b4 <RCCEx_PLL2_Config>
 8002d68:	4603      	mov	r3, r0
 8002d6a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d6e:	e015      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002d70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002d74:	3328      	adds	r3, #40	; 0x28
 8002d76:	2101      	movs	r1, #1
 8002d78:	4618      	mov	r0, r3
 8002d7a:	f001 fa4d 	bl	8004218 <RCCEx_PLL3_Config>
 8002d7e:	4603      	mov	r3, r0
 8002d80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002d84:	e00a      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002d86:	2301      	movs	r3, #1
 8002d88:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002d8c:	e006      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d8e:	bf00      	nop
 8002d90:	e004      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d92:	bf00      	nop
 8002d94:	e002      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d96:	bf00      	nop
 8002d98:	e000      	b.n	8002d9c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002d9a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d9c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10b      	bne.n	8002dbc <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002da4:	4ba3      	ldr	r3, [pc, #652]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8002dac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002db0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8002db4:	4a9f      	ldr	r2, [pc, #636]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002db6:	430b      	orrs	r3, r1
 8002db8:	6593      	str	r3, [r2, #88]	; 0x58
 8002dba:	e003      	b.n	8002dc4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002dbc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002dc0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002dc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002dc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dcc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8002dd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8002dda:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8002dde:	460b      	mov	r3, r1
 8002de0:	4313      	orrs	r3, r2
 8002de2:	d037      	beq.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002de4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002de8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002dee:	d00e      	beq.n	8002e0e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8002df0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002df4:	d816      	bhi.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d018      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x708>
 8002dfa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002dfe:	d111      	bne.n	8002e24 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e00:	4b8c      	ldr	r3, [pc, #560]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e04:	4a8b      	ldr	r2, [pc, #556]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e06:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e0a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e0c:	e00f      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002e0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e12:	3308      	adds	r3, #8
 8002e14:	2101      	movs	r1, #1
 8002e16:	4618      	mov	r0, r3
 8002e18:	f001 f94c 	bl	80040b4 <RCCEx_PLL2_Config>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002e22:	e004      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002e24:	2301      	movs	r3, #1
 8002e26:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002e2a:	e000      	b.n	8002e2e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 8002e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002e2e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d10a      	bne.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e36:	4b7f      	ldr	r3, [pc, #508]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e3a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8002e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e44:	4a7b      	ldr	r2, [pc, #492]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e46:	430b      	orrs	r3, r1
 8002e48:	6513      	str	r3, [r2, #80]	; 0x50
 8002e4a:	e003      	b.n	8002e54 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e4c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002e50:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002e54:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e5c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8002e60:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002e64:	2300      	movs	r3, #0
 8002e66:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002e6a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4313      	orrs	r3, r2
 8002e72:	d039      	beq.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002e74:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e7a:	2b03      	cmp	r3, #3
 8002e7c:	d81c      	bhi.n	8002eb8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 8002e7e:	a201      	add	r2, pc, #4	; (adr r2, 8002e84 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8002e80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e84:	08002ec1 	.word	0x08002ec1
 8002e88:	08002e95 	.word	0x08002e95
 8002e8c:	08002ea3 	.word	0x08002ea3
 8002e90:	08002ec1 	.word	0x08002ec1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002e94:	4b67      	ldr	r3, [pc, #412]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e98:	4a66      	ldr	r2, [pc, #408]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002e9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e9e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002ea0:	e00f      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002ea2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ea6:	3308      	adds	r3, #8
 8002ea8:	2102      	movs	r1, #2
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f001 f902 	bl	80040b4 <RCCEx_PLL2_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002eb6:	e004      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002ebe:	e000      	b.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8002ec0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ec2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002eca:	4b5a      	ldr	r3, [pc, #360]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002ecc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002ece:	f023 0103 	bic.w	r1, r3, #3
 8002ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ed6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ed8:	4a56      	ldr	r2, [pc, #344]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002eda:	430b      	orrs	r3, r1
 8002edc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002ede:	e003      	b.n	8002ee8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ee0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002ee4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ee8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ef0:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8002ef4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002ef8:	2300      	movs	r3, #0
 8002efa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002efe:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8002f02:	460b      	mov	r3, r1
 8002f04:	4313      	orrs	r3, r2
 8002f06:	f000 809f 	beq.w	8003048 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f0a:	4b4b      	ldr	r3, [pc, #300]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a4a      	ldr	r2, [pc, #296]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f14:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f16:	f7fe f8c1 	bl	800109c <HAL_GetTick>
 8002f1a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f1e:	e00b      	b.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f20:	f7fe f8bc 	bl	800109c <HAL_GetTick>
 8002f24:	4602      	mov	r2, r0
 8002f26:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002f2a:	1ad3      	subs	r3, r2, r3
 8002f2c:	2b64      	cmp	r3, #100	; 0x64
 8002f2e:	d903      	bls.n	8002f38 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8002f30:	2303      	movs	r3, #3
 8002f32:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8002f36:	e005      	b.n	8002f44 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f38:	4b3f      	ldr	r3, [pc, #252]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d0ed      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8002f44:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d179      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002f4c:	4b39      	ldr	r3, [pc, #228]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002f50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f54:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f58:	4053      	eors	r3, r2
 8002f5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d015      	beq.n	8002f8e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002f62:	4b34      	ldr	r3, [pc, #208]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f6a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002f6e:	4b31      	ldr	r3, [pc, #196]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f72:	4a30      	ldr	r2, [pc, #192]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f78:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002f7a:	4b2e      	ldr	r3, [pc, #184]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a2d      	ldr	r2, [pc, #180]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f80:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002f86:	4a2b      	ldr	r2, [pc, #172]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002f88:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8002f8c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002f92:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002f96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f9a:	d118      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9c:	f7fe f87e 	bl	800109c <HAL_GetTick>
 8002fa0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fa4:	e00d      	b.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fa6:	f7fe f879 	bl	800109c <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8002fb0:	1ad2      	subs	r2, r2, r3
 8002fb2:	f241 3388 	movw	r3, #5000	; 0x1388
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d903      	bls.n	8002fc2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8002fba:	2303      	movs	r3, #3
 8002fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8002fc0:	e005      	b.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002fc2:	4b1c      	ldr	r3, [pc, #112]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc6:	f003 0302 	and.w	r3, r3, #2
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d0eb      	beq.n	8002fa6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8002fce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d129      	bne.n	800302a <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002fd6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002fda:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002fde:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fe2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fe6:	d10e      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8002fe8:	4b12      	ldr	r3, [pc, #72]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8002fea:	691b      	ldr	r3, [r3, #16]
 8002fec:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8002ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002ff4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8002ff8:	091a      	lsrs	r2, r3, #4
 8002ffa:	4b10      	ldr	r3, [pc, #64]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8002ffc:	4013      	ands	r3, r2
 8002ffe:	4a0d      	ldr	r2, [pc, #52]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003000:	430b      	orrs	r3, r1
 8003002:	6113      	str	r3, [r2, #16]
 8003004:	e005      	b.n	8003012 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003006:	4b0b      	ldr	r3, [pc, #44]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003008:	691b      	ldr	r3, [r3, #16]
 800300a:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800300c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003010:	6113      	str	r3, [r2, #16]
 8003012:	4b08      	ldr	r3, [pc, #32]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003014:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003016:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800301a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800301e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003022:	4a04      	ldr	r2, [pc, #16]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003024:	430b      	orrs	r3, r1
 8003026:	6713      	str	r3, [r2, #112]	; 0x70
 8003028:	e00e      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800302a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800302e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003032:	e009      	b.n	8003048 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003034:	58024400 	.word	0x58024400
 8003038:	58024800 	.word	0x58024800
 800303c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003044:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800304c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003050:	f002 0301 	and.w	r3, r2, #1
 8003054:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003058:	2300      	movs	r3, #0
 800305a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800305e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003062:	460b      	mov	r3, r1
 8003064:	4313      	orrs	r3, r2
 8003066:	f000 8089 	beq.w	800317c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800306a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800306e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003070:	2b28      	cmp	r3, #40	; 0x28
 8003072:	d86b      	bhi.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003074:	a201      	add	r2, pc, #4	; (adr r2, 800307c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800307a:	bf00      	nop
 800307c:	08003155 	.word	0x08003155
 8003080:	0800314d 	.word	0x0800314d
 8003084:	0800314d 	.word	0x0800314d
 8003088:	0800314d 	.word	0x0800314d
 800308c:	0800314d 	.word	0x0800314d
 8003090:	0800314d 	.word	0x0800314d
 8003094:	0800314d 	.word	0x0800314d
 8003098:	0800314d 	.word	0x0800314d
 800309c:	08003121 	.word	0x08003121
 80030a0:	0800314d 	.word	0x0800314d
 80030a4:	0800314d 	.word	0x0800314d
 80030a8:	0800314d 	.word	0x0800314d
 80030ac:	0800314d 	.word	0x0800314d
 80030b0:	0800314d 	.word	0x0800314d
 80030b4:	0800314d 	.word	0x0800314d
 80030b8:	0800314d 	.word	0x0800314d
 80030bc:	08003137 	.word	0x08003137
 80030c0:	0800314d 	.word	0x0800314d
 80030c4:	0800314d 	.word	0x0800314d
 80030c8:	0800314d 	.word	0x0800314d
 80030cc:	0800314d 	.word	0x0800314d
 80030d0:	0800314d 	.word	0x0800314d
 80030d4:	0800314d 	.word	0x0800314d
 80030d8:	0800314d 	.word	0x0800314d
 80030dc:	08003155 	.word	0x08003155
 80030e0:	0800314d 	.word	0x0800314d
 80030e4:	0800314d 	.word	0x0800314d
 80030e8:	0800314d 	.word	0x0800314d
 80030ec:	0800314d 	.word	0x0800314d
 80030f0:	0800314d 	.word	0x0800314d
 80030f4:	0800314d 	.word	0x0800314d
 80030f8:	0800314d 	.word	0x0800314d
 80030fc:	08003155 	.word	0x08003155
 8003100:	0800314d 	.word	0x0800314d
 8003104:	0800314d 	.word	0x0800314d
 8003108:	0800314d 	.word	0x0800314d
 800310c:	0800314d 	.word	0x0800314d
 8003110:	0800314d 	.word	0x0800314d
 8003114:	0800314d 	.word	0x0800314d
 8003118:	0800314d 	.word	0x0800314d
 800311c:	08003155 	.word	0x08003155
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003120:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003124:	3308      	adds	r3, #8
 8003126:	2101      	movs	r1, #1
 8003128:	4618      	mov	r0, r3
 800312a:	f000 ffc3 	bl	80040b4 <RCCEx_PLL2_Config>
 800312e:	4603      	mov	r3, r0
 8003130:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003134:	e00f      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003136:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800313a:	3328      	adds	r3, #40	; 0x28
 800313c:	2101      	movs	r1, #1
 800313e:	4618      	mov	r0, r3
 8003140:	f001 f86a 	bl	8004218 <RCCEx_PLL3_Config>
 8003144:	4603      	mov	r3, r0
 8003146:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800314a:	e004      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003152:	e000      	b.n	8003156 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003154:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003156:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800315a:	2b00      	cmp	r3, #0
 800315c:	d10a      	bne.n	8003174 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800315e:	4bbf      	ldr	r3, [pc, #764]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003160:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003162:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003166:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800316a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800316c:	4abb      	ldr	r2, [pc, #748]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 800316e:	430b      	orrs	r3, r1
 8003170:	6553      	str	r3, [r2, #84]	; 0x54
 8003172:	e003      	b.n	800317c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003174:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003178:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800317c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	f002 0302 	and.w	r3, r2, #2
 8003188:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800318c:	2300      	movs	r3, #0
 800318e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003192:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003196:	460b      	mov	r3, r1
 8003198:	4313      	orrs	r3, r2
 800319a:	d041      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800319c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80031a2:	2b05      	cmp	r3, #5
 80031a4:	d824      	bhi.n	80031f0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 80031a6:	a201      	add	r2, pc, #4	; (adr r2, 80031ac <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 80031a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ac:	080031f9 	.word	0x080031f9
 80031b0:	080031c5 	.word	0x080031c5
 80031b4:	080031db 	.word	0x080031db
 80031b8:	080031f9 	.word	0x080031f9
 80031bc:	080031f9 	.word	0x080031f9
 80031c0:	080031f9 	.word	0x080031f9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031c8:	3308      	adds	r3, #8
 80031ca:	2101      	movs	r1, #1
 80031cc:	4618      	mov	r0, r3
 80031ce:	f000 ff71 	bl	80040b4 <RCCEx_PLL2_Config>
 80031d2:	4603      	mov	r3, r0
 80031d4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031d8:	e00f      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80031de:	3328      	adds	r3, #40	; 0x28
 80031e0:	2101      	movs	r1, #1
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 f818 	bl	8004218 <RCCEx_PLL3_Config>
 80031e8:	4603      	mov	r3, r0
 80031ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 80031ee:	e004      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80031f6:	e000      	b.n	80031fa <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 80031f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003202:	4b96      	ldr	r3, [pc, #600]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003206:	f023 0107 	bic.w	r1, r3, #7
 800320a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800320e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003210:	4a92      	ldr	r2, [pc, #584]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003212:	430b      	orrs	r3, r1
 8003214:	6553      	str	r3, [r2, #84]	; 0x54
 8003216:	e003      	b.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003218:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800321c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003220:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003228:	f002 0304 	and.w	r3, r2, #4
 800322c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003230:	2300      	movs	r3, #0
 8003232:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003236:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 800323a:	460b      	mov	r3, r1
 800323c:	4313      	orrs	r3, r2
 800323e:	d044      	beq.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003240:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003244:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003248:	2b05      	cmp	r3, #5
 800324a:	d825      	bhi.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 800324c:	a201      	add	r2, pc, #4	; (adr r2, 8003254 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 800324e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003252:	bf00      	nop
 8003254:	080032a1 	.word	0x080032a1
 8003258:	0800326d 	.word	0x0800326d
 800325c:	08003283 	.word	0x08003283
 8003260:	080032a1 	.word	0x080032a1
 8003264:	080032a1 	.word	0x080032a1
 8003268:	080032a1 	.word	0x080032a1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800326c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003270:	3308      	adds	r3, #8
 8003272:	2101      	movs	r1, #1
 8003274:	4618      	mov	r0, r3
 8003276:	f000 ff1d 	bl	80040b4 <RCCEx_PLL2_Config>
 800327a:	4603      	mov	r3, r0
 800327c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003280:	e00f      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003282:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003286:	3328      	adds	r3, #40	; 0x28
 8003288:	2101      	movs	r1, #1
 800328a:	4618      	mov	r0, r3
 800328c:	f000 ffc4 	bl	8004218 <RCCEx_PLL3_Config>
 8003290:	4603      	mov	r3, r0
 8003292:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003296:	e004      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003298:	2301      	movs	r3, #1
 800329a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800329e:	e000      	b.n	80032a2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 80032a0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80032aa:	4b6c      	ldr	r3, [pc, #432]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032ae:	f023 0107 	bic.w	r1, r3, #7
 80032b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032b6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80032ba:	4a68      	ldr	r2, [pc, #416]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 80032bc:	430b      	orrs	r3, r1
 80032be:	6593      	str	r3, [r2, #88]	; 0x58
 80032c0:	e003      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80032ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d2:	f002 0320 	and.w	r3, r2, #32
 80032d6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80032da:	2300      	movs	r3, #0
 80032dc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80032e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80032e4:	460b      	mov	r3, r1
 80032e6:	4313      	orrs	r3, r2
 80032e8:	d055      	beq.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 80032ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80032f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032f6:	d033      	beq.n	8003360 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 80032f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80032fc:	d82c      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 80032fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003302:	d02f      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003308:	d826      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 800330a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800330e:	d02b      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003310:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003314:	d820      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003316:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800331a:	d012      	beq.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 800331c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003320:	d81a      	bhi.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003322:	2b00      	cmp	r3, #0
 8003324:	d022      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800332a:	d115      	bne.n	8003358 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800332c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003330:	3308      	adds	r3, #8
 8003332:	2100      	movs	r1, #0
 8003334:	4618      	mov	r0, r3
 8003336:	f000 febd 	bl	80040b4 <RCCEx_PLL2_Config>
 800333a:	4603      	mov	r3, r0
 800333c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003340:	e015      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003342:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003346:	3328      	adds	r3, #40	; 0x28
 8003348:	2102      	movs	r1, #2
 800334a:	4618      	mov	r0, r3
 800334c:	f000 ff64 	bl	8004218 <RCCEx_PLL3_Config>
 8003350:	4603      	mov	r3, r0
 8003352:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003356:	e00a      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003358:	2301      	movs	r3, #1
 800335a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800335e:	e006      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003360:	bf00      	nop
 8003362:	e004      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003364:	bf00      	nop
 8003366:	e002      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003368:	bf00      	nop
 800336a:	e000      	b.n	800336e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 800336c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800336e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003372:	2b00      	cmp	r3, #0
 8003374:	d10b      	bne.n	800338e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003376:	4b39      	ldr	r3, [pc, #228]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003378:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800337a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 800337e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003386:	4a35      	ldr	r2, [pc, #212]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003388:	430b      	orrs	r3, r1
 800338a:	6553      	str	r3, [r2, #84]	; 0x54
 800338c:	e003      	b.n	8003396 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800338e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003392:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003396:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800339e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 80033a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80033a6:	2300      	movs	r3, #0
 80033a8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033ac:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4313      	orrs	r3, r2
 80033b4:	d058      	beq.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80033b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ba:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033be:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c2:	d033      	beq.n	800342c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 80033c4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80033c8:	d82c      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033ce:	d02f      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 80033d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033d4:	d826      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033d6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033da:	d02b      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 80033dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033e0:	d820      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033e6:	d012      	beq.n	800340e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 80033e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ec:	d81a      	bhi.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d022      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 80033f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033f6:	d115      	bne.n	8003424 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033fc:	3308      	adds	r3, #8
 80033fe:	2100      	movs	r1, #0
 8003400:	4618      	mov	r0, r3
 8003402:	f000 fe57 	bl	80040b4 <RCCEx_PLL2_Config>
 8003406:	4603      	mov	r3, r0
 8003408:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800340c:	e015      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800340e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003412:	3328      	adds	r3, #40	; 0x28
 8003414:	2102      	movs	r1, #2
 8003416:	4618      	mov	r0, r3
 8003418:	f000 fefe 	bl	8004218 <RCCEx_PLL3_Config>
 800341c:	4603      	mov	r3, r0
 800341e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003422:	e00a      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800342a:	e006      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 800342c:	bf00      	nop
 800342e:	e004      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003430:	bf00      	nop
 8003432:	e002      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003434:	bf00      	nop
 8003436:	e000      	b.n	800343a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003438:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800343e:	2b00      	cmp	r3, #0
 8003440:	d10e      	bne.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003442:	4b06      	ldr	r3, [pc, #24]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003444:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003446:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 800344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800344e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003452:	4a02      	ldr	r2, [pc, #8]	; (800345c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003454:	430b      	orrs	r3, r1
 8003456:	6593      	str	r3, [r2, #88]	; 0x58
 8003458:	e006      	b.n	8003468 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 800345a:	bf00      	nop
 800345c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003460:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003464:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003468:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800346c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003470:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003478:	2300      	movs	r3, #0
 800347a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800347e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003482:	460b      	mov	r3, r1
 8003484:	4313      	orrs	r3, r2
 8003486:	d055      	beq.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003488:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800348c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003490:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003494:	d033      	beq.n	80034fe <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003496:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800349a:	d82c      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 800349c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a0:	d02f      	beq.n	8003502 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 80034a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034a6:	d826      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034a8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034ac:	d02b      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 80034ae:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80034b2:	d820      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034b8:	d012      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 80034ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80034be:	d81a      	bhi.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d022      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 80034c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80034c8:	d115      	bne.n	80034f6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ce:	3308      	adds	r3, #8
 80034d0:	2100      	movs	r1, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	f000 fdee 	bl	80040b4 <RCCEx_PLL2_Config>
 80034d8:	4603      	mov	r3, r0
 80034da:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034de:	e015      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80034e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034e4:	3328      	adds	r3, #40	; 0x28
 80034e6:	2102      	movs	r1, #2
 80034e8:	4618      	mov	r0, r3
 80034ea:	f000 fe95 	bl	8004218 <RCCEx_PLL3_Config>
 80034ee:	4603      	mov	r3, r0
 80034f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 80034f4:	e00a      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80034fc:	e006      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 80034fe:	bf00      	nop
 8003500:	e004      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003502:	bf00      	nop
 8003504:	e002      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003506:	bf00      	nop
 8003508:	e000      	b.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 800350a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800350c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10b      	bne.n	800352c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003514:	4ba1      	ldr	r3, [pc, #644]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003516:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003518:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 800351c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003520:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003524:	4a9d      	ldr	r2, [pc, #628]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003526:	430b      	orrs	r3, r1
 8003528:	6593      	str	r3, [r2, #88]	; 0x58
 800352a:	e003      	b.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800352c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003530:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003534:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800353c:	f002 0308 	and.w	r3, r2, #8
 8003540:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003544:	2300      	movs	r3, #0
 8003546:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800354a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 800354e:	460b      	mov	r3, r1
 8003550:	4313      	orrs	r3, r2
 8003552:	d01e      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003554:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800355c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003560:	d10c      	bne.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003562:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003566:	3328      	adds	r3, #40	; 0x28
 8003568:	2102      	movs	r1, #2
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fe54 	bl	8004218 <RCCEx_PLL3_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	2b00      	cmp	r3, #0
 8003574:	d002      	beq.n	800357c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8003576:	2301      	movs	r3, #1
 8003578:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800357c:	4b87      	ldr	r3, [pc, #540]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800357e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003580:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003584:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003588:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800358c:	4a83      	ldr	r2, [pc, #524]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800358e:	430b      	orrs	r3, r1
 8003590:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003592:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359a:	f002 0310 	and.w	r3, r2, #16
 800359e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80035a2:	2300      	movs	r3, #0
 80035a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80035a8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80035ac:	460b      	mov	r3, r1
 80035ae:	4313      	orrs	r3, r2
 80035b0:	d01e      	beq.n	80035f0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80035b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035be:	d10c      	bne.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80035c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035c4:	3328      	adds	r3, #40	; 0x28
 80035c6:	2102      	movs	r1, #2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f000 fe25 	bl	8004218 <RCCEx_PLL3_Config>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d002      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80035da:	4b70      	ldr	r3, [pc, #448]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035de:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80035e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80035ea:	4a6c      	ldr	r2, [pc, #432]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80035ec:	430b      	orrs	r3, r1
 80035ee:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80035f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035f8:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80035fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003600:	2300      	movs	r3, #0
 8003602:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003606:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 800360a:	460b      	mov	r3, r1
 800360c:	4313      	orrs	r3, r2
 800360e:	d03e      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003614:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8003618:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800361c:	d022      	beq.n	8003664 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 800361e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003622:	d81b      	bhi.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8003624:	2b00      	cmp	r3, #0
 8003626:	d003      	beq.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8003628:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800362c:	d00b      	beq.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 800362e:	e015      	b.n	800365c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003630:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003634:	3308      	adds	r3, #8
 8003636:	2100      	movs	r1, #0
 8003638:	4618      	mov	r0, r3
 800363a:	f000 fd3b 	bl	80040b4 <RCCEx_PLL2_Config>
 800363e:	4603      	mov	r3, r0
 8003640:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003644:	e00f      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003646:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364a:	3328      	adds	r3, #40	; 0x28
 800364c:	2102      	movs	r1, #2
 800364e:	4618      	mov	r0, r3
 8003650:	f000 fde2 	bl	8004218 <RCCEx_PLL3_Config>
 8003654:	4603      	mov	r3, r0
 8003656:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800365a:	e004      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800365c:	2301      	movs	r3, #1
 800365e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003662:	e000      	b.n	8003666 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8003664:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003666:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10b      	bne.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800366e:	4b4b      	ldr	r3, [pc, #300]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003670:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003672:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8003676:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800367a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 800367e:	4a47      	ldr	r2, [pc, #284]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003680:	430b      	orrs	r3, r1
 8003682:	6593      	str	r3, [r2, #88]	; 0x58
 8003684:	e003      	b.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003686:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800368a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003692:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003696:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800369a:	67bb      	str	r3, [r7, #120]	; 0x78
 800369c:	2300      	movs	r3, #0
 800369e:	67fb      	str	r3, [r7, #124]	; 0x7c
 80036a0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 80036a4:	460b      	mov	r3, r1
 80036a6:	4313      	orrs	r3, r2
 80036a8:	d03b      	beq.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80036aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036b6:	d01f      	beq.n	80036f8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 80036b8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80036bc:	d818      	bhi.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 80036be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80036c2:	d003      	beq.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 80036c4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80036c8:	d007      	beq.n	80036da <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80036ca:	e011      	b.n	80036f0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80036cc:	4b33      	ldr	r3, [pc, #204]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80036d2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 80036d8:	e00f      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80036da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036de:	3328      	adds	r3, #40	; 0x28
 80036e0:	2101      	movs	r1, #1
 80036e2:	4618      	mov	r0, r3
 80036e4:	f000 fd98 	bl	8004218 <RCCEx_PLL3_Config>
 80036e8:	4603      	mov	r3, r0
 80036ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80036ee:	e004      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036f0:	2301      	movs	r3, #1
 80036f2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036f6:	e000      	b.n	80036fa <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80036f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d10b      	bne.n	800371a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003702:	4b26      	ldr	r3, [pc, #152]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800370a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800370e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003712:	4a22      	ldr	r2, [pc, #136]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003714:	430b      	orrs	r3, r1
 8003716:	6553      	str	r3, [r2, #84]	; 0x54
 8003718:	e003      	b.n	8003722 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800371a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800371e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003722:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800372a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 800372e:	673b      	str	r3, [r7, #112]	; 0x70
 8003730:	2300      	movs	r3, #0
 8003732:	677b      	str	r3, [r7, #116]	; 0x74
 8003734:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8003738:	460b      	mov	r3, r1
 800373a:	4313      	orrs	r3, r2
 800373c:	d034      	beq.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800373e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003744:	2b00      	cmp	r3, #0
 8003746:	d003      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d007      	beq.n	800375e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 800374e:	e011      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003750:	4b12      	ldr	r3, [pc, #72]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a11      	ldr	r2, [pc, #68]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003756:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800375a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800375c:	e00e      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800375e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003762:	3308      	adds	r3, #8
 8003764:	2102      	movs	r1, #2
 8003766:	4618      	mov	r0, r3
 8003768:	f000 fca4 	bl	80040b4 <RCCEx_PLL2_Config>
 800376c:	4603      	mov	r3, r0
 800376e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003772:	e003      	b.n	800377c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800377a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800377c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003780:	2b00      	cmp	r3, #0
 8003782:	d10d      	bne.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8003784:	4b05      	ldr	r3, [pc, #20]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003786:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003788:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800378c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003790:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003792:	4a02      	ldr	r2, [pc, #8]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003794:	430b      	orrs	r3, r1
 8003796:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003798:	e006      	b.n	80037a8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800379a:	bf00      	nop
 800379c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80037a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 80037b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80037b6:	2300      	movs	r3, #0
 80037b8:	66fb      	str	r3, [r7, #108]	; 0x6c
 80037ba:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 80037be:	460b      	mov	r3, r1
 80037c0:	4313      	orrs	r3, r2
 80037c2:	d00c      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80037c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c8:	3328      	adds	r3, #40	; 0x28
 80037ca:	2102      	movs	r1, #2
 80037cc:	4618      	mov	r0, r3
 80037ce:	f000 fd23 	bl	8004218 <RCCEx_PLL3_Config>
 80037d2:	4603      	mov	r3, r0
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d002      	beq.n	80037de <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80037de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037e6:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80037ea:	663b      	str	r3, [r7, #96]	; 0x60
 80037ec:	2300      	movs	r3, #0
 80037ee:	667b      	str	r3, [r7, #100]	; 0x64
 80037f0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80037f4:	460b      	mov	r3, r1
 80037f6:	4313      	orrs	r3, r2
 80037f8:	d038      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80037fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003806:	d018      	beq.n	800383a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8003808:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380c:	d811      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800380e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003812:	d014      	beq.n	800383e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8003814:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003818:	d80b      	bhi.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 800381a:	2b00      	cmp	r3, #0
 800381c:	d011      	beq.n	8003842 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 800381e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003822:	d106      	bne.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003824:	4bc3      	ldr	r3, [pc, #780]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003826:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003828:	4ac2      	ldr	r2, [pc, #776]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800382a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800382e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003830:	e008      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003838:	e004      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800383a:	bf00      	nop
 800383c:	e002      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 800383e:	bf00      	nop
 8003840:	e000      	b.n	8003844 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8003842:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003844:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003848:	2b00      	cmp	r3, #0
 800384a:	d10b      	bne.n	8003864 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800384c:	4bb9      	ldr	r3, [pc, #740]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800384e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003850:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8003854:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003858:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800385c:	4ab5      	ldr	r2, [pc, #724]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800385e:	430b      	orrs	r3, r1
 8003860:	6553      	str	r3, [r2, #84]	; 0x54
 8003862:	e003      	b.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003864:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003868:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800386c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8003878:	65bb      	str	r3, [r7, #88]	; 0x58
 800387a:	2300      	movs	r3, #0
 800387c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800387e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8003888:	4baa      	ldr	r3, [pc, #680]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800388a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800388c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003890:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003896:	4aa7      	ldr	r2, [pc, #668]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003898:	430b      	orrs	r3, r1
 800389a:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800389c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 80038a8:	653b      	str	r3, [r7, #80]	; 0x50
 80038aa:	2300      	movs	r3, #0
 80038ac:	657b      	str	r3, [r7, #84]	; 0x54
 80038ae:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80038b8:	4b9e      	ldr	r3, [pc, #632]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ba:	691b      	ldr	r3, [r3, #16]
 80038bc:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 80038c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 80038c8:	4a9a      	ldr	r2, [pc, #616]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80038ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 80038da:	64bb      	str	r3, [r7, #72]	; 0x48
 80038dc:	2300      	movs	r3, #0
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80038e0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d009      	beq.n	80038fe <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80038ea:	4b92      	ldr	r3, [pc, #584]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038ee:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80038f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80038f8:	4a8e      	ldr	r2, [pc, #568]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80038fa:	430b      	orrs	r3, r1
 80038fc:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80038fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003906:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 800390a:	643b      	str	r3, [r7, #64]	; 0x40
 800390c:	2300      	movs	r3, #0
 800390e:	647b      	str	r3, [r7, #68]	; 0x44
 8003910:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8003914:	460b      	mov	r3, r1
 8003916:	4313      	orrs	r3, r2
 8003918:	d00e      	beq.n	8003938 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800391a:	4b86      	ldr	r3, [pc, #536]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800391c:	691b      	ldr	r3, [r3, #16]
 800391e:	4a85      	ldr	r2, [pc, #532]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003920:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003924:	6113      	str	r3, [r2, #16]
 8003926:	4b83      	ldr	r3, [pc, #524]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003928:	6919      	ldr	r1, [r3, #16]
 800392a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800392e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8003932:	4a80      	ldr	r2, [pc, #512]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003934:	430b      	orrs	r3, r1
 8003936:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003940:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
 8003946:	2300      	movs	r3, #0
 8003948:	63fb      	str	r3, [r7, #60]	; 0x3c
 800394a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800394e:	460b      	mov	r3, r1
 8003950:	4313      	orrs	r3, r2
 8003952:	d009      	beq.n	8003968 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003954:	4b77      	ldr	r3, [pc, #476]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003958:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 800395c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003962:	4a74      	ldr	r2, [pc, #464]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003964:	430b      	orrs	r3, r1
 8003966:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003968:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003970:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8003974:	633b      	str	r3, [r7, #48]	; 0x30
 8003976:	2300      	movs	r3, #0
 8003978:	637b      	str	r3, [r7, #52]	; 0x34
 800397a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800397e:	460b      	mov	r3, r1
 8003980:	4313      	orrs	r3, r2
 8003982:	d00a      	beq.n	800399a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003984:	4b6b      	ldr	r3, [pc, #428]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003988:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 800398c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003990:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003994:	4a67      	ldr	r2, [pc, #412]	; (8003b34 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8003996:	430b      	orrs	r3, r1
 8003998:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800399a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a2:	2100      	movs	r1, #0
 80039a4:	62b9      	str	r1, [r7, #40]	; 0x28
 80039a6:	f003 0301 	and.w	r3, r3, #1
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80039ac:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 80039b0:	460b      	mov	r3, r1
 80039b2:	4313      	orrs	r3, r2
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80039b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039ba:	3308      	adds	r3, #8
 80039bc:	2100      	movs	r1, #0
 80039be:	4618      	mov	r0, r3
 80039c0:	f000 fb78 	bl	80040b4 <RCCEx_PLL2_Config>
 80039c4:	4603      	mov	r3, r0
 80039c6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80039ca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d003      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039d2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039d6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 80039da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039e2:	2100      	movs	r1, #0
 80039e4:	6239      	str	r1, [r7, #32]
 80039e6:	f003 0302 	and.w	r3, r3, #2
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
 80039ec:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80039f0:	460b      	mov	r3, r1
 80039f2:	4313      	orrs	r3, r2
 80039f4:	d011      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80039f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039fa:	3308      	adds	r3, #8
 80039fc:	2101      	movs	r1, #1
 80039fe:	4618      	mov	r0, r3
 8003a00:	f000 fb58 	bl	80040b4 <RCCEx_PLL2_Config>
 8003a04:	4603      	mov	r3, r0
 8003a06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d003      	beq.n	8003a1a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8003a1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a22:	2100      	movs	r1, #0
 8003a24:	61b9      	str	r1, [r7, #24]
 8003a26:	f003 0304 	and.w	r3, r3, #4
 8003a2a:	61fb      	str	r3, [r7, #28]
 8003a2c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003a30:	460b      	mov	r3, r1
 8003a32:	4313      	orrs	r3, r2
 8003a34:	d011      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003a36:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a3a:	3308      	adds	r3, #8
 8003a3c:	2102      	movs	r1, #2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	f000 fb38 	bl	80040b4 <RCCEx_PLL2_Config>
 8003a44:	4603      	mov	r3, r0
 8003a46:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003a4a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d003      	beq.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8003a5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a62:	2100      	movs	r1, #0
 8003a64:	6139      	str	r1, [r7, #16]
 8003a66:	f003 0308 	and.w	r3, r3, #8
 8003a6a:	617b      	str	r3, [r7, #20]
 8003a6c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8003a70:	460b      	mov	r3, r1
 8003a72:	4313      	orrs	r3, r2
 8003a74:	d011      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003a76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a7a:	3328      	adds	r3, #40	; 0x28
 8003a7c:	2100      	movs	r1, #0
 8003a7e:	4618      	mov	r0, r3
 8003a80:	f000 fbca 	bl	8004218 <RCCEx_PLL3_Config>
 8003a84:	4603      	mov	r3, r0
 8003a86:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 8003a8a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a96:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa2:	2100      	movs	r1, #0
 8003aa4:	60b9      	str	r1, [r7, #8]
 8003aa6:	f003 0310 	and.w	r3, r3, #16
 8003aaa:	60fb      	str	r3, [r7, #12]
 8003aac:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8003ab0:	460b      	mov	r3, r1
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	d011      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003ab6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003aba:	3328      	adds	r3, #40	; 0x28
 8003abc:	2101      	movs	r1, #1
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f000 fbaa 	bl	8004218 <RCCEx_PLL3_Config>
 8003ac4:	4603      	mov	r3, r0
 8003ac6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003aca:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d003      	beq.n	8003ada <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ad2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ad6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ae2:	2100      	movs	r1, #0
 8003ae4:	6039      	str	r1, [r7, #0]
 8003ae6:	f003 0320 	and.w	r3, r3, #32
 8003aea:	607b      	str	r3, [r7, #4]
 8003aec:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003af0:	460b      	mov	r3, r1
 8003af2:	4313      	orrs	r3, r2
 8003af4:	d011      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003af6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003afa:	3328      	adds	r3, #40	; 0x28
 8003afc:	2102      	movs	r1, #2
 8003afe:	4618      	mov	r0, r3
 8003b00:	f000 fb8a 	bl	8004218 <RCCEx_PLL3_Config>
 8003b04:	4603      	mov	r3, r0
 8003b06:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 8003b0a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b12:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b16:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 8003b1a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d101      	bne.n	8003b26 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8003b22:	2300      	movs	r3, #0
 8003b24:	e000      	b.n	8003b28 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8003b2e:	46bd      	mov	sp, r7
 8003b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b34:	58024400 	.word	0x58024400

08003b38 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003b3c:	f7fe fd96 	bl	800266c <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b06      	ldr	r3, [pc, #24]	; (8003b5c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003b44:	6a1b      	ldr	r3, [r3, #32]
 8003b46:	091b      	lsrs	r3, r3, #4
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4904      	ldr	r1, [pc, #16]	; (8003b60 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	f003 031f 	and.w	r3, r3, #31
 8003b54:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003b58:	4618      	mov	r0, r3
 8003b5a:	bd80      	pop	{r7, pc}
 8003b5c:	58024400 	.word	0x58024400
 8003b60:	0800680c 	.word	0x0800680c

08003b64 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b089      	sub	sp, #36	; 0x24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003b6c:	4ba1      	ldr	r3, [pc, #644]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b70:	f003 0303 	and.w	r3, r3, #3
 8003b74:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003b76:	4b9f      	ldr	r3, [pc, #636]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b7a:	0b1b      	lsrs	r3, r3, #12
 8003b7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b80:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003b82:	4b9c      	ldr	r3, [pc, #624]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b86:	091b      	lsrs	r3, r3, #4
 8003b88:	f003 0301 	and.w	r3, r3, #1
 8003b8c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003b8e:	4b99      	ldr	r3, [pc, #612]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b92:	08db      	lsrs	r3, r3, #3
 8003b94:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003b98:	693a      	ldr	r2, [r7, #16]
 8003b9a:	fb02 f303 	mul.w	r3, r2, r3
 8003b9e:	ee07 3a90 	vmov	s15, r3
 8003ba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ba6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	f000 8111 	beq.w	8003dd4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003bb2:	69bb      	ldr	r3, [r7, #24]
 8003bb4:	2b02      	cmp	r3, #2
 8003bb6:	f000 8083 	beq.w	8003cc0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003bba:	69bb      	ldr	r3, [r7, #24]
 8003bbc:	2b02      	cmp	r3, #2
 8003bbe:	f200 80a1 	bhi.w	8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003bc2:	69bb      	ldr	r3, [r7, #24]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d003      	beq.n	8003bd0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d056      	beq.n	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003bce:	e099      	b.n	8003d04 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003bd0:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f003 0320 	and.w	r3, r3, #32
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d02d      	beq.n	8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003bdc:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	08db      	lsrs	r3, r3, #3
 8003be2:	f003 0303 	and.w	r3, r3, #3
 8003be6:	4a84      	ldr	r2, [pc, #528]	; (8003df8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003be8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bec:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	ee07 3a90 	vmov	s15, r3
 8003bf4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bf8:	697b      	ldr	r3, [r7, #20]
 8003bfa:	ee07 3a90 	vmov	s15, r3
 8003bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b7b      	ldr	r3, [pc, #492]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1a:	eddf 5a78 	vldr	s11, [pc, #480]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003c36:	e087      	b.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8003e00 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b6a      	ldr	r3, [pc, #424]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5e:	eddf 5a67 	vldr	s11, [pc, #412]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c7a:	e065      	b.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	ee07 3a90 	vmov	s15, r3
 8003c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c86:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c8a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c8e:	4b59      	ldr	r3, [pc, #356]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c92:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c96:	ee07 3a90 	vmov	s15, r3
 8003c9a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c9e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ca2:	eddf 5a56 	vldr	s11, [pc, #344]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003ca6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003caa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cb2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cb6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cbe:	e043      	b.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	ee07 3a90 	vmov	s15, r3
 8003cc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cca:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8003e08 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003cce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cd2:	4b48      	ldr	r3, [pc, #288]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003cd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ce2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ce6:	eddf 5a45 	vldr	s11, [pc, #276]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003cea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cf2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cf6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cfa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cfe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d02:	e021      	b.n	8003d48 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	ee07 3a90 	vmov	s15, r3
 8003d0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d0e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8003e04 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003d12:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d16:	4b37      	ldr	r3, [pc, #220]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d26:	ed97 6a03 	vldr	s12, [r7, #12]
 8003d2a:	eddf 5a34 	vldr	s11, [pc, #208]	; 8003dfc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003d2e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d32:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d36:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d3a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d3e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d42:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d46:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003d48:	4b2a      	ldr	r3, [pc, #168]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d4c:	0a5b      	lsrs	r3, r3, #9
 8003d4e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d52:	ee07 3a90 	vmov	s15, r3
 8003d56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d5e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d62:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d66:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d6e:	ee17 2a90 	vmov	r2, s15
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003d76:	4b1f      	ldr	r3, [pc, #124]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003d78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d7a:	0c1b      	lsrs	r3, r3, #16
 8003d7c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003d80:	ee07 3a90 	vmov	s15, r3
 8003d84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003d8c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003d90:	edd7 6a07 	vldr	s13, [r7, #28]
 8003d94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003d98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003d9c:	ee17 2a90 	vmov	r2, s15
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003da4:	4b13      	ldr	r3, [pc, #76]	; (8003df4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	0e1b      	lsrs	r3, r3, #24
 8003daa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003dae:	ee07 3a90 	vmov	s15, r3
 8003db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003db6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dca:	ee17 2a90 	vmov	r2, s15
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003dd2:	e008      	b.n	8003de6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2200      	movs	r2, #0
 8003de4:	609a      	str	r2, [r3, #8]
}
 8003de6:	bf00      	nop
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
 8003df8:	03d09000 	.word	0x03d09000
 8003dfc:	46000000 	.word	0x46000000
 8003e00:	4c742400 	.word	0x4c742400
 8003e04:	4a742400 	.word	0x4a742400
 8003e08:	4bbebc20 	.word	0x4bbebc20

08003e0c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b089      	sub	sp, #36	; 0x24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e14:	4ba1      	ldr	r3, [pc, #644]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e18:	f003 0303 	and.w	r3, r3, #3
 8003e1c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003e1e:	4b9f      	ldr	r3, [pc, #636]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e22:	0d1b      	lsrs	r3, r3, #20
 8003e24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e28:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003e2a:	4b9c      	ldr	r3, [pc, #624]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e2e:	0a1b      	lsrs	r3, r3, #8
 8003e30:	f003 0301 	and.w	r3, r3, #1
 8003e34:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003e36:	4b99      	ldr	r3, [pc, #612]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e3a:	08db      	lsrs	r3, r3, #3
 8003e3c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	fb02 f303 	mul.w	r3, r2, r3
 8003e46:	ee07 3a90 	vmov	s15, r3
 8003e4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e4e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003e52:	697b      	ldr	r3, [r7, #20]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 8111 	beq.w	800407c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003e5a:	69bb      	ldr	r3, [r7, #24]
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	f000 8083 	beq.w	8003f68 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003e62:	69bb      	ldr	r3, [r7, #24]
 8003e64:	2b02      	cmp	r3, #2
 8003e66:	f200 80a1 	bhi.w	8003fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d003      	beq.n	8003e78 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d056      	beq.n	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003e76:	e099      	b.n	8003fac <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e78:	4b88      	ldr	r3, [pc, #544]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f003 0320 	and.w	r3, r3, #32
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d02d      	beq.n	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e84:	4b85      	ldr	r3, [pc, #532]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	08db      	lsrs	r3, r3, #3
 8003e8a:	f003 0303 	and.w	r3, r3, #3
 8003e8e:	4a84      	ldr	r2, [pc, #528]	; (80040a0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	ee07 3a90 	vmov	s15, r3
 8003e9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	ee07 3a90 	vmov	s15, r3
 8003ea6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b7b      	ldr	r3, [pc, #492]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec2:	eddf 5a78 	vldr	s11, [pc, #480]	; 80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003ede:	e087      	b.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80040a8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b6a      	ldr	r3, [pc, #424]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f06:	eddf 5a67 	vldr	s11, [pc, #412]	; 80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f22:	e065      	b.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f24:	697b      	ldr	r3, [r7, #20]
 8003f26:	ee07 3a90 	vmov	s15, r3
 8003f2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f2e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003f32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f36:	4b59      	ldr	r3, [pc, #356]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f3e:	ee07 3a90 	vmov	s15, r3
 8003f42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f46:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f4a:	eddf 5a56 	vldr	s11, [pc, #344]	; 80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f66:	e043      	b.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003f68:	697b      	ldr	r3, [r7, #20]
 8003f6a:	ee07 3a90 	vmov	s15, r3
 8003f6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f72:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80040b0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003f76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f7a:	4b48      	ldr	r3, [pc, #288]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f82:	ee07 3a90 	vmov	s15, r3
 8003f86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f8a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f8e:	eddf 5a45 	vldr	s11, [pc, #276]	; 80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fa6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003faa:	e021      	b.n	8003ff0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003fac:	697b      	ldr	r3, [r7, #20]
 8003fae:	ee07 3a90 	vmov	s15, r3
 8003fb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fb6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80040ac <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003fba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fbe:	4b37      	ldr	r3, [pc, #220]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fc6:	ee07 3a90 	vmov	s15, r3
 8003fca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fce:	ed97 6a03 	vldr	s12, [r7, #12]
 8003fd2:	eddf 5a34 	vldr	s11, [pc, #208]	; 80040a4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003fd6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fda:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fe2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003fee:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003ff0:	4b2a      	ldr	r3, [pc, #168]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ff2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff4:	0a5b      	lsrs	r3, r3, #9
 8003ff6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003ffa:	ee07 3a90 	vmov	s15, r3
 8003ffe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004002:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004006:	ee37 7a87 	vadd.f32	s14, s15, s14
 800400a:	edd7 6a07 	vldr	s13, [r7, #28]
 800400e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004012:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004016:	ee17 2a90 	vmov	r2, s15
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800401e:	4b1f      	ldr	r3, [pc, #124]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004022:	0c1b      	lsrs	r3, r3, #16
 8004024:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004028:	ee07 3a90 	vmov	s15, r3
 800402c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004030:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004034:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004038:	edd7 6a07 	vldr	s13, [r7, #28]
 800403c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004040:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004044:	ee17 2a90 	vmov	r2, s15
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800404c:	4b13      	ldr	r3, [pc, #76]	; (800409c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	0e1b      	lsrs	r3, r3, #24
 8004052:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004056:	ee07 3a90 	vmov	s15, r3
 800405a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800405e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004062:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004066:	edd7 6a07 	vldr	s13, [r7, #28]
 800406a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800406e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004072:	ee17 2a90 	vmov	r2, s15
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800407a:	e008      	b.n	800408e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2200      	movs	r2, #0
 8004086:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2200      	movs	r2, #0
 800408c:	609a      	str	r2, [r3, #8]
}
 800408e:	bf00      	nop
 8004090:	3724      	adds	r7, #36	; 0x24
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	58024400 	.word	0x58024400
 80040a0:	03d09000 	.word	0x03d09000
 80040a4:	46000000 	.word	0x46000000
 80040a8:	4c742400 	.word	0x4c742400
 80040ac:	4a742400 	.word	0x4a742400
 80040b0:	4bbebc20 	.word	0x4bbebc20

080040b4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80040b4:	b580      	push	{r7, lr}
 80040b6:	b084      	sub	sp, #16
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
 80040bc:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80040be:	2300      	movs	r3, #0
 80040c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80040c2:	4b53      	ldr	r3, [pc, #332]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80040c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040c6:	f003 0303 	and.w	r3, r3, #3
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d101      	bne.n	80040d2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e099      	b.n	8004206 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80040d2:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a4e      	ldr	r2, [pc, #312]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80040d8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80040dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80040de:	f7fc ffdd 	bl	800109c <HAL_GetTick>
 80040e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040e4:	e008      	b.n	80040f8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80040e6:	f7fc ffd9 	bl	800109c <HAL_GetTick>
 80040ea:	4602      	mov	r2, r0
 80040ec:	68bb      	ldr	r3, [r7, #8]
 80040ee:	1ad3      	subs	r3, r2, r3
 80040f0:	2b02      	cmp	r3, #2
 80040f2:	d901      	bls.n	80040f8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 80040f4:	2303      	movs	r3, #3
 80040f6:	e086      	b.n	8004206 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80040f8:	4b45      	ldr	r3, [pc, #276]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d1f0      	bne.n	80040e6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004104:	4b42      	ldr	r3, [pc, #264]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004106:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004108:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	031b      	lsls	r3, r3, #12
 8004112:	493f      	ldr	r1, [pc, #252]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004114:	4313      	orrs	r3, r2
 8004116:	628b      	str	r3, [r1, #40]	; 0x28
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	685b      	ldr	r3, [r3, #4]
 800411c:	3b01      	subs	r3, #1
 800411e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	3b01      	subs	r3, #1
 8004128:	025b      	lsls	r3, r3, #9
 800412a:	b29b      	uxth	r3, r3
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68db      	ldr	r3, [r3, #12]
 8004132:	3b01      	subs	r3, #1
 8004134:	041b      	lsls	r3, r3, #16
 8004136:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800413a:	431a      	orrs	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	3b01      	subs	r3, #1
 8004142:	061b      	lsls	r3, r3, #24
 8004144:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004148:	4931      	ldr	r1, [pc, #196]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 800414a:	4313      	orrs	r3, r2
 800414c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800414e:	4b30      	ldr	r3, [pc, #192]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004152:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	695b      	ldr	r3, [r3, #20]
 800415a:	492d      	ldr	r1, [pc, #180]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 800415c:	4313      	orrs	r3, r2
 800415e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004160:	4b2b      	ldr	r3, [pc, #172]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004164:	f023 0220 	bic.w	r2, r3, #32
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	699b      	ldr	r3, [r3, #24]
 800416c:	4928      	ldr	r1, [pc, #160]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 800416e:	4313      	orrs	r3, r2
 8004170:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004172:	4b27      	ldr	r3, [pc, #156]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004176:	4a26      	ldr	r2, [pc, #152]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004178:	f023 0310 	bic.w	r3, r3, #16
 800417c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800417e:	4b24      	ldr	r3, [pc, #144]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004180:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004182:	4b24      	ldr	r3, [pc, #144]	; (8004214 <RCCEx_PLL2_Config+0x160>)
 8004184:	4013      	ands	r3, r2
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	69d2      	ldr	r2, [r2, #28]
 800418a:	00d2      	lsls	r2, r2, #3
 800418c:	4920      	ldr	r1, [pc, #128]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 800418e:	4313      	orrs	r3, r2
 8004190:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004192:	4b1f      	ldr	r3, [pc, #124]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004194:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004196:	4a1e      	ldr	r2, [pc, #120]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 8004198:	f043 0310 	orr.w	r3, r3, #16
 800419c:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d106      	bne.n	80041b2 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80041a4:	4b1a      	ldr	r3, [pc, #104]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a8:	4a19      	ldr	r2, [pc, #100]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041aa:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ae:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041b0:	e00f      	b.n	80041d2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80041b2:	683b      	ldr	r3, [r7, #0]
 80041b4:	2b01      	cmp	r3, #1
 80041b6:	d106      	bne.n	80041c6 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80041b8:	4b15      	ldr	r3, [pc, #84]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041bc:	4a14      	ldr	r2, [pc, #80]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80041c4:	e005      	b.n	80041d2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80041c6:	4b12      	ldr	r3, [pc, #72]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ca:	4a11      	ldr	r2, [pc, #68]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041cc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80041d0:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80041d2:	4b0f      	ldr	r3, [pc, #60]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	4a0e      	ldr	r2, [pc, #56]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80041dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041de:	f7fc ff5d 	bl	800109c <HAL_GetTick>
 80041e2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041e4:	e008      	b.n	80041f8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 80041e6:	f7fc ff59 	bl	800109c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d901      	bls.n	80041f8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e006      	b.n	8004206 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80041f8:	4b05      	ldr	r3, [pc, #20]	; (8004210 <RCCEx_PLL2_Config+0x15c>)
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004200:	2b00      	cmp	r3, #0
 8004202:	d0f0      	beq.n	80041e6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004204:	7bfb      	ldrb	r3, [r7, #15]
}
 8004206:	4618      	mov	r0, r3
 8004208:	3710      	adds	r7, #16
 800420a:	46bd      	mov	sp, r7
 800420c:	bd80      	pop	{r7, pc}
 800420e:	bf00      	nop
 8004210:	58024400 	.word	0x58024400
 8004214:	ffff0007 	.word	0xffff0007

08004218 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b084      	sub	sp, #16
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
 8004220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004222:	2300      	movs	r3, #0
 8004224:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004226:	4b53      	ldr	r3, [pc, #332]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422a:	f003 0303 	and.w	r3, r3, #3
 800422e:	2b03      	cmp	r3, #3
 8004230:	d101      	bne.n	8004236 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e099      	b.n	800436a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004236:	4b4f      	ldr	r3, [pc, #316]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a4e      	ldr	r2, [pc, #312]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800423c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004240:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004242:	f7fc ff2b 	bl	800109c <HAL_GetTick>
 8004246:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004248:	e008      	b.n	800425c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800424a:	f7fc ff27 	bl	800109c <HAL_GetTick>
 800424e:	4602      	mov	r2, r0
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	1ad3      	subs	r3, r2, r3
 8004254:	2b02      	cmp	r3, #2
 8004256:	d901      	bls.n	800425c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004258:	2303      	movs	r3, #3
 800425a:	e086      	b.n	800436a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800425c:	4b45      	ldr	r3, [pc, #276]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004264:	2b00      	cmp	r3, #0
 8004266:	d1f0      	bne.n	800424a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004268:	4b42      	ldr	r3, [pc, #264]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800426a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800426c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	051b      	lsls	r3, r3, #20
 8004276:	493f      	ldr	r1, [pc, #252]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004278:	4313      	orrs	r3, r2
 800427a:	628b      	str	r3, [r1, #40]	; 0x28
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	685b      	ldr	r3, [r3, #4]
 8004280:	3b01      	subs	r3, #1
 8004282:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	3b01      	subs	r3, #1
 800428c:	025b      	lsls	r3, r3, #9
 800428e:	b29b      	uxth	r3, r3
 8004290:	431a      	orrs	r2, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	3b01      	subs	r3, #1
 8004298:	041b      	lsls	r3, r3, #16
 800429a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800429e:	431a      	orrs	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	691b      	ldr	r3, [r3, #16]
 80042a4:	3b01      	subs	r3, #1
 80042a6:	061b      	lsls	r3, r3, #24
 80042a8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80042ac:	4931      	ldr	r1, [pc, #196]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042ae:	4313      	orrs	r3, r2
 80042b0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80042b2:	4b30      	ldr	r3, [pc, #192]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	492d      	ldr	r1, [pc, #180]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80042c4:	4b2b      	ldr	r3, [pc, #172]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042c8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	699b      	ldr	r3, [r3, #24]
 80042d0:	4928      	ldr	r1, [pc, #160]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042d2:	4313      	orrs	r3, r2
 80042d4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80042d6:	4b27      	ldr	r3, [pc, #156]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042da:	4a26      	ldr	r2, [pc, #152]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042e0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80042e2:	4b24      	ldr	r3, [pc, #144]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042e6:	4b24      	ldr	r3, [pc, #144]	; (8004378 <RCCEx_PLL3_Config+0x160>)
 80042e8:	4013      	ands	r3, r2
 80042ea:	687a      	ldr	r2, [r7, #4]
 80042ec:	69d2      	ldr	r2, [r2, #28]
 80042ee:	00d2      	lsls	r2, r2, #3
 80042f0:	4920      	ldr	r1, [pc, #128]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 80042f6:	4b1f      	ldr	r3, [pc, #124]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042fa:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 80042fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004300:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004302:	683b      	ldr	r3, [r7, #0]
 8004304:	2b00      	cmp	r3, #0
 8004306:	d106      	bne.n	8004316 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004308:	4b1a      	ldr	r3, [pc, #104]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a19      	ldr	r2, [pc, #100]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800430e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004312:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004314:	e00f      	b.n	8004336 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	2b01      	cmp	r3, #1
 800431a:	d106      	bne.n	800432a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800431c:	4b15      	ldr	r3, [pc, #84]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a14      	ldr	r2, [pc, #80]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004322:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004326:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004328:	e005      	b.n	8004336 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800432a:	4b12      	ldr	r3, [pc, #72]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800432c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800432e:	4a11      	ldr	r2, [pc, #68]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004330:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004334:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004336:	4b0f      	ldr	r3, [pc, #60]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4a0e      	ldr	r2, [pc, #56]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800433c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004340:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004342:	f7fc feab 	bl	800109c <HAL_GetTick>
 8004346:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004348:	e008      	b.n	800435c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800434a:	f7fc fea7 	bl	800109c <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e006      	b.n	800436a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800435c:	4b05      	ldr	r3, [pc, #20]	; (8004374 <RCCEx_PLL3_Config+0x15c>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004368:	7bfb      	ldrb	r3, [r7, #15]
}
 800436a:	4618      	mov	r0, r3
 800436c:	3710      	adds	r7, #16
 800436e:	46bd      	mov	sp, r7
 8004370:	bd80      	pop	{r7, pc}
 8004372:	bf00      	nop
 8004374:	58024400 	.word	0x58024400
 8004378:	ffff0007 	.word	0xffff0007

0800437c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b082      	sub	sp, #8
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2b00      	cmp	r3, #0
 8004388:	d101      	bne.n	800438e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e042      	b.n	8004414 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004394:	2b00      	cmp	r3, #0
 8004396:	d106      	bne.n	80043a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f7fc fc07 	bl	8000bb4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	2224      	movs	r2, #36	; 0x24
 80043aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681a      	ldr	r2, [r3, #0]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	f022 0201 	bic.w	r2, r2, #1
 80043bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d002      	beq.n	80043cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 fe1e 	bl	8005008 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80043cc:	6878      	ldr	r0, [r7, #4]
 80043ce:	f000 f8b3 	bl	8004538 <UART_SetConfig>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b01      	cmp	r3, #1
 80043d6:	d101      	bne.n	80043dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e01b      	b.n	8004414 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	685a      	ldr	r2, [r3, #4]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80043ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	689a      	ldr	r2, [r3, #8]
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80043fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	681a      	ldr	r2, [r3, #0]
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	f042 0201 	orr.w	r2, r2, #1
 800440a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800440c:	6878      	ldr	r0, [r7, #4]
 800440e:	f000 fe9d 	bl	800514c <UART_CheckIdleState>
 8004412:	4603      	mov	r3, r0
}
 8004414:	4618      	mov	r0, r3
 8004416:	3708      	adds	r7, #8
 8004418:	46bd      	mov	sp, r7
 800441a:	bd80      	pop	{r7, pc}

0800441c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800441c:	b580      	push	{r7, lr}
 800441e:	b08a      	sub	sp, #40	; 0x28
 8004420:	af02      	add	r7, sp, #8
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	603b      	str	r3, [r7, #0]
 8004428:	4613      	mov	r3, r2
 800442a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004432:	2b20      	cmp	r3, #32
 8004434:	d17b      	bne.n	800452e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8004436:	68bb      	ldr	r3, [r7, #8]
 8004438:	2b00      	cmp	r3, #0
 800443a:	d002      	beq.n	8004442 <HAL_UART_Transmit+0x26>
 800443c:	88fb      	ldrh	r3, [r7, #6]
 800443e:	2b00      	cmp	r3, #0
 8004440:	d101      	bne.n	8004446 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e074      	b.n	8004530 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2221      	movs	r2, #33	; 0x21
 8004452:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004456:	f7fc fe21 	bl	800109c <HAL_GetTick>
 800445a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	88fa      	ldrh	r2, [r7, #6]
 8004460:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	88fa      	ldrh	r2, [r7, #6]
 8004468:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	689b      	ldr	r3, [r3, #8]
 8004470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004474:	d108      	bne.n	8004488 <HAL_UART_Transmit+0x6c>
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	691b      	ldr	r3, [r3, #16]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d104      	bne.n	8004488 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800447e:	2300      	movs	r3, #0
 8004480:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004482:	68bb      	ldr	r3, [r7, #8]
 8004484:	61bb      	str	r3, [r7, #24]
 8004486:	e003      	b.n	8004490 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800448c:	2300      	movs	r3, #0
 800448e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004490:	e030      	b.n	80044f4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	9300      	str	r3, [sp, #0]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	2200      	movs	r2, #0
 800449a:	2180      	movs	r1, #128	; 0x80
 800449c:	68f8      	ldr	r0, [r7, #12]
 800449e:	f000 feff 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 80044a2:	4603      	mov	r3, r0
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d005      	beq.n	80044b4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2220      	movs	r2, #32
 80044ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e03d      	b.n	8004530 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80044b4:	69fb      	ldr	r3, [r7, #28]
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d10b      	bne.n	80044d2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	881b      	ldrh	r3, [r3, #0]
 80044be:	461a      	mov	r2, r3
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044c8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	3302      	adds	r3, #2
 80044ce:	61bb      	str	r3, [r7, #24]
 80044d0:	e007      	b.n	80044e2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	781a      	ldrb	r2, [r3, #0]
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	3301      	adds	r3, #1
 80044e0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044e8:	b29b      	uxth	r3, r3
 80044ea:	3b01      	subs	r3, #1
 80044ec:	b29a      	uxth	r2, r3
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80044fa:	b29b      	uxth	r3, r3
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d1c8      	bne.n	8004492 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	697b      	ldr	r3, [r7, #20]
 8004506:	2200      	movs	r2, #0
 8004508:	2140      	movs	r1, #64	; 0x40
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f000 fec8 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d005      	beq.n	8004522 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e006      	b.n	8004530 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	2220      	movs	r2, #32
 8004526:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	e000      	b.n	8004530 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800452e:	2302      	movs	r3, #2
  }
}
 8004530:	4618      	mov	r0, r3
 8004532:	3720      	adds	r7, #32
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}

08004538 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800453c:	b092      	sub	sp, #72	; 0x48
 800453e:	af00      	add	r7, sp, #0
 8004540:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004542:	2300      	movs	r3, #0
 8004544:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	689a      	ldr	r2, [r3, #8]
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	691b      	ldr	r3, [r3, #16]
 8004550:	431a      	orrs	r2, r3
 8004552:	697b      	ldr	r3, [r7, #20]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	431a      	orrs	r2, r3
 8004558:	697b      	ldr	r3, [r7, #20]
 800455a:	69db      	ldr	r3, [r3, #28]
 800455c:	4313      	orrs	r3, r2
 800455e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004560:	697b      	ldr	r3, [r7, #20]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	4bbe      	ldr	r3, [pc, #760]	; (8004860 <UART_SetConfig+0x328>)
 8004568:	4013      	ands	r3, r2
 800456a:	697a      	ldr	r2, [r7, #20]
 800456c:	6812      	ldr	r2, [r2, #0]
 800456e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004570:	430b      	orrs	r3, r1
 8004572:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800457e:	697b      	ldr	r3, [r7, #20]
 8004580:	68da      	ldr	r2, [r3, #12]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	430a      	orrs	r2, r1
 8004588:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	699b      	ldr	r3, [r3, #24]
 800458e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004590:	697b      	ldr	r3, [r7, #20]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4ab3      	ldr	r2, [pc, #716]	; (8004864 <UART_SetConfig+0x32c>)
 8004596:	4293      	cmp	r3, r2
 8004598:	d004      	beq.n	80045a4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	6a1b      	ldr	r3, [r3, #32]
 800459e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80045a0:	4313      	orrs	r3, r2
 80045a2:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	689a      	ldr	r2, [r3, #8]
 80045aa:	4baf      	ldr	r3, [pc, #700]	; (8004868 <UART_SetConfig+0x330>)
 80045ac:	4013      	ands	r3, r2
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	6812      	ldr	r2, [r2, #0]
 80045b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045be:	f023 010f 	bic.w	r1, r3, #15
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045c6:	697b      	ldr	r3, [r7, #20]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	430a      	orrs	r2, r1
 80045cc:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4aa6      	ldr	r2, [pc, #664]	; (800486c <UART_SetConfig+0x334>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d177      	bne.n	80046c8 <UART_SetConfig+0x190>
 80045d8:	4ba5      	ldr	r3, [pc, #660]	; (8004870 <UART_SetConfig+0x338>)
 80045da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045dc:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045e0:	2b28      	cmp	r3, #40	; 0x28
 80045e2:	d86d      	bhi.n	80046c0 <UART_SetConfig+0x188>
 80045e4:	a201      	add	r2, pc, #4	; (adr r2, 80045ec <UART_SetConfig+0xb4>)
 80045e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ea:	bf00      	nop
 80045ec:	08004691 	.word	0x08004691
 80045f0:	080046c1 	.word	0x080046c1
 80045f4:	080046c1 	.word	0x080046c1
 80045f8:	080046c1 	.word	0x080046c1
 80045fc:	080046c1 	.word	0x080046c1
 8004600:	080046c1 	.word	0x080046c1
 8004604:	080046c1 	.word	0x080046c1
 8004608:	080046c1 	.word	0x080046c1
 800460c:	08004699 	.word	0x08004699
 8004610:	080046c1 	.word	0x080046c1
 8004614:	080046c1 	.word	0x080046c1
 8004618:	080046c1 	.word	0x080046c1
 800461c:	080046c1 	.word	0x080046c1
 8004620:	080046c1 	.word	0x080046c1
 8004624:	080046c1 	.word	0x080046c1
 8004628:	080046c1 	.word	0x080046c1
 800462c:	080046a1 	.word	0x080046a1
 8004630:	080046c1 	.word	0x080046c1
 8004634:	080046c1 	.word	0x080046c1
 8004638:	080046c1 	.word	0x080046c1
 800463c:	080046c1 	.word	0x080046c1
 8004640:	080046c1 	.word	0x080046c1
 8004644:	080046c1 	.word	0x080046c1
 8004648:	080046c1 	.word	0x080046c1
 800464c:	080046a9 	.word	0x080046a9
 8004650:	080046c1 	.word	0x080046c1
 8004654:	080046c1 	.word	0x080046c1
 8004658:	080046c1 	.word	0x080046c1
 800465c:	080046c1 	.word	0x080046c1
 8004660:	080046c1 	.word	0x080046c1
 8004664:	080046c1 	.word	0x080046c1
 8004668:	080046c1 	.word	0x080046c1
 800466c:	080046b1 	.word	0x080046b1
 8004670:	080046c1 	.word	0x080046c1
 8004674:	080046c1 	.word	0x080046c1
 8004678:	080046c1 	.word	0x080046c1
 800467c:	080046c1 	.word	0x080046c1
 8004680:	080046c1 	.word	0x080046c1
 8004684:	080046c1 	.word	0x080046c1
 8004688:	080046c1 	.word	0x080046c1
 800468c:	080046b9 	.word	0x080046b9
 8004690:	2301      	movs	r3, #1
 8004692:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004696:	e222      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004698:	2304      	movs	r3, #4
 800469a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800469e:	e21e      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046a0:	2308      	movs	r3, #8
 80046a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046a6:	e21a      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046a8:	2310      	movs	r3, #16
 80046aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046ae:	e216      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046b0:	2320      	movs	r3, #32
 80046b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046b6:	e212      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046b8:	2340      	movs	r3, #64	; 0x40
 80046ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046be:	e20e      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046c0:	2380      	movs	r3, #128	; 0x80
 80046c2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80046c6:	e20a      	b.n	8004ade <UART_SetConfig+0x5a6>
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	4a69      	ldr	r2, [pc, #420]	; (8004874 <UART_SetConfig+0x33c>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d130      	bne.n	8004734 <UART_SetConfig+0x1fc>
 80046d2:	4b67      	ldr	r3, [pc, #412]	; (8004870 <UART_SetConfig+0x338>)
 80046d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046d6:	f003 0307 	and.w	r3, r3, #7
 80046da:	2b05      	cmp	r3, #5
 80046dc:	d826      	bhi.n	800472c <UART_SetConfig+0x1f4>
 80046de:	a201      	add	r2, pc, #4	; (adr r2, 80046e4 <UART_SetConfig+0x1ac>)
 80046e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e4:	080046fd 	.word	0x080046fd
 80046e8:	08004705 	.word	0x08004705
 80046ec:	0800470d 	.word	0x0800470d
 80046f0:	08004715 	.word	0x08004715
 80046f4:	0800471d 	.word	0x0800471d
 80046f8:	08004725 	.word	0x08004725
 80046fc:	2300      	movs	r3, #0
 80046fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004702:	e1ec      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004704:	2304      	movs	r3, #4
 8004706:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800470a:	e1e8      	b.n	8004ade <UART_SetConfig+0x5a6>
 800470c:	2308      	movs	r3, #8
 800470e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004712:	e1e4      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004714:	2310      	movs	r3, #16
 8004716:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800471a:	e1e0      	b.n	8004ade <UART_SetConfig+0x5a6>
 800471c:	2320      	movs	r3, #32
 800471e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004722:	e1dc      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004724:	2340      	movs	r3, #64	; 0x40
 8004726:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800472a:	e1d8      	b.n	8004ade <UART_SetConfig+0x5a6>
 800472c:	2380      	movs	r3, #128	; 0x80
 800472e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004732:	e1d4      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	4a4f      	ldr	r2, [pc, #316]	; (8004878 <UART_SetConfig+0x340>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d130      	bne.n	80047a0 <UART_SetConfig+0x268>
 800473e:	4b4c      	ldr	r3, [pc, #304]	; (8004870 <UART_SetConfig+0x338>)
 8004740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004742:	f003 0307 	and.w	r3, r3, #7
 8004746:	2b05      	cmp	r3, #5
 8004748:	d826      	bhi.n	8004798 <UART_SetConfig+0x260>
 800474a:	a201      	add	r2, pc, #4	; (adr r2, 8004750 <UART_SetConfig+0x218>)
 800474c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004750:	08004769 	.word	0x08004769
 8004754:	08004771 	.word	0x08004771
 8004758:	08004779 	.word	0x08004779
 800475c:	08004781 	.word	0x08004781
 8004760:	08004789 	.word	0x08004789
 8004764:	08004791 	.word	0x08004791
 8004768:	2300      	movs	r3, #0
 800476a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800476e:	e1b6      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004770:	2304      	movs	r3, #4
 8004772:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004776:	e1b2      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004778:	2308      	movs	r3, #8
 800477a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800477e:	e1ae      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004780:	2310      	movs	r3, #16
 8004782:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004786:	e1aa      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004788:	2320      	movs	r3, #32
 800478a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800478e:	e1a6      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004796:	e1a2      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004798:	2380      	movs	r3, #128	; 0x80
 800479a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800479e:	e19e      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	4a35      	ldr	r2, [pc, #212]	; (800487c <UART_SetConfig+0x344>)
 80047a6:	4293      	cmp	r3, r2
 80047a8:	d130      	bne.n	800480c <UART_SetConfig+0x2d4>
 80047aa:	4b31      	ldr	r3, [pc, #196]	; (8004870 <UART_SetConfig+0x338>)
 80047ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047ae:	f003 0307 	and.w	r3, r3, #7
 80047b2:	2b05      	cmp	r3, #5
 80047b4:	d826      	bhi.n	8004804 <UART_SetConfig+0x2cc>
 80047b6:	a201      	add	r2, pc, #4	; (adr r2, 80047bc <UART_SetConfig+0x284>)
 80047b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047bc:	080047d5 	.word	0x080047d5
 80047c0:	080047dd 	.word	0x080047dd
 80047c4:	080047e5 	.word	0x080047e5
 80047c8:	080047ed 	.word	0x080047ed
 80047cc:	080047f5 	.word	0x080047f5
 80047d0:	080047fd 	.word	0x080047fd
 80047d4:	2300      	movs	r3, #0
 80047d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047da:	e180      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047dc:	2304      	movs	r3, #4
 80047de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047e2:	e17c      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047e4:	2308      	movs	r3, #8
 80047e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047ea:	e178      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047ec:	2310      	movs	r3, #16
 80047ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047f2:	e174      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047f4:	2320      	movs	r3, #32
 80047f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80047fa:	e170      	b.n	8004ade <UART_SetConfig+0x5a6>
 80047fc:	2340      	movs	r3, #64	; 0x40
 80047fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004802:	e16c      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004804:	2380      	movs	r3, #128	; 0x80
 8004806:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800480a:	e168      	b.n	8004ade <UART_SetConfig+0x5a6>
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	4a1b      	ldr	r2, [pc, #108]	; (8004880 <UART_SetConfig+0x348>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d142      	bne.n	800489c <UART_SetConfig+0x364>
 8004816:	4b16      	ldr	r3, [pc, #88]	; (8004870 <UART_SetConfig+0x338>)
 8004818:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800481a:	f003 0307 	and.w	r3, r3, #7
 800481e:	2b05      	cmp	r3, #5
 8004820:	d838      	bhi.n	8004894 <UART_SetConfig+0x35c>
 8004822:	a201      	add	r2, pc, #4	; (adr r2, 8004828 <UART_SetConfig+0x2f0>)
 8004824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004828:	08004841 	.word	0x08004841
 800482c:	08004849 	.word	0x08004849
 8004830:	08004851 	.word	0x08004851
 8004834:	08004859 	.word	0x08004859
 8004838:	08004885 	.word	0x08004885
 800483c:	0800488d 	.word	0x0800488d
 8004840:	2300      	movs	r3, #0
 8004842:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004846:	e14a      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004848:	2304      	movs	r3, #4
 800484a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800484e:	e146      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004850:	2308      	movs	r3, #8
 8004852:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004856:	e142      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004858:	2310      	movs	r3, #16
 800485a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800485e:	e13e      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004860:	cfff69f3 	.word	0xcfff69f3
 8004864:	58000c00 	.word	0x58000c00
 8004868:	11fff4ff 	.word	0x11fff4ff
 800486c:	40011000 	.word	0x40011000
 8004870:	58024400 	.word	0x58024400
 8004874:	40004400 	.word	0x40004400
 8004878:	40004800 	.word	0x40004800
 800487c:	40004c00 	.word	0x40004c00
 8004880:	40005000 	.word	0x40005000
 8004884:	2320      	movs	r3, #32
 8004886:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800488a:	e128      	b.n	8004ade <UART_SetConfig+0x5a6>
 800488c:	2340      	movs	r3, #64	; 0x40
 800488e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004892:	e124      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004894:	2380      	movs	r3, #128	; 0x80
 8004896:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800489a:	e120      	b.n	8004ade <UART_SetConfig+0x5a6>
 800489c:	697b      	ldr	r3, [r7, #20]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4acb      	ldr	r2, [pc, #812]	; (8004bd0 <UART_SetConfig+0x698>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d176      	bne.n	8004994 <UART_SetConfig+0x45c>
 80048a6:	4bcb      	ldr	r3, [pc, #812]	; (8004bd4 <UART_SetConfig+0x69c>)
 80048a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80048ae:	2b28      	cmp	r3, #40	; 0x28
 80048b0:	d86c      	bhi.n	800498c <UART_SetConfig+0x454>
 80048b2:	a201      	add	r2, pc, #4	; (adr r2, 80048b8 <UART_SetConfig+0x380>)
 80048b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048b8:	0800495d 	.word	0x0800495d
 80048bc:	0800498d 	.word	0x0800498d
 80048c0:	0800498d 	.word	0x0800498d
 80048c4:	0800498d 	.word	0x0800498d
 80048c8:	0800498d 	.word	0x0800498d
 80048cc:	0800498d 	.word	0x0800498d
 80048d0:	0800498d 	.word	0x0800498d
 80048d4:	0800498d 	.word	0x0800498d
 80048d8:	08004965 	.word	0x08004965
 80048dc:	0800498d 	.word	0x0800498d
 80048e0:	0800498d 	.word	0x0800498d
 80048e4:	0800498d 	.word	0x0800498d
 80048e8:	0800498d 	.word	0x0800498d
 80048ec:	0800498d 	.word	0x0800498d
 80048f0:	0800498d 	.word	0x0800498d
 80048f4:	0800498d 	.word	0x0800498d
 80048f8:	0800496d 	.word	0x0800496d
 80048fc:	0800498d 	.word	0x0800498d
 8004900:	0800498d 	.word	0x0800498d
 8004904:	0800498d 	.word	0x0800498d
 8004908:	0800498d 	.word	0x0800498d
 800490c:	0800498d 	.word	0x0800498d
 8004910:	0800498d 	.word	0x0800498d
 8004914:	0800498d 	.word	0x0800498d
 8004918:	08004975 	.word	0x08004975
 800491c:	0800498d 	.word	0x0800498d
 8004920:	0800498d 	.word	0x0800498d
 8004924:	0800498d 	.word	0x0800498d
 8004928:	0800498d 	.word	0x0800498d
 800492c:	0800498d 	.word	0x0800498d
 8004930:	0800498d 	.word	0x0800498d
 8004934:	0800498d 	.word	0x0800498d
 8004938:	0800497d 	.word	0x0800497d
 800493c:	0800498d 	.word	0x0800498d
 8004940:	0800498d 	.word	0x0800498d
 8004944:	0800498d 	.word	0x0800498d
 8004948:	0800498d 	.word	0x0800498d
 800494c:	0800498d 	.word	0x0800498d
 8004950:	0800498d 	.word	0x0800498d
 8004954:	0800498d 	.word	0x0800498d
 8004958:	08004985 	.word	0x08004985
 800495c:	2301      	movs	r3, #1
 800495e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004962:	e0bc      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004964:	2304      	movs	r3, #4
 8004966:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800496a:	e0b8      	b.n	8004ade <UART_SetConfig+0x5a6>
 800496c:	2308      	movs	r3, #8
 800496e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004972:	e0b4      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004974:	2310      	movs	r3, #16
 8004976:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800497a:	e0b0      	b.n	8004ade <UART_SetConfig+0x5a6>
 800497c:	2320      	movs	r3, #32
 800497e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004982:	e0ac      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004984:	2340      	movs	r3, #64	; 0x40
 8004986:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800498a:	e0a8      	b.n	8004ade <UART_SetConfig+0x5a6>
 800498c:	2380      	movs	r3, #128	; 0x80
 800498e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004992:	e0a4      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004994:	697b      	ldr	r3, [r7, #20]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	4a8f      	ldr	r2, [pc, #572]	; (8004bd8 <UART_SetConfig+0x6a0>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d130      	bne.n	8004a00 <UART_SetConfig+0x4c8>
 800499e:	4b8d      	ldr	r3, [pc, #564]	; (8004bd4 <UART_SetConfig+0x69c>)
 80049a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a2:	f003 0307 	and.w	r3, r3, #7
 80049a6:	2b05      	cmp	r3, #5
 80049a8:	d826      	bhi.n	80049f8 <UART_SetConfig+0x4c0>
 80049aa:	a201      	add	r2, pc, #4	; (adr r2, 80049b0 <UART_SetConfig+0x478>)
 80049ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049b0:	080049c9 	.word	0x080049c9
 80049b4:	080049d1 	.word	0x080049d1
 80049b8:	080049d9 	.word	0x080049d9
 80049bc:	080049e1 	.word	0x080049e1
 80049c0:	080049e9 	.word	0x080049e9
 80049c4:	080049f1 	.word	0x080049f1
 80049c8:	2300      	movs	r3, #0
 80049ca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ce:	e086      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049d0:	2304      	movs	r3, #4
 80049d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049d6:	e082      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049d8:	2308      	movs	r3, #8
 80049da:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049de:	e07e      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049e0:	2310      	movs	r3, #16
 80049e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049e6:	e07a      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049e8:	2320      	movs	r3, #32
 80049ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049ee:	e076      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049f0:	2340      	movs	r3, #64	; 0x40
 80049f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049f6:	e072      	b.n	8004ade <UART_SetConfig+0x5a6>
 80049f8:	2380      	movs	r3, #128	; 0x80
 80049fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80049fe:	e06e      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a00:	697b      	ldr	r3, [r7, #20]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a75      	ldr	r2, [pc, #468]	; (8004bdc <UART_SetConfig+0x6a4>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d130      	bne.n	8004a6c <UART_SetConfig+0x534>
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <UART_SetConfig+0x69c>)
 8004a0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a0e:	f003 0307 	and.w	r3, r3, #7
 8004a12:	2b05      	cmp	r3, #5
 8004a14:	d826      	bhi.n	8004a64 <UART_SetConfig+0x52c>
 8004a16:	a201      	add	r2, pc, #4	; (adr r2, 8004a1c <UART_SetConfig+0x4e4>)
 8004a18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a1c:	08004a35 	.word	0x08004a35
 8004a20:	08004a3d 	.word	0x08004a3d
 8004a24:	08004a45 	.word	0x08004a45
 8004a28:	08004a4d 	.word	0x08004a4d
 8004a2c:	08004a55 	.word	0x08004a55
 8004a30:	08004a5d 	.word	0x08004a5d
 8004a34:	2300      	movs	r3, #0
 8004a36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a3a:	e050      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a3c:	2304      	movs	r3, #4
 8004a3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a42:	e04c      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a44:	2308      	movs	r3, #8
 8004a46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a4a:	e048      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a4c:	2310      	movs	r3, #16
 8004a4e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a52:	e044      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a54:	2320      	movs	r3, #32
 8004a56:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a5a:	e040      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a5c:	2340      	movs	r3, #64	; 0x40
 8004a5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a62:	e03c      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a64:	2380      	movs	r3, #128	; 0x80
 8004a66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004a6a:	e038      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004a6c:	697b      	ldr	r3, [r7, #20]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	4a5b      	ldr	r2, [pc, #364]	; (8004be0 <UART_SetConfig+0x6a8>)
 8004a72:	4293      	cmp	r3, r2
 8004a74:	d130      	bne.n	8004ad8 <UART_SetConfig+0x5a0>
 8004a76:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <UART_SetConfig+0x69c>)
 8004a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a7a:	f003 0307 	and.w	r3, r3, #7
 8004a7e:	2b05      	cmp	r3, #5
 8004a80:	d826      	bhi.n	8004ad0 <UART_SetConfig+0x598>
 8004a82:	a201      	add	r2, pc, #4	; (adr r2, 8004a88 <UART_SetConfig+0x550>)
 8004a84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a88:	08004aa1 	.word	0x08004aa1
 8004a8c:	08004aa9 	.word	0x08004aa9
 8004a90:	08004ab1 	.word	0x08004ab1
 8004a94:	08004ab9 	.word	0x08004ab9
 8004a98:	08004ac1 	.word	0x08004ac1
 8004a9c:	08004ac9 	.word	0x08004ac9
 8004aa0:	2302      	movs	r3, #2
 8004aa2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aa6:	e01a      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004aa8:	2304      	movs	r3, #4
 8004aaa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004aae:	e016      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ab0:	2308      	movs	r3, #8
 8004ab2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ab6:	e012      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ab8:	2310      	movs	r3, #16
 8004aba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004abe:	e00e      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ac0:	2320      	movs	r3, #32
 8004ac2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ac6:	e00a      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ac8:	2340      	movs	r3, #64	; 0x40
 8004aca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ace:	e006      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ad0:	2380      	movs	r3, #128	; 0x80
 8004ad2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8004ad6:	e002      	b.n	8004ade <UART_SetConfig+0x5a6>
 8004ad8:	2380      	movs	r3, #128	; 0x80
 8004ada:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	4a3f      	ldr	r2, [pc, #252]	; (8004be0 <UART_SetConfig+0x6a8>)
 8004ae4:	4293      	cmp	r3, r2
 8004ae6:	f040 80f8 	bne.w	8004cda <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004aea:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004aee:	2b20      	cmp	r3, #32
 8004af0:	dc46      	bgt.n	8004b80 <UART_SetConfig+0x648>
 8004af2:	2b02      	cmp	r3, #2
 8004af4:	f2c0 8082 	blt.w	8004bfc <UART_SetConfig+0x6c4>
 8004af8:	3b02      	subs	r3, #2
 8004afa:	2b1e      	cmp	r3, #30
 8004afc:	d87e      	bhi.n	8004bfc <UART_SetConfig+0x6c4>
 8004afe:	a201      	add	r2, pc, #4	; (adr r2, 8004b04 <UART_SetConfig+0x5cc>)
 8004b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b04:	08004b87 	.word	0x08004b87
 8004b08:	08004bfd 	.word	0x08004bfd
 8004b0c:	08004b8f 	.word	0x08004b8f
 8004b10:	08004bfd 	.word	0x08004bfd
 8004b14:	08004bfd 	.word	0x08004bfd
 8004b18:	08004bfd 	.word	0x08004bfd
 8004b1c:	08004b9f 	.word	0x08004b9f
 8004b20:	08004bfd 	.word	0x08004bfd
 8004b24:	08004bfd 	.word	0x08004bfd
 8004b28:	08004bfd 	.word	0x08004bfd
 8004b2c:	08004bfd 	.word	0x08004bfd
 8004b30:	08004bfd 	.word	0x08004bfd
 8004b34:	08004bfd 	.word	0x08004bfd
 8004b38:	08004bfd 	.word	0x08004bfd
 8004b3c:	08004baf 	.word	0x08004baf
 8004b40:	08004bfd 	.word	0x08004bfd
 8004b44:	08004bfd 	.word	0x08004bfd
 8004b48:	08004bfd 	.word	0x08004bfd
 8004b4c:	08004bfd 	.word	0x08004bfd
 8004b50:	08004bfd 	.word	0x08004bfd
 8004b54:	08004bfd 	.word	0x08004bfd
 8004b58:	08004bfd 	.word	0x08004bfd
 8004b5c:	08004bfd 	.word	0x08004bfd
 8004b60:	08004bfd 	.word	0x08004bfd
 8004b64:	08004bfd 	.word	0x08004bfd
 8004b68:	08004bfd 	.word	0x08004bfd
 8004b6c:	08004bfd 	.word	0x08004bfd
 8004b70:	08004bfd 	.word	0x08004bfd
 8004b74:	08004bfd 	.word	0x08004bfd
 8004b78:	08004bfd 	.word	0x08004bfd
 8004b7c:	08004bef 	.word	0x08004bef
 8004b80:	2b40      	cmp	r3, #64	; 0x40
 8004b82:	d037      	beq.n	8004bf4 <UART_SetConfig+0x6bc>
 8004b84:	e03a      	b.n	8004bfc <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004b86:	f7fe ffd7 	bl	8003b38 <HAL_RCCEx_GetD3PCLK1Freq>
 8004b8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004b8c:	e03c      	b.n	8004c08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004b8e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004b92:	4618      	mov	r0, r3
 8004b94:	f7fe ffe6 	bl	8003b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004b98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b9a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004b9c:	e034      	b.n	8004c08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004b9e:	f107 0318 	add.w	r3, r7, #24
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f7ff f932 	bl	8003e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ba8:	69fb      	ldr	r3, [r7, #28]
 8004baa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bac:	e02c      	b.n	8004c08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <UART_SetConfig+0x69c>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0320 	and.w	r3, r3, #32
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d016      	beq.n	8004be8 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <UART_SetConfig+0x69c>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	08db      	lsrs	r3, r3, #3
 8004bc0:	f003 0303 	and.w	r3, r3, #3
 8004bc4:	4a07      	ldr	r2, [pc, #28]	; (8004be4 <UART_SetConfig+0x6ac>)
 8004bc6:	fa22 f303 	lsr.w	r3, r2, r3
 8004bca:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004bcc:	e01c      	b.n	8004c08 <UART_SetConfig+0x6d0>
 8004bce:	bf00      	nop
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	58024400 	.word	0x58024400
 8004bd8:	40007800 	.word	0x40007800
 8004bdc:	40007c00 	.word	0x40007c00
 8004be0:	58000c00 	.word	0x58000c00
 8004be4:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b9d      	ldr	r3, [pc, #628]	; (8004e60 <UART_SetConfig+0x928>)
 8004bea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bec:	e00c      	b.n	8004c08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004bee:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <UART_SetConfig+0x92c>)
 8004bf0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bf2:	e009      	b.n	8004c08 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004bfa:	e005      	b.n	8004c08 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004c00:	2301      	movs	r3, #1
 8004c02:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004c06:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f000 81de 	beq.w	8004fcc <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004c10:	697b      	ldr	r3, [r7, #20]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	4a94      	ldr	r2, [pc, #592]	; (8004e68 <UART_SetConfig+0x930>)
 8004c16:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c1a:	461a      	mov	r2, r3
 8004c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c1e:	fbb3 f3f2 	udiv	r3, r3, r2
 8004c22:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c24:	697b      	ldr	r3, [r7, #20]
 8004c26:	685a      	ldr	r2, [r3, #4]
 8004c28:	4613      	mov	r3, r2
 8004c2a:	005b      	lsls	r3, r3, #1
 8004c2c:	4413      	add	r3, r2
 8004c2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d305      	bcc.n	8004c40 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004c34:	697b      	ldr	r3, [r7, #20]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004c3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c3c:	429a      	cmp	r2, r3
 8004c3e:	d903      	bls.n	8004c48 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004c40:	2301      	movs	r3, #1
 8004c42:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004c46:	e1c1      	b.n	8004fcc <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	60bb      	str	r3, [r7, #8]
 8004c4e:	60fa      	str	r2, [r7, #12]
 8004c50:	697b      	ldr	r3, [r7, #20]
 8004c52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c54:	4a84      	ldr	r2, [pc, #528]	; (8004e68 <UART_SetConfig+0x930>)
 8004c56:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004c5a:	b29b      	uxth	r3, r3
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	603b      	str	r3, [r7, #0]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c66:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004c6a:	f7fb fb99 	bl	80003a0 <__aeabi_uldivmod>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	460b      	mov	r3, r1
 8004c72:	4610      	mov	r0, r2
 8004c74:	4619      	mov	r1, r3
 8004c76:	f04f 0200 	mov.w	r2, #0
 8004c7a:	f04f 0300 	mov.w	r3, #0
 8004c7e:	020b      	lsls	r3, r1, #8
 8004c80:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004c84:	0202      	lsls	r2, r0, #8
 8004c86:	6979      	ldr	r1, [r7, #20]
 8004c88:	6849      	ldr	r1, [r1, #4]
 8004c8a:	0849      	lsrs	r1, r1, #1
 8004c8c:	2000      	movs	r0, #0
 8004c8e:	460c      	mov	r4, r1
 8004c90:	4605      	mov	r5, r0
 8004c92:	eb12 0804 	adds.w	r8, r2, r4
 8004c96:	eb43 0905 	adc.w	r9, r3, r5
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	469a      	mov	sl, r3
 8004ca2:	4693      	mov	fp, r2
 8004ca4:	4652      	mov	r2, sl
 8004ca6:	465b      	mov	r3, fp
 8004ca8:	4640      	mov	r0, r8
 8004caa:	4649      	mov	r1, r9
 8004cac:	f7fb fb78 	bl	80003a0 <__aeabi_uldivmod>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	4613      	mov	r3, r2
 8004cb6:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004cb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004cbe:	d308      	bcc.n	8004cd2 <UART_SetConfig+0x79a>
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004cc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004cc6:	d204      	bcs.n	8004cd2 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004cc8:	697b      	ldr	r3, [r7, #20]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004cce:	60da      	str	r2, [r3, #12]
 8004cd0:	e17c      	b.n	8004fcc <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004cd8:	e178      	b.n	8004fcc <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	69db      	ldr	r3, [r3, #28]
 8004cde:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ce2:	f040 80c5 	bne.w	8004e70 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004ce6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004cea:	2b20      	cmp	r3, #32
 8004cec:	dc48      	bgt.n	8004d80 <UART_SetConfig+0x848>
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	db7b      	blt.n	8004dea <UART_SetConfig+0x8b2>
 8004cf2:	2b20      	cmp	r3, #32
 8004cf4:	d879      	bhi.n	8004dea <UART_SetConfig+0x8b2>
 8004cf6:	a201      	add	r2, pc, #4	; (adr r2, 8004cfc <UART_SetConfig+0x7c4>)
 8004cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cfc:	08004d87 	.word	0x08004d87
 8004d00:	08004d8f 	.word	0x08004d8f
 8004d04:	08004deb 	.word	0x08004deb
 8004d08:	08004deb 	.word	0x08004deb
 8004d0c:	08004d97 	.word	0x08004d97
 8004d10:	08004deb 	.word	0x08004deb
 8004d14:	08004deb 	.word	0x08004deb
 8004d18:	08004deb 	.word	0x08004deb
 8004d1c:	08004da7 	.word	0x08004da7
 8004d20:	08004deb 	.word	0x08004deb
 8004d24:	08004deb 	.word	0x08004deb
 8004d28:	08004deb 	.word	0x08004deb
 8004d2c:	08004deb 	.word	0x08004deb
 8004d30:	08004deb 	.word	0x08004deb
 8004d34:	08004deb 	.word	0x08004deb
 8004d38:	08004deb 	.word	0x08004deb
 8004d3c:	08004db7 	.word	0x08004db7
 8004d40:	08004deb 	.word	0x08004deb
 8004d44:	08004deb 	.word	0x08004deb
 8004d48:	08004deb 	.word	0x08004deb
 8004d4c:	08004deb 	.word	0x08004deb
 8004d50:	08004deb 	.word	0x08004deb
 8004d54:	08004deb 	.word	0x08004deb
 8004d58:	08004deb 	.word	0x08004deb
 8004d5c:	08004deb 	.word	0x08004deb
 8004d60:	08004deb 	.word	0x08004deb
 8004d64:	08004deb 	.word	0x08004deb
 8004d68:	08004deb 	.word	0x08004deb
 8004d6c:	08004deb 	.word	0x08004deb
 8004d70:	08004deb 	.word	0x08004deb
 8004d74:	08004deb 	.word	0x08004deb
 8004d78:	08004deb 	.word	0x08004deb
 8004d7c:	08004ddd 	.word	0x08004ddd
 8004d80:	2b40      	cmp	r3, #64	; 0x40
 8004d82:	d02e      	beq.n	8004de2 <UART_SetConfig+0x8aa>
 8004d84:	e031      	b.n	8004dea <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004d86:	f7fd fca1 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8004d8a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d8c:	e033      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004d8e:	f7fd fcb3 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8004d92:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004d94:	e02f      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004d96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004d9a:	4618      	mov	r0, r3
 8004d9c:	f7fe fee2 	bl	8003b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004da2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004da4:	e027      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004da6:	f107 0318 	add.w	r3, r7, #24
 8004daa:	4618      	mov	r0, r3
 8004dac:	f7ff f82e 	bl	8003e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004db4:	e01f      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004db6:	4b2d      	ldr	r3, [pc, #180]	; (8004e6c <UART_SetConfig+0x934>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0320 	and.w	r3, r3, #32
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d009      	beq.n	8004dd6 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004dc2:	4b2a      	ldr	r3, [pc, #168]	; (8004e6c <UART_SetConfig+0x934>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	08db      	lsrs	r3, r3, #3
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	4a24      	ldr	r2, [pc, #144]	; (8004e60 <UART_SetConfig+0x928>)
 8004dce:	fa22 f303 	lsr.w	r3, r2, r3
 8004dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004dd4:	e00f      	b.n	8004df6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004dd6:	4b22      	ldr	r3, [pc, #136]	; (8004e60 <UART_SetConfig+0x928>)
 8004dd8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004dda:	e00c      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004ddc:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <UART_SetConfig+0x92c>)
 8004dde:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de0:	e009      	b.n	8004df6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004de6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004de8:	e005      	b.n	8004df6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004dea:	2300      	movs	r3, #0
 8004dec:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004dee:	2301      	movs	r3, #1
 8004df0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004df4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004df6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	f000 80e7 	beq.w	8004fcc <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	4a19      	ldr	r2, [pc, #100]	; (8004e68 <UART_SetConfig+0x930>)
 8004e04:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004e08:	461a      	mov	r2, r3
 8004e0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e0c:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e10:	005a      	lsls	r2, r3, #1
 8004e12:	697b      	ldr	r3, [r7, #20]
 8004e14:	685b      	ldr	r3, [r3, #4]
 8004e16:	085b      	lsrs	r3, r3, #1
 8004e18:	441a      	add	r2, r3
 8004e1a:	697b      	ldr	r3, [r7, #20]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e22:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004e24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e26:	2b0f      	cmp	r3, #15
 8004e28:	d916      	bls.n	8004e58 <UART_SetConfig+0x920>
 8004e2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e30:	d212      	bcs.n	8004e58 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	f023 030f 	bic.w	r3, r3, #15
 8004e3a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3e:	085b      	lsrs	r3, r3, #1
 8004e40:	b29b      	uxth	r3, r3
 8004e42:	f003 0307 	and.w	r3, r3, #7
 8004e46:	b29a      	uxth	r2, r3
 8004e48:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004e4a:	4313      	orrs	r3, r2
 8004e4c:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8004e54:	60da      	str	r2, [r3, #12]
 8004e56:	e0b9      	b.n	8004fcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004e58:	2301      	movs	r3, #1
 8004e5a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8004e5e:	e0b5      	b.n	8004fcc <UART_SetConfig+0xa94>
 8004e60:	03d09000 	.word	0x03d09000
 8004e64:	003d0900 	.word	0x003d0900
 8004e68:	0800681c 	.word	0x0800681c
 8004e6c:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004e70:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8004e74:	2b20      	cmp	r3, #32
 8004e76:	dc49      	bgt.n	8004f0c <UART_SetConfig+0x9d4>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	db7c      	blt.n	8004f76 <UART_SetConfig+0xa3e>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d87a      	bhi.n	8004f76 <UART_SetConfig+0xa3e>
 8004e80:	a201      	add	r2, pc, #4	; (adr r2, 8004e88 <UART_SetConfig+0x950>)
 8004e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e86:	bf00      	nop
 8004e88:	08004f13 	.word	0x08004f13
 8004e8c:	08004f1b 	.word	0x08004f1b
 8004e90:	08004f77 	.word	0x08004f77
 8004e94:	08004f77 	.word	0x08004f77
 8004e98:	08004f23 	.word	0x08004f23
 8004e9c:	08004f77 	.word	0x08004f77
 8004ea0:	08004f77 	.word	0x08004f77
 8004ea4:	08004f77 	.word	0x08004f77
 8004ea8:	08004f33 	.word	0x08004f33
 8004eac:	08004f77 	.word	0x08004f77
 8004eb0:	08004f77 	.word	0x08004f77
 8004eb4:	08004f77 	.word	0x08004f77
 8004eb8:	08004f77 	.word	0x08004f77
 8004ebc:	08004f77 	.word	0x08004f77
 8004ec0:	08004f77 	.word	0x08004f77
 8004ec4:	08004f77 	.word	0x08004f77
 8004ec8:	08004f43 	.word	0x08004f43
 8004ecc:	08004f77 	.word	0x08004f77
 8004ed0:	08004f77 	.word	0x08004f77
 8004ed4:	08004f77 	.word	0x08004f77
 8004ed8:	08004f77 	.word	0x08004f77
 8004edc:	08004f77 	.word	0x08004f77
 8004ee0:	08004f77 	.word	0x08004f77
 8004ee4:	08004f77 	.word	0x08004f77
 8004ee8:	08004f77 	.word	0x08004f77
 8004eec:	08004f77 	.word	0x08004f77
 8004ef0:	08004f77 	.word	0x08004f77
 8004ef4:	08004f77 	.word	0x08004f77
 8004ef8:	08004f77 	.word	0x08004f77
 8004efc:	08004f77 	.word	0x08004f77
 8004f00:	08004f77 	.word	0x08004f77
 8004f04:	08004f77 	.word	0x08004f77
 8004f08:	08004f69 	.word	0x08004f69
 8004f0c:	2b40      	cmp	r3, #64	; 0x40
 8004f0e:	d02e      	beq.n	8004f6e <UART_SetConfig+0xa36>
 8004f10:	e031      	b.n	8004f76 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f12:	f7fd fbdb 	bl	80026cc <HAL_RCC_GetPCLK1Freq>
 8004f16:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f18:	e033      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f1a:	f7fd fbed 	bl	80026f8 <HAL_RCC_GetPCLK2Freq>
 8004f1e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8004f20:	e02f      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004f22:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004f26:	4618      	mov	r0, r3
 8004f28:	f7fe fe1c 	bl	8003b64 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f30:	e027      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004f32:	f107 0318 	add.w	r3, r7, #24
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe ff68 	bl	8003e0c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f40:	e01f      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004f42:	4b2d      	ldr	r3, [pc, #180]	; (8004ff8 <UART_SetConfig+0xac0>)
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0320 	and.w	r3, r3, #32
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d009      	beq.n	8004f62 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004f4e:	4b2a      	ldr	r3, [pc, #168]	; (8004ff8 <UART_SetConfig+0xac0>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	08db      	lsrs	r3, r3, #3
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	4a28      	ldr	r2, [pc, #160]	; (8004ffc <UART_SetConfig+0xac4>)
 8004f5a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004f60:	e00f      	b.n	8004f82 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004f62:	4b26      	ldr	r3, [pc, #152]	; (8004ffc <UART_SetConfig+0xac4>)
 8004f64:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f66:	e00c      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004f68:	4b25      	ldr	r3, [pc, #148]	; (8005000 <UART_SetConfig+0xac8>)
 8004f6a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f6c:	e009      	b.n	8004f82 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f72:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8004f74:	e005      	b.n	8004f82 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004f76:	2300      	movs	r3, #0
 8004f78:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8004f80:	bf00      	nop
    }

    if (pclk != 0U)
 8004f82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d021      	beq.n	8004fcc <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f8c:	4a1d      	ldr	r2, [pc, #116]	; (8005004 <UART_SetConfig+0xacc>)
 8004f8e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004f92:	461a      	mov	r2, r3
 8004f94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004f96:	fbb3 f2f2 	udiv	r2, r3, r2
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085b      	lsrs	r3, r3, #1
 8004fa0:	441a      	add	r2, r3
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	685b      	ldr	r3, [r3, #4]
 8004fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8004faa:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fae:	2b0f      	cmp	r3, #15
 8004fb0:	d909      	bls.n	8004fc6 <UART_SetConfig+0xa8e>
 8004fb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fb8:	d205      	bcs.n	8004fc6 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	b29a      	uxth	r2, r3
 8004fbe:	697b      	ldr	r3, [r7, #20]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	60da      	str	r2, [r3, #12]
 8004fc4:	e002      	b.n	8004fcc <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004fe8:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3748      	adds	r7, #72	; 0x48
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004ff6:	bf00      	nop
 8004ff8:	58024400 	.word	0x58024400
 8004ffc:	03d09000 	.word	0x03d09000
 8005000:	003d0900 	.word	0x003d0900
 8005004:	0800681c 	.word	0x0800681c

08005008 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005008:	b480      	push	{r7}
 800500a:	b083      	sub	sp, #12
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005014:	f003 0308 	and.w	r3, r3, #8
 8005018:	2b00      	cmp	r3, #0
 800501a:	d00a      	beq.n	8005032 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d00a      	beq.n	8005054 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	430a      	orrs	r2, r1
 8005052:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005058:	f003 0302 	and.w	r3, r3, #2
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00a      	beq.n	8005076 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	685b      	ldr	r3, [r3, #4]
 8005066:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	430a      	orrs	r2, r1
 8005074:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800507a:	f003 0304 	and.w	r3, r3, #4
 800507e:	2b00      	cmp	r3, #0
 8005080:	d00a      	beq.n	8005098 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	685b      	ldr	r3, [r3, #4]
 8005088:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	430a      	orrs	r2, r1
 8005096:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d00a      	beq.n	80050ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	430a      	orrs	r2, r1
 80050b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050be:	f003 0320 	and.w	r3, r3, #32
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d00a      	beq.n	80050dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	430a      	orrs	r2, r1
 80050da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80050e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d01a      	beq.n	800511e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005102:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005106:	d10a      	bne.n	800511e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	685b      	ldr	r3, [r3, #4]
 800510e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	430a      	orrs	r2, r1
 800511c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00a      	beq.n	8005140 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	430a      	orrs	r2, r1
 800513e:	605a      	str	r2, [r3, #4]
  }
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b098      	sub	sp, #96	; 0x60
 8005150:	af02      	add	r7, sp, #8
 8005152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	2200      	movs	r2, #0
 8005158:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800515c:	f7fb ff9e 	bl	800109c <HAL_GetTick>
 8005160:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f003 0308 	and.w	r3, r3, #8
 800516c:	2b08      	cmp	r3, #8
 800516e:	d12f      	bne.n	80051d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005170:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005174:	9300      	str	r3, [sp, #0]
 8005176:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005178:	2200      	movs	r2, #0
 800517a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f000 f88e 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d022      	beq.n	80051d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005192:	e853 3f00 	ldrex	r3, [r3]
 8005196:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005198:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800519e:	653b      	str	r3, [r7, #80]	; 0x50
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	461a      	mov	r2, r3
 80051a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80051ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b0:	e841 2300 	strex	r3, r2, [r1]
 80051b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d1e6      	bne.n	800518a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2220      	movs	r2, #32
 80051c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051cc:	2303      	movs	r3, #3
 80051ce:	e063      	b.n	8005298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f003 0304 	and.w	r3, r3, #4
 80051da:	2b04      	cmp	r3, #4
 80051dc:	d149      	bne.n	8005272 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051e6:	2200      	movs	r2, #0
 80051e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80051ec:	6878      	ldr	r0, [r7, #4]
 80051ee:	f000 f857 	bl	80052a0 <UART_WaitOnFlagUntilTimeout>
 80051f2:	4603      	mov	r3, r0
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d03c      	beq.n	8005272 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005200:	e853 3f00 	ldrex	r3, [r3]
 8005204:	623b      	str	r3, [r7, #32]
   return(result);
 8005206:	6a3b      	ldr	r3, [r7, #32]
 8005208:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800520c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005216:	633b      	str	r3, [r7, #48]	; 0x30
 8005218:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800521a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800521c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521e:	e841 2300 	strex	r3, r2, [r1]
 8005222:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1e6      	bne.n	80051f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	3308      	adds	r3, #8
 8005230:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	e853 3f00 	ldrex	r3, [r3]
 8005238:	60fb      	str	r3, [r7, #12]
   return(result);
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	f023 0301 	bic.w	r3, r3, #1
 8005240:	64bb      	str	r3, [r7, #72]	; 0x48
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3308      	adds	r3, #8
 8005248:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800524a:	61fa      	str	r2, [r7, #28]
 800524c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800524e:	69b9      	ldr	r1, [r7, #24]
 8005250:	69fa      	ldr	r2, [r7, #28]
 8005252:	e841 2300 	strex	r3, r2, [r1]
 8005256:	617b      	str	r3, [r7, #20]
   return(result);
 8005258:	697b      	ldr	r3, [r7, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d1e5      	bne.n	800522a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2220      	movs	r2, #32
 8005262:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	2200      	movs	r2, #0
 800526a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800526e:	2303      	movs	r3, #3
 8005270:	e012      	b.n	8005298 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2220      	movs	r2, #32
 800527e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	2200      	movs	r2, #0
 8005286:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2200      	movs	r2, #0
 800528c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	2200      	movs	r2, #0
 8005292:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005296:	2300      	movs	r3, #0
}
 8005298:	4618      	mov	r0, r3
 800529a:	3758      	adds	r7, #88	; 0x58
 800529c:	46bd      	mov	sp, r7
 800529e:	bd80      	pop	{r7, pc}

080052a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052a0:	b580      	push	{r7, lr}
 80052a2:	b084      	sub	sp, #16
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	60f8      	str	r0, [r7, #12]
 80052a8:	60b9      	str	r1, [r7, #8]
 80052aa:	603b      	str	r3, [r7, #0]
 80052ac:	4613      	mov	r3, r2
 80052ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80052b0:	e04f      	b.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80052b2:	69bb      	ldr	r3, [r7, #24]
 80052b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b8:	d04b      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052ba:	f7fb feef 	bl	800109c <HAL_GetTick>
 80052be:	4602      	mov	r2, r0
 80052c0:	683b      	ldr	r3, [r7, #0]
 80052c2:	1ad3      	subs	r3, r2, r3
 80052c4:	69ba      	ldr	r2, [r7, #24]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d302      	bcc.n	80052d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80052ca:	69bb      	ldr	r3, [r7, #24]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d101      	bne.n	80052d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052d0:	2303      	movs	r3, #3
 80052d2:	e04e      	b.n	8005372 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f003 0304 	and.w	r3, r3, #4
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d037      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	2b80      	cmp	r3, #128	; 0x80
 80052e6:	d034      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
 80052e8:	68bb      	ldr	r3, [r7, #8]
 80052ea:	2b40      	cmp	r3, #64	; 0x40
 80052ec:	d031      	beq.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	69db      	ldr	r3, [r3, #28]
 80052f4:	f003 0308 	and.w	r3, r3, #8
 80052f8:	2b08      	cmp	r3, #8
 80052fa:	d110      	bne.n	800531e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	2208      	movs	r2, #8
 8005302:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005304:	68f8      	ldr	r0, [r7, #12]
 8005306:	f000 f839 	bl	800537c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	2208      	movs	r2, #8
 800530e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2200      	movs	r2, #0
 8005316:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 800531a:	2301      	movs	r3, #1
 800531c:	e029      	b.n	8005372 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	69db      	ldr	r3, [r3, #28]
 8005324:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005328:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800532c:	d111      	bne.n	8005352 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005336:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005338:	68f8      	ldr	r0, [r7, #12]
 800533a:	f000 f81f 	bl	800537c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	2220      	movs	r2, #32
 8005342:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	2200      	movs	r2, #0
 800534a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 800534e:	2303      	movs	r3, #3
 8005350:	e00f      	b.n	8005372 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	69da      	ldr	r2, [r3, #28]
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	4013      	ands	r3, r2
 800535c:	68ba      	ldr	r2, [r7, #8]
 800535e:	429a      	cmp	r2, r3
 8005360:	bf0c      	ite	eq
 8005362:	2301      	moveq	r3, #1
 8005364:	2300      	movne	r3, #0
 8005366:	b2db      	uxtb	r3, r3
 8005368:	461a      	mov	r2, r3
 800536a:	79fb      	ldrb	r3, [r7, #7]
 800536c:	429a      	cmp	r2, r3
 800536e:	d0a0      	beq.n	80052b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	3710      	adds	r7, #16
 8005376:	46bd      	mov	sp, r7
 8005378:	bd80      	pop	{r7, pc}
	...

0800537c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b095      	sub	sp, #84	; 0x54
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800538c:	e853 3f00 	ldrex	r3, [r3]
 8005390:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005392:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005394:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005398:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	461a      	mov	r2, r3
 80053a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053a2:	643b      	str	r3, [r7, #64]	; 0x40
 80053a4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80053a8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80053aa:	e841 2300 	strex	r3, r2, [r1]
 80053ae:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80053b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d1e6      	bne.n	8005384 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	3308      	adds	r3, #8
 80053bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053be:	6a3b      	ldr	r3, [r7, #32]
 80053c0:	e853 3f00 	ldrex	r3, [r3]
 80053c4:	61fb      	str	r3, [r7, #28]
   return(result);
 80053c6:	69fa      	ldr	r2, [r7, #28]
 80053c8:	4b1e      	ldr	r3, [pc, #120]	; (8005444 <UART_EndRxTransfer+0xc8>)
 80053ca:	4013      	ands	r3, r2
 80053cc:	64bb      	str	r3, [r7, #72]	; 0x48
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3308      	adds	r3, #8
 80053d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80053d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80053d8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80053dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80053de:	e841 2300 	strex	r3, r2, [r1]
 80053e2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80053e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1e5      	bne.n	80053b6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ee:	2b01      	cmp	r3, #1
 80053f0:	d118      	bne.n	8005424 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	e853 3f00 	ldrex	r3, [r3]
 80053fe:	60bb      	str	r3, [r7, #8]
   return(result);
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	f023 0310 	bic.w	r3, r3, #16
 8005406:	647b      	str	r3, [r7, #68]	; 0x44
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	461a      	mov	r2, r3
 800540e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005410:	61bb      	str	r3, [r7, #24]
 8005412:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005414:	6979      	ldr	r1, [r7, #20]
 8005416:	69ba      	ldr	r2, [r7, #24]
 8005418:	e841 2300 	strex	r3, r2, [r1]
 800541c:	613b      	str	r3, [r7, #16]
   return(result);
 800541e:	693b      	ldr	r3, [r7, #16]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d1e6      	bne.n	80053f2 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2220      	movs	r2, #32
 8005428:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2200      	movs	r2, #0
 8005436:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005438:	bf00      	nop
 800543a:	3754      	adds	r7, #84	; 0x54
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	effffffe 	.word	0xeffffffe

08005448 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005448:	b480      	push	{r7}
 800544a:	b085      	sub	sp, #20
 800544c:	af00      	add	r7, sp, #0
 800544e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005456:	2b01      	cmp	r3, #1
 8005458:	d101      	bne.n	800545e <HAL_UARTEx_DisableFifoMode+0x16>
 800545a:	2302      	movs	r3, #2
 800545c:	e027      	b.n	80054ae <HAL_UARTEx_DisableFifoMode+0x66>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2201      	movs	r2, #1
 8005462:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	2224      	movs	r2, #36	; 0x24
 800546a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	681a      	ldr	r2, [r3, #0]
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	f022 0201 	bic.w	r2, r2, #1
 8005484:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800548c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68fa      	ldr	r2, [r7, #12]
 800549a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2220      	movs	r2, #32
 80054a0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80054ac:	2300      	movs	r3, #0
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80054ba:	b580      	push	{r7, lr}
 80054bc:	b084      	sub	sp, #16
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d101      	bne.n	80054d2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80054ce:	2302      	movs	r3, #2
 80054d0:	e02d      	b.n	800552e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2201      	movs	r2, #1
 80054d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2224      	movs	r2, #36	; 0x24
 80054de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	681a      	ldr	r2, [r3, #0]
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f022 0201 	bic.w	r2, r2, #1
 80054f8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	683a      	ldr	r2, [r7, #0]
 800550a:	430a      	orrs	r2, r1
 800550c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f850 	bl	80055b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	2220      	movs	r2, #32
 8005520:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2200      	movs	r2, #0
 8005528:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800552c:	2300      	movs	r3, #0
}
 800552e:	4618      	mov	r0, r3
 8005530:	3710      	adds	r7, #16
 8005532:	46bd      	mov	sp, r7
 8005534:	bd80      	pop	{r7, pc}

08005536 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005536:	b580      	push	{r7, lr}
 8005538:	b084      	sub	sp, #16
 800553a:	af00      	add	r7, sp, #0
 800553c:	6078      	str	r0, [r7, #4]
 800553e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005546:	2b01      	cmp	r3, #1
 8005548:	d101      	bne.n	800554e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800554a:	2302      	movs	r3, #2
 800554c:	e02d      	b.n	80055aa <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2201      	movs	r2, #1
 8005552:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2224      	movs	r2, #36	; 0x24
 800555a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	681a      	ldr	r2, [r3, #0]
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	f022 0201 	bic.w	r2, r2, #1
 8005574:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	689b      	ldr	r3, [r3, #8]
 800557c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	430a      	orrs	r2, r1
 8005588:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f000 f812 	bl	80055b4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68fa      	ldr	r2, [r7, #12]
 8005596:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2220      	movs	r2, #32
 800559c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2200      	movs	r2, #0
 80055a4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80055a8:	2300      	movs	r3, #0
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
	...

080055b4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b085      	sub	sp, #20
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d108      	bne.n	80055d6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2201      	movs	r2, #1
 80055c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80055d4:	e031      	b.n	800563a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80055d6:	2310      	movs	r3, #16
 80055d8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80055da:	2310      	movs	r3, #16
 80055dc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	0e5b      	lsrs	r3, r3, #25
 80055e6:	b2db      	uxtb	r3, r3
 80055e8:	f003 0307 	and.w	r3, r3, #7
 80055ec:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	0f5b      	lsrs	r3, r3, #29
 80055f6:	b2db      	uxtb	r3, r3
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80055fe:	7bbb      	ldrb	r3, [r7, #14]
 8005600:	7b3a      	ldrb	r2, [r7, #12]
 8005602:	4911      	ldr	r1, [pc, #68]	; (8005648 <UARTEx_SetNbDataToProcess+0x94>)
 8005604:	5c8a      	ldrb	r2, [r1, r2]
 8005606:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800560a:	7b3a      	ldrb	r2, [r7, #12]
 800560c:	490f      	ldr	r1, [pc, #60]	; (800564c <UARTEx_SetNbDataToProcess+0x98>)
 800560e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005610:	fb93 f3f2 	sdiv	r3, r3, r2
 8005614:	b29a      	uxth	r2, r3
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800561c:	7bfb      	ldrb	r3, [r7, #15]
 800561e:	7b7a      	ldrb	r2, [r7, #13]
 8005620:	4909      	ldr	r1, [pc, #36]	; (8005648 <UARTEx_SetNbDataToProcess+0x94>)
 8005622:	5c8a      	ldrb	r2, [r1, r2]
 8005624:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005628:	7b7a      	ldrb	r2, [r7, #13]
 800562a:	4908      	ldr	r1, [pc, #32]	; (800564c <UARTEx_SetNbDataToProcess+0x98>)
 800562c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800562e:	fb93 f3f2 	sdiv	r3, r3, r2
 8005632:	b29a      	uxth	r2, r3
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800563a:	bf00      	nop
 800563c:	3714      	adds	r7, #20
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	08006834 	.word	0x08006834
 800564c:	0800683c 	.word	0x0800683c

08005650 <std>:
 8005650:	2300      	movs	r3, #0
 8005652:	b510      	push	{r4, lr}
 8005654:	4604      	mov	r4, r0
 8005656:	e9c0 3300 	strd	r3, r3, [r0]
 800565a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800565e:	6083      	str	r3, [r0, #8]
 8005660:	8181      	strh	r1, [r0, #12]
 8005662:	6643      	str	r3, [r0, #100]	; 0x64
 8005664:	81c2      	strh	r2, [r0, #14]
 8005666:	6183      	str	r3, [r0, #24]
 8005668:	4619      	mov	r1, r3
 800566a:	2208      	movs	r2, #8
 800566c:	305c      	adds	r0, #92	; 0x5c
 800566e:	f000 f91f 	bl	80058b0 <memset>
 8005672:	4b0d      	ldr	r3, [pc, #52]	; (80056a8 <std+0x58>)
 8005674:	6263      	str	r3, [r4, #36]	; 0x24
 8005676:	4b0d      	ldr	r3, [pc, #52]	; (80056ac <std+0x5c>)
 8005678:	62a3      	str	r3, [r4, #40]	; 0x28
 800567a:	4b0d      	ldr	r3, [pc, #52]	; (80056b0 <std+0x60>)
 800567c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800567e:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <std+0x64>)
 8005680:	6323      	str	r3, [r4, #48]	; 0x30
 8005682:	4b0d      	ldr	r3, [pc, #52]	; (80056b8 <std+0x68>)
 8005684:	6224      	str	r4, [r4, #32]
 8005686:	429c      	cmp	r4, r3
 8005688:	d006      	beq.n	8005698 <std+0x48>
 800568a:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800568e:	4294      	cmp	r4, r2
 8005690:	d002      	beq.n	8005698 <std+0x48>
 8005692:	33d0      	adds	r3, #208	; 0xd0
 8005694:	429c      	cmp	r4, r3
 8005696:	d105      	bne.n	80056a4 <std+0x54>
 8005698:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800569c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80056a0:	f000 b938 	b.w	8005914 <__retarget_lock_init_recursive>
 80056a4:	bd10      	pop	{r4, pc}
 80056a6:	bf00      	nop
 80056a8:	080061e1 	.word	0x080061e1
 80056ac:	08006203 	.word	0x08006203
 80056b0:	0800623b 	.word	0x0800623b
 80056b4:	0800625f 	.word	0x0800625f
 80056b8:	24000124 	.word	0x24000124

080056bc <stdio_exit_handler>:
 80056bc:	4a02      	ldr	r2, [pc, #8]	; (80056c8 <stdio_exit_handler+0xc>)
 80056be:	4903      	ldr	r1, [pc, #12]	; (80056cc <stdio_exit_handler+0x10>)
 80056c0:	4803      	ldr	r0, [pc, #12]	; (80056d0 <stdio_exit_handler+0x14>)
 80056c2:	f000 b869 	b.w	8005798 <_fwalk_sglue>
 80056c6:	bf00      	nop
 80056c8:	24000010 	.word	0x24000010
 80056cc:	08006179 	.word	0x08006179
 80056d0:	2400001c 	.word	0x2400001c

080056d4 <cleanup_stdio>:
 80056d4:	6841      	ldr	r1, [r0, #4]
 80056d6:	4b0c      	ldr	r3, [pc, #48]	; (8005708 <cleanup_stdio+0x34>)
 80056d8:	4299      	cmp	r1, r3
 80056da:	b510      	push	{r4, lr}
 80056dc:	4604      	mov	r4, r0
 80056de:	d001      	beq.n	80056e4 <cleanup_stdio+0x10>
 80056e0:	f000 fd4a 	bl	8006178 <_fflush_r>
 80056e4:	68a1      	ldr	r1, [r4, #8]
 80056e6:	4b09      	ldr	r3, [pc, #36]	; (800570c <cleanup_stdio+0x38>)
 80056e8:	4299      	cmp	r1, r3
 80056ea:	d002      	beq.n	80056f2 <cleanup_stdio+0x1e>
 80056ec:	4620      	mov	r0, r4
 80056ee:	f000 fd43 	bl	8006178 <_fflush_r>
 80056f2:	68e1      	ldr	r1, [r4, #12]
 80056f4:	4b06      	ldr	r3, [pc, #24]	; (8005710 <cleanup_stdio+0x3c>)
 80056f6:	4299      	cmp	r1, r3
 80056f8:	d004      	beq.n	8005704 <cleanup_stdio+0x30>
 80056fa:	4620      	mov	r0, r4
 80056fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005700:	f000 bd3a 	b.w	8006178 <_fflush_r>
 8005704:	bd10      	pop	{r4, pc}
 8005706:	bf00      	nop
 8005708:	24000124 	.word	0x24000124
 800570c:	2400018c 	.word	0x2400018c
 8005710:	240001f4 	.word	0x240001f4

08005714 <global_stdio_init.part.0>:
 8005714:	b510      	push	{r4, lr}
 8005716:	4b0b      	ldr	r3, [pc, #44]	; (8005744 <global_stdio_init.part.0+0x30>)
 8005718:	4c0b      	ldr	r4, [pc, #44]	; (8005748 <global_stdio_init.part.0+0x34>)
 800571a:	4a0c      	ldr	r2, [pc, #48]	; (800574c <global_stdio_init.part.0+0x38>)
 800571c:	601a      	str	r2, [r3, #0]
 800571e:	4620      	mov	r0, r4
 8005720:	2200      	movs	r2, #0
 8005722:	2104      	movs	r1, #4
 8005724:	f7ff ff94 	bl	8005650 <std>
 8005728:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800572c:	2201      	movs	r2, #1
 800572e:	2109      	movs	r1, #9
 8005730:	f7ff ff8e 	bl	8005650 <std>
 8005734:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005738:	2202      	movs	r2, #2
 800573a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800573e:	2112      	movs	r1, #18
 8005740:	f7ff bf86 	b.w	8005650 <std>
 8005744:	2400025c 	.word	0x2400025c
 8005748:	24000124 	.word	0x24000124
 800574c:	080056bd 	.word	0x080056bd

08005750 <__sfp_lock_acquire>:
 8005750:	4801      	ldr	r0, [pc, #4]	; (8005758 <__sfp_lock_acquire+0x8>)
 8005752:	f000 b8e0 	b.w	8005916 <__retarget_lock_acquire_recursive>
 8005756:	bf00      	nop
 8005758:	24000261 	.word	0x24000261

0800575c <__sfp_lock_release>:
 800575c:	4801      	ldr	r0, [pc, #4]	; (8005764 <__sfp_lock_release+0x8>)
 800575e:	f000 b8db 	b.w	8005918 <__retarget_lock_release_recursive>
 8005762:	bf00      	nop
 8005764:	24000261 	.word	0x24000261

08005768 <__sinit>:
 8005768:	b510      	push	{r4, lr}
 800576a:	4604      	mov	r4, r0
 800576c:	f7ff fff0 	bl	8005750 <__sfp_lock_acquire>
 8005770:	6a23      	ldr	r3, [r4, #32]
 8005772:	b11b      	cbz	r3, 800577c <__sinit+0x14>
 8005774:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005778:	f7ff bff0 	b.w	800575c <__sfp_lock_release>
 800577c:	4b04      	ldr	r3, [pc, #16]	; (8005790 <__sinit+0x28>)
 800577e:	6223      	str	r3, [r4, #32]
 8005780:	4b04      	ldr	r3, [pc, #16]	; (8005794 <__sinit+0x2c>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d1f5      	bne.n	8005774 <__sinit+0xc>
 8005788:	f7ff ffc4 	bl	8005714 <global_stdio_init.part.0>
 800578c:	e7f2      	b.n	8005774 <__sinit+0xc>
 800578e:	bf00      	nop
 8005790:	080056d5 	.word	0x080056d5
 8005794:	2400025c 	.word	0x2400025c

08005798 <_fwalk_sglue>:
 8005798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800579c:	4607      	mov	r7, r0
 800579e:	4688      	mov	r8, r1
 80057a0:	4614      	mov	r4, r2
 80057a2:	2600      	movs	r6, #0
 80057a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80057a8:	f1b9 0901 	subs.w	r9, r9, #1
 80057ac:	d505      	bpl.n	80057ba <_fwalk_sglue+0x22>
 80057ae:	6824      	ldr	r4, [r4, #0]
 80057b0:	2c00      	cmp	r4, #0
 80057b2:	d1f7      	bne.n	80057a4 <_fwalk_sglue+0xc>
 80057b4:	4630      	mov	r0, r6
 80057b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80057ba:	89ab      	ldrh	r3, [r5, #12]
 80057bc:	2b01      	cmp	r3, #1
 80057be:	d907      	bls.n	80057d0 <_fwalk_sglue+0x38>
 80057c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80057c4:	3301      	adds	r3, #1
 80057c6:	d003      	beq.n	80057d0 <_fwalk_sglue+0x38>
 80057c8:	4629      	mov	r1, r5
 80057ca:	4638      	mov	r0, r7
 80057cc:	47c0      	blx	r8
 80057ce:	4306      	orrs	r6, r0
 80057d0:	3568      	adds	r5, #104	; 0x68
 80057d2:	e7e9      	b.n	80057a8 <_fwalk_sglue+0x10>

080057d4 <iprintf>:
 80057d4:	b40f      	push	{r0, r1, r2, r3}
 80057d6:	b507      	push	{r0, r1, r2, lr}
 80057d8:	4906      	ldr	r1, [pc, #24]	; (80057f4 <iprintf+0x20>)
 80057da:	ab04      	add	r3, sp, #16
 80057dc:	6808      	ldr	r0, [r1, #0]
 80057de:	f853 2b04 	ldr.w	r2, [r3], #4
 80057e2:	6881      	ldr	r1, [r0, #8]
 80057e4:	9301      	str	r3, [sp, #4]
 80057e6:	f000 f8ef 	bl	80059c8 <_vfiprintf_r>
 80057ea:	b003      	add	sp, #12
 80057ec:	f85d eb04 	ldr.w	lr, [sp], #4
 80057f0:	b004      	add	sp, #16
 80057f2:	4770      	bx	lr
 80057f4:	24000068 	.word	0x24000068

080057f8 <strtok>:
 80057f8:	4b16      	ldr	r3, [pc, #88]	; (8005854 <strtok+0x5c>)
 80057fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057fc:	681e      	ldr	r6, [r3, #0]
 80057fe:	6c74      	ldr	r4, [r6, #68]	; 0x44
 8005800:	4605      	mov	r5, r0
 8005802:	b9fc      	cbnz	r4, 8005844 <strtok+0x4c>
 8005804:	2050      	movs	r0, #80	; 0x50
 8005806:	9101      	str	r1, [sp, #4]
 8005808:	f000 f9f8 	bl	8005bfc <malloc>
 800580c:	9901      	ldr	r1, [sp, #4]
 800580e:	6470      	str	r0, [r6, #68]	; 0x44
 8005810:	4602      	mov	r2, r0
 8005812:	b920      	cbnz	r0, 800581e <strtok+0x26>
 8005814:	4b10      	ldr	r3, [pc, #64]	; (8005858 <strtok+0x60>)
 8005816:	4811      	ldr	r0, [pc, #68]	; (800585c <strtok+0x64>)
 8005818:	215b      	movs	r1, #91	; 0x5b
 800581a:	f000 f88d 	bl	8005938 <__assert_func>
 800581e:	e9c0 4400 	strd	r4, r4, [r0]
 8005822:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8005826:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800582a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800582e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8005832:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8005836:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800583a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800583e:	6184      	str	r4, [r0, #24]
 8005840:	7704      	strb	r4, [r0, #28]
 8005842:	6244      	str	r4, [r0, #36]	; 0x24
 8005844:	6c72      	ldr	r2, [r6, #68]	; 0x44
 8005846:	2301      	movs	r3, #1
 8005848:	4628      	mov	r0, r5
 800584a:	b002      	add	sp, #8
 800584c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005850:	f000 b806 	b.w	8005860 <__strtok_r>
 8005854:	24000068 	.word	0x24000068
 8005858:	08006844 	.word	0x08006844
 800585c:	0800685b 	.word	0x0800685b

08005860 <__strtok_r>:
 8005860:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005862:	b908      	cbnz	r0, 8005868 <__strtok_r+0x8>
 8005864:	6810      	ldr	r0, [r2, #0]
 8005866:	b188      	cbz	r0, 800588c <__strtok_r+0x2c>
 8005868:	4604      	mov	r4, r0
 800586a:	4620      	mov	r0, r4
 800586c:	f814 5b01 	ldrb.w	r5, [r4], #1
 8005870:	460f      	mov	r7, r1
 8005872:	f817 6b01 	ldrb.w	r6, [r7], #1
 8005876:	b91e      	cbnz	r6, 8005880 <__strtok_r+0x20>
 8005878:	b965      	cbnz	r5, 8005894 <__strtok_r+0x34>
 800587a:	6015      	str	r5, [r2, #0]
 800587c:	4628      	mov	r0, r5
 800587e:	e005      	b.n	800588c <__strtok_r+0x2c>
 8005880:	42b5      	cmp	r5, r6
 8005882:	d1f6      	bne.n	8005872 <__strtok_r+0x12>
 8005884:	2b00      	cmp	r3, #0
 8005886:	d1f0      	bne.n	800586a <__strtok_r+0xa>
 8005888:	6014      	str	r4, [r2, #0]
 800588a:	7003      	strb	r3, [r0, #0]
 800588c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800588e:	461c      	mov	r4, r3
 8005890:	e00c      	b.n	80058ac <__strtok_r+0x4c>
 8005892:	b915      	cbnz	r5, 800589a <__strtok_r+0x3a>
 8005894:	f814 3b01 	ldrb.w	r3, [r4], #1
 8005898:	460e      	mov	r6, r1
 800589a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800589e:	42ab      	cmp	r3, r5
 80058a0:	d1f7      	bne.n	8005892 <__strtok_r+0x32>
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d0f3      	beq.n	800588e <__strtok_r+0x2e>
 80058a6:	2300      	movs	r3, #0
 80058a8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80058ac:	6014      	str	r4, [r2, #0]
 80058ae:	e7ed      	b.n	800588c <__strtok_r+0x2c>

080058b0 <memset>:
 80058b0:	4402      	add	r2, r0
 80058b2:	4603      	mov	r3, r0
 80058b4:	4293      	cmp	r3, r2
 80058b6:	d100      	bne.n	80058ba <memset+0xa>
 80058b8:	4770      	bx	lr
 80058ba:	f803 1b01 	strb.w	r1, [r3], #1
 80058be:	e7f9      	b.n	80058b4 <memset+0x4>

080058c0 <__errno>:
 80058c0:	4b01      	ldr	r3, [pc, #4]	; (80058c8 <__errno+0x8>)
 80058c2:	6818      	ldr	r0, [r3, #0]
 80058c4:	4770      	bx	lr
 80058c6:	bf00      	nop
 80058c8:	24000068 	.word	0x24000068

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4d0d      	ldr	r5, [pc, #52]	; (8005904 <__libc_init_array+0x38>)
 80058d0:	4c0d      	ldr	r4, [pc, #52]	; (8005908 <__libc_init_array+0x3c>)
 80058d2:	1b64      	subs	r4, r4, r5
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	2600      	movs	r6, #0
 80058d8:	42a6      	cmp	r6, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	4d0b      	ldr	r5, [pc, #44]	; (800590c <__libc_init_array+0x40>)
 80058de:	4c0c      	ldr	r4, [pc, #48]	; (8005910 <__libc_init_array+0x44>)
 80058e0:	f000 fedc 	bl	800669c <_init>
 80058e4:	1b64      	subs	r4, r4, r5
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	2600      	movs	r6, #0
 80058ea:	42a6      	cmp	r6, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f855 3b04 	ldr.w	r3, [r5], #4
 80058f4:	4798      	blx	r3
 80058f6:	3601      	adds	r6, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	f855 3b04 	ldr.w	r3, [r5], #4
 80058fe:	4798      	blx	r3
 8005900:	3601      	adds	r6, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	0800692c 	.word	0x0800692c
 8005908:	0800692c 	.word	0x0800692c
 800590c:	0800692c 	.word	0x0800692c
 8005910:	08006930 	.word	0x08006930

08005914 <__retarget_lock_init_recursive>:
 8005914:	4770      	bx	lr

08005916 <__retarget_lock_acquire_recursive>:
 8005916:	4770      	bx	lr

08005918 <__retarget_lock_release_recursive>:
 8005918:	4770      	bx	lr

0800591a <memcpy>:
 800591a:	440a      	add	r2, r1
 800591c:	4291      	cmp	r1, r2
 800591e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005922:	d100      	bne.n	8005926 <memcpy+0xc>
 8005924:	4770      	bx	lr
 8005926:	b510      	push	{r4, lr}
 8005928:	f811 4b01 	ldrb.w	r4, [r1], #1
 800592c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005930:	4291      	cmp	r1, r2
 8005932:	d1f9      	bne.n	8005928 <memcpy+0xe>
 8005934:	bd10      	pop	{r4, pc}
	...

08005938 <__assert_func>:
 8005938:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800593a:	4614      	mov	r4, r2
 800593c:	461a      	mov	r2, r3
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <__assert_func+0x2c>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	4605      	mov	r5, r0
 8005944:	68d8      	ldr	r0, [r3, #12]
 8005946:	b14c      	cbz	r4, 800595c <__assert_func+0x24>
 8005948:	4b07      	ldr	r3, [pc, #28]	; (8005968 <__assert_func+0x30>)
 800594a:	9100      	str	r1, [sp, #0]
 800594c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005950:	4906      	ldr	r1, [pc, #24]	; (800596c <__assert_func+0x34>)
 8005952:	462b      	mov	r3, r5
 8005954:	f000 fc88 	bl	8006268 <fiprintf>
 8005958:	f000 fe08 	bl	800656c <abort>
 800595c:	4b04      	ldr	r3, [pc, #16]	; (8005970 <__assert_func+0x38>)
 800595e:	461c      	mov	r4, r3
 8005960:	e7f3      	b.n	800594a <__assert_func+0x12>
 8005962:	bf00      	nop
 8005964:	24000068 	.word	0x24000068
 8005968:	080068b5 	.word	0x080068b5
 800596c:	080068c2 	.word	0x080068c2
 8005970:	080068f0 	.word	0x080068f0

08005974 <__sfputc_r>:
 8005974:	6893      	ldr	r3, [r2, #8]
 8005976:	3b01      	subs	r3, #1
 8005978:	2b00      	cmp	r3, #0
 800597a:	b410      	push	{r4}
 800597c:	6093      	str	r3, [r2, #8]
 800597e:	da08      	bge.n	8005992 <__sfputc_r+0x1e>
 8005980:	6994      	ldr	r4, [r2, #24]
 8005982:	42a3      	cmp	r3, r4
 8005984:	db01      	blt.n	800598a <__sfputc_r+0x16>
 8005986:	290a      	cmp	r1, #10
 8005988:	d103      	bne.n	8005992 <__sfputc_r+0x1e>
 800598a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800598e:	f000 bc7d 	b.w	800628c <__swbuf_r>
 8005992:	6813      	ldr	r3, [r2, #0]
 8005994:	1c58      	adds	r0, r3, #1
 8005996:	6010      	str	r0, [r2, #0]
 8005998:	7019      	strb	r1, [r3, #0]
 800599a:	4608      	mov	r0, r1
 800599c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80059a0:	4770      	bx	lr

080059a2 <__sfputs_r>:
 80059a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059a4:	4606      	mov	r6, r0
 80059a6:	460f      	mov	r7, r1
 80059a8:	4614      	mov	r4, r2
 80059aa:	18d5      	adds	r5, r2, r3
 80059ac:	42ac      	cmp	r4, r5
 80059ae:	d101      	bne.n	80059b4 <__sfputs_r+0x12>
 80059b0:	2000      	movs	r0, #0
 80059b2:	e007      	b.n	80059c4 <__sfputs_r+0x22>
 80059b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80059b8:	463a      	mov	r2, r7
 80059ba:	4630      	mov	r0, r6
 80059bc:	f7ff ffda 	bl	8005974 <__sfputc_r>
 80059c0:	1c43      	adds	r3, r0, #1
 80059c2:	d1f3      	bne.n	80059ac <__sfputs_r+0xa>
 80059c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080059c8 <_vfiprintf_r>:
 80059c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059cc:	460d      	mov	r5, r1
 80059ce:	b09d      	sub	sp, #116	; 0x74
 80059d0:	4614      	mov	r4, r2
 80059d2:	4698      	mov	r8, r3
 80059d4:	4606      	mov	r6, r0
 80059d6:	b118      	cbz	r0, 80059e0 <_vfiprintf_r+0x18>
 80059d8:	6a03      	ldr	r3, [r0, #32]
 80059da:	b90b      	cbnz	r3, 80059e0 <_vfiprintf_r+0x18>
 80059dc:	f7ff fec4 	bl	8005768 <__sinit>
 80059e0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80059e2:	07d9      	lsls	r1, r3, #31
 80059e4:	d405      	bmi.n	80059f2 <_vfiprintf_r+0x2a>
 80059e6:	89ab      	ldrh	r3, [r5, #12]
 80059e8:	059a      	lsls	r2, r3, #22
 80059ea:	d402      	bmi.n	80059f2 <_vfiprintf_r+0x2a>
 80059ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80059ee:	f7ff ff92 	bl	8005916 <__retarget_lock_acquire_recursive>
 80059f2:	89ab      	ldrh	r3, [r5, #12]
 80059f4:	071b      	lsls	r3, r3, #28
 80059f6:	d501      	bpl.n	80059fc <_vfiprintf_r+0x34>
 80059f8:	692b      	ldr	r3, [r5, #16]
 80059fa:	b99b      	cbnz	r3, 8005a24 <_vfiprintf_r+0x5c>
 80059fc:	4629      	mov	r1, r5
 80059fe:	4630      	mov	r0, r6
 8005a00:	f000 fc82 	bl	8006308 <__swsetup_r>
 8005a04:	b170      	cbz	r0, 8005a24 <_vfiprintf_r+0x5c>
 8005a06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005a08:	07dc      	lsls	r4, r3, #31
 8005a0a:	d504      	bpl.n	8005a16 <_vfiprintf_r+0x4e>
 8005a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005a10:	b01d      	add	sp, #116	; 0x74
 8005a12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a16:	89ab      	ldrh	r3, [r5, #12]
 8005a18:	0598      	lsls	r0, r3, #22
 8005a1a:	d4f7      	bmi.n	8005a0c <_vfiprintf_r+0x44>
 8005a1c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005a1e:	f7ff ff7b 	bl	8005918 <__retarget_lock_release_recursive>
 8005a22:	e7f3      	b.n	8005a0c <_vfiprintf_r+0x44>
 8005a24:	2300      	movs	r3, #0
 8005a26:	9309      	str	r3, [sp, #36]	; 0x24
 8005a28:	2320      	movs	r3, #32
 8005a2a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005a2e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005a32:	2330      	movs	r3, #48	; 0x30
 8005a34:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8005be8 <_vfiprintf_r+0x220>
 8005a38:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005a3c:	f04f 0901 	mov.w	r9, #1
 8005a40:	4623      	mov	r3, r4
 8005a42:	469a      	mov	sl, r3
 8005a44:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005a48:	b10a      	cbz	r2, 8005a4e <_vfiprintf_r+0x86>
 8005a4a:	2a25      	cmp	r2, #37	; 0x25
 8005a4c:	d1f9      	bne.n	8005a42 <_vfiprintf_r+0x7a>
 8005a4e:	ebba 0b04 	subs.w	fp, sl, r4
 8005a52:	d00b      	beq.n	8005a6c <_vfiprintf_r+0xa4>
 8005a54:	465b      	mov	r3, fp
 8005a56:	4622      	mov	r2, r4
 8005a58:	4629      	mov	r1, r5
 8005a5a:	4630      	mov	r0, r6
 8005a5c:	f7ff ffa1 	bl	80059a2 <__sfputs_r>
 8005a60:	3001      	adds	r0, #1
 8005a62:	f000 80a9 	beq.w	8005bb8 <_vfiprintf_r+0x1f0>
 8005a66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005a68:	445a      	add	r2, fp
 8005a6a:	9209      	str	r2, [sp, #36]	; 0x24
 8005a6c:	f89a 3000 	ldrb.w	r3, [sl]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 80a1 	beq.w	8005bb8 <_vfiprintf_r+0x1f0>
 8005a76:	2300      	movs	r3, #0
 8005a78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005a7c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005a80:	f10a 0a01 	add.w	sl, sl, #1
 8005a84:	9304      	str	r3, [sp, #16]
 8005a86:	9307      	str	r3, [sp, #28]
 8005a88:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005a8c:	931a      	str	r3, [sp, #104]	; 0x68
 8005a8e:	4654      	mov	r4, sl
 8005a90:	2205      	movs	r2, #5
 8005a92:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a96:	4854      	ldr	r0, [pc, #336]	; (8005be8 <_vfiprintf_r+0x220>)
 8005a98:	f7fa fc32 	bl	8000300 <memchr>
 8005a9c:	9a04      	ldr	r2, [sp, #16]
 8005a9e:	b9d8      	cbnz	r0, 8005ad8 <_vfiprintf_r+0x110>
 8005aa0:	06d1      	lsls	r1, r2, #27
 8005aa2:	bf44      	itt	mi
 8005aa4:	2320      	movmi	r3, #32
 8005aa6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005aaa:	0713      	lsls	r3, r2, #28
 8005aac:	bf44      	itt	mi
 8005aae:	232b      	movmi	r3, #43	; 0x2b
 8005ab0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005ab4:	f89a 3000 	ldrb.w	r3, [sl]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d015      	beq.n	8005ae8 <_vfiprintf_r+0x120>
 8005abc:	9a07      	ldr	r2, [sp, #28]
 8005abe:	4654      	mov	r4, sl
 8005ac0:	2000      	movs	r0, #0
 8005ac2:	f04f 0c0a 	mov.w	ip, #10
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005acc:	3b30      	subs	r3, #48	; 0x30
 8005ace:	2b09      	cmp	r3, #9
 8005ad0:	d94d      	bls.n	8005b6e <_vfiprintf_r+0x1a6>
 8005ad2:	b1b0      	cbz	r0, 8005b02 <_vfiprintf_r+0x13a>
 8005ad4:	9207      	str	r2, [sp, #28]
 8005ad6:	e014      	b.n	8005b02 <_vfiprintf_r+0x13a>
 8005ad8:	eba0 0308 	sub.w	r3, r0, r8
 8005adc:	fa09 f303 	lsl.w	r3, r9, r3
 8005ae0:	4313      	orrs	r3, r2
 8005ae2:	9304      	str	r3, [sp, #16]
 8005ae4:	46a2      	mov	sl, r4
 8005ae6:	e7d2      	b.n	8005a8e <_vfiprintf_r+0xc6>
 8005ae8:	9b03      	ldr	r3, [sp, #12]
 8005aea:	1d19      	adds	r1, r3, #4
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	9103      	str	r1, [sp, #12]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	bfbb      	ittet	lt
 8005af4:	425b      	neglt	r3, r3
 8005af6:	f042 0202 	orrlt.w	r2, r2, #2
 8005afa:	9307      	strge	r3, [sp, #28]
 8005afc:	9307      	strlt	r3, [sp, #28]
 8005afe:	bfb8      	it	lt
 8005b00:	9204      	strlt	r2, [sp, #16]
 8005b02:	7823      	ldrb	r3, [r4, #0]
 8005b04:	2b2e      	cmp	r3, #46	; 0x2e
 8005b06:	d10c      	bne.n	8005b22 <_vfiprintf_r+0x15a>
 8005b08:	7863      	ldrb	r3, [r4, #1]
 8005b0a:	2b2a      	cmp	r3, #42	; 0x2a
 8005b0c:	d134      	bne.n	8005b78 <_vfiprintf_r+0x1b0>
 8005b0e:	9b03      	ldr	r3, [sp, #12]
 8005b10:	1d1a      	adds	r2, r3, #4
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	9203      	str	r2, [sp, #12]
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	bfb8      	it	lt
 8005b1a:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8005b1e:	3402      	adds	r4, #2
 8005b20:	9305      	str	r3, [sp, #20]
 8005b22:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8005bf8 <_vfiprintf_r+0x230>
 8005b26:	7821      	ldrb	r1, [r4, #0]
 8005b28:	2203      	movs	r2, #3
 8005b2a:	4650      	mov	r0, sl
 8005b2c:	f7fa fbe8 	bl	8000300 <memchr>
 8005b30:	b138      	cbz	r0, 8005b42 <_vfiprintf_r+0x17a>
 8005b32:	9b04      	ldr	r3, [sp, #16]
 8005b34:	eba0 000a 	sub.w	r0, r0, sl
 8005b38:	2240      	movs	r2, #64	; 0x40
 8005b3a:	4082      	lsls	r2, r0
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	3401      	adds	r4, #1
 8005b40:	9304      	str	r3, [sp, #16]
 8005b42:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005b46:	4829      	ldr	r0, [pc, #164]	; (8005bec <_vfiprintf_r+0x224>)
 8005b48:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005b4c:	2206      	movs	r2, #6
 8005b4e:	f7fa fbd7 	bl	8000300 <memchr>
 8005b52:	2800      	cmp	r0, #0
 8005b54:	d03f      	beq.n	8005bd6 <_vfiprintf_r+0x20e>
 8005b56:	4b26      	ldr	r3, [pc, #152]	; (8005bf0 <_vfiprintf_r+0x228>)
 8005b58:	bb1b      	cbnz	r3, 8005ba2 <_vfiprintf_r+0x1da>
 8005b5a:	9b03      	ldr	r3, [sp, #12]
 8005b5c:	3307      	adds	r3, #7
 8005b5e:	f023 0307 	bic.w	r3, r3, #7
 8005b62:	3308      	adds	r3, #8
 8005b64:	9303      	str	r3, [sp, #12]
 8005b66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b68:	443b      	add	r3, r7
 8005b6a:	9309      	str	r3, [sp, #36]	; 0x24
 8005b6c:	e768      	b.n	8005a40 <_vfiprintf_r+0x78>
 8005b6e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005b72:	460c      	mov	r4, r1
 8005b74:	2001      	movs	r0, #1
 8005b76:	e7a6      	b.n	8005ac6 <_vfiprintf_r+0xfe>
 8005b78:	2300      	movs	r3, #0
 8005b7a:	3401      	adds	r4, #1
 8005b7c:	9305      	str	r3, [sp, #20]
 8005b7e:	4619      	mov	r1, r3
 8005b80:	f04f 0c0a 	mov.w	ip, #10
 8005b84:	4620      	mov	r0, r4
 8005b86:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005b8a:	3a30      	subs	r2, #48	; 0x30
 8005b8c:	2a09      	cmp	r2, #9
 8005b8e:	d903      	bls.n	8005b98 <_vfiprintf_r+0x1d0>
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d0c6      	beq.n	8005b22 <_vfiprintf_r+0x15a>
 8005b94:	9105      	str	r1, [sp, #20]
 8005b96:	e7c4      	b.n	8005b22 <_vfiprintf_r+0x15a>
 8005b98:	fb0c 2101 	mla	r1, ip, r1, r2
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e7f0      	b.n	8005b84 <_vfiprintf_r+0x1bc>
 8005ba2:	ab03      	add	r3, sp, #12
 8005ba4:	9300      	str	r3, [sp, #0]
 8005ba6:	462a      	mov	r2, r5
 8005ba8:	4b12      	ldr	r3, [pc, #72]	; (8005bf4 <_vfiprintf_r+0x22c>)
 8005baa:	a904      	add	r1, sp, #16
 8005bac:	4630      	mov	r0, r6
 8005bae:	f3af 8000 	nop.w
 8005bb2:	4607      	mov	r7, r0
 8005bb4:	1c78      	adds	r0, r7, #1
 8005bb6:	d1d6      	bne.n	8005b66 <_vfiprintf_r+0x19e>
 8005bb8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005bba:	07d9      	lsls	r1, r3, #31
 8005bbc:	d405      	bmi.n	8005bca <_vfiprintf_r+0x202>
 8005bbe:	89ab      	ldrh	r3, [r5, #12]
 8005bc0:	059a      	lsls	r2, r3, #22
 8005bc2:	d402      	bmi.n	8005bca <_vfiprintf_r+0x202>
 8005bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005bc6:	f7ff fea7 	bl	8005918 <__retarget_lock_release_recursive>
 8005bca:	89ab      	ldrh	r3, [r5, #12]
 8005bcc:	065b      	lsls	r3, r3, #25
 8005bce:	f53f af1d 	bmi.w	8005a0c <_vfiprintf_r+0x44>
 8005bd2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005bd4:	e71c      	b.n	8005a10 <_vfiprintf_r+0x48>
 8005bd6:	ab03      	add	r3, sp, #12
 8005bd8:	9300      	str	r3, [sp, #0]
 8005bda:	462a      	mov	r2, r5
 8005bdc:	4b05      	ldr	r3, [pc, #20]	; (8005bf4 <_vfiprintf_r+0x22c>)
 8005bde:	a904      	add	r1, sp, #16
 8005be0:	4630      	mov	r0, r6
 8005be2:	f000 f921 	bl	8005e28 <_printf_i>
 8005be6:	e7e4      	b.n	8005bb2 <_vfiprintf_r+0x1ea>
 8005be8:	080068f1 	.word	0x080068f1
 8005bec:	080068fb 	.word	0x080068fb
 8005bf0:	00000000 	.word	0x00000000
 8005bf4:	080059a3 	.word	0x080059a3
 8005bf8:	080068f7 	.word	0x080068f7

08005bfc <malloc>:
 8005bfc:	4b02      	ldr	r3, [pc, #8]	; (8005c08 <malloc+0xc>)
 8005bfe:	4601      	mov	r1, r0
 8005c00:	6818      	ldr	r0, [r3, #0]
 8005c02:	f000 b823 	b.w	8005c4c <_malloc_r>
 8005c06:	bf00      	nop
 8005c08:	24000068 	.word	0x24000068

08005c0c <sbrk_aligned>:
 8005c0c:	b570      	push	{r4, r5, r6, lr}
 8005c0e:	4e0e      	ldr	r6, [pc, #56]	; (8005c48 <sbrk_aligned+0x3c>)
 8005c10:	460c      	mov	r4, r1
 8005c12:	6831      	ldr	r1, [r6, #0]
 8005c14:	4605      	mov	r5, r0
 8005c16:	b911      	cbnz	r1, 8005c1e <sbrk_aligned+0x12>
 8005c18:	f000 fc86 	bl	8006528 <_sbrk_r>
 8005c1c:	6030      	str	r0, [r6, #0]
 8005c1e:	4621      	mov	r1, r4
 8005c20:	4628      	mov	r0, r5
 8005c22:	f000 fc81 	bl	8006528 <_sbrk_r>
 8005c26:	1c43      	adds	r3, r0, #1
 8005c28:	d00a      	beq.n	8005c40 <sbrk_aligned+0x34>
 8005c2a:	1cc4      	adds	r4, r0, #3
 8005c2c:	f024 0403 	bic.w	r4, r4, #3
 8005c30:	42a0      	cmp	r0, r4
 8005c32:	d007      	beq.n	8005c44 <sbrk_aligned+0x38>
 8005c34:	1a21      	subs	r1, r4, r0
 8005c36:	4628      	mov	r0, r5
 8005c38:	f000 fc76 	bl	8006528 <_sbrk_r>
 8005c3c:	3001      	adds	r0, #1
 8005c3e:	d101      	bne.n	8005c44 <sbrk_aligned+0x38>
 8005c40:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8005c44:	4620      	mov	r0, r4
 8005c46:	bd70      	pop	{r4, r5, r6, pc}
 8005c48:	24000268 	.word	0x24000268

08005c4c <_malloc_r>:
 8005c4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c50:	1ccd      	adds	r5, r1, #3
 8005c52:	f025 0503 	bic.w	r5, r5, #3
 8005c56:	3508      	adds	r5, #8
 8005c58:	2d0c      	cmp	r5, #12
 8005c5a:	bf38      	it	cc
 8005c5c:	250c      	movcc	r5, #12
 8005c5e:	2d00      	cmp	r5, #0
 8005c60:	4607      	mov	r7, r0
 8005c62:	db01      	blt.n	8005c68 <_malloc_r+0x1c>
 8005c64:	42a9      	cmp	r1, r5
 8005c66:	d905      	bls.n	8005c74 <_malloc_r+0x28>
 8005c68:	230c      	movs	r3, #12
 8005c6a:	603b      	str	r3, [r7, #0]
 8005c6c:	2600      	movs	r6, #0
 8005c6e:	4630      	mov	r0, r6
 8005c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c74:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005d48 <_malloc_r+0xfc>
 8005c78:	f000 faa6 	bl	80061c8 <__malloc_lock>
 8005c7c:	f8d8 3000 	ldr.w	r3, [r8]
 8005c80:	461c      	mov	r4, r3
 8005c82:	bb5c      	cbnz	r4, 8005cdc <_malloc_r+0x90>
 8005c84:	4629      	mov	r1, r5
 8005c86:	4638      	mov	r0, r7
 8005c88:	f7ff ffc0 	bl	8005c0c <sbrk_aligned>
 8005c8c:	1c43      	adds	r3, r0, #1
 8005c8e:	4604      	mov	r4, r0
 8005c90:	d155      	bne.n	8005d3e <_malloc_r+0xf2>
 8005c92:	f8d8 4000 	ldr.w	r4, [r8]
 8005c96:	4626      	mov	r6, r4
 8005c98:	2e00      	cmp	r6, #0
 8005c9a:	d145      	bne.n	8005d28 <_malloc_r+0xdc>
 8005c9c:	2c00      	cmp	r4, #0
 8005c9e:	d048      	beq.n	8005d32 <_malloc_r+0xe6>
 8005ca0:	6823      	ldr	r3, [r4, #0]
 8005ca2:	4631      	mov	r1, r6
 8005ca4:	4638      	mov	r0, r7
 8005ca6:	eb04 0903 	add.w	r9, r4, r3
 8005caa:	f000 fc3d 	bl	8006528 <_sbrk_r>
 8005cae:	4581      	cmp	r9, r0
 8005cb0:	d13f      	bne.n	8005d32 <_malloc_r+0xe6>
 8005cb2:	6821      	ldr	r1, [r4, #0]
 8005cb4:	1a6d      	subs	r5, r5, r1
 8005cb6:	4629      	mov	r1, r5
 8005cb8:	4638      	mov	r0, r7
 8005cba:	f7ff ffa7 	bl	8005c0c <sbrk_aligned>
 8005cbe:	3001      	adds	r0, #1
 8005cc0:	d037      	beq.n	8005d32 <_malloc_r+0xe6>
 8005cc2:	6823      	ldr	r3, [r4, #0]
 8005cc4:	442b      	add	r3, r5
 8005cc6:	6023      	str	r3, [r4, #0]
 8005cc8:	f8d8 3000 	ldr.w	r3, [r8]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d038      	beq.n	8005d42 <_malloc_r+0xf6>
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	42a2      	cmp	r2, r4
 8005cd4:	d12b      	bne.n	8005d2e <_malloc_r+0xe2>
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	605a      	str	r2, [r3, #4]
 8005cda:	e00f      	b.n	8005cfc <_malloc_r+0xb0>
 8005cdc:	6822      	ldr	r2, [r4, #0]
 8005cde:	1b52      	subs	r2, r2, r5
 8005ce0:	d41f      	bmi.n	8005d22 <_malloc_r+0xd6>
 8005ce2:	2a0b      	cmp	r2, #11
 8005ce4:	d917      	bls.n	8005d16 <_malloc_r+0xca>
 8005ce6:	1961      	adds	r1, r4, r5
 8005ce8:	42a3      	cmp	r3, r4
 8005cea:	6025      	str	r5, [r4, #0]
 8005cec:	bf18      	it	ne
 8005cee:	6059      	strne	r1, [r3, #4]
 8005cf0:	6863      	ldr	r3, [r4, #4]
 8005cf2:	bf08      	it	eq
 8005cf4:	f8c8 1000 	streq.w	r1, [r8]
 8005cf8:	5162      	str	r2, [r4, r5]
 8005cfa:	604b      	str	r3, [r1, #4]
 8005cfc:	4638      	mov	r0, r7
 8005cfe:	f104 060b 	add.w	r6, r4, #11
 8005d02:	f000 fa67 	bl	80061d4 <__malloc_unlock>
 8005d06:	f026 0607 	bic.w	r6, r6, #7
 8005d0a:	1d23      	adds	r3, r4, #4
 8005d0c:	1af2      	subs	r2, r6, r3
 8005d0e:	d0ae      	beq.n	8005c6e <_malloc_r+0x22>
 8005d10:	1b9b      	subs	r3, r3, r6
 8005d12:	50a3      	str	r3, [r4, r2]
 8005d14:	e7ab      	b.n	8005c6e <_malloc_r+0x22>
 8005d16:	42a3      	cmp	r3, r4
 8005d18:	6862      	ldr	r2, [r4, #4]
 8005d1a:	d1dd      	bne.n	8005cd8 <_malloc_r+0x8c>
 8005d1c:	f8c8 2000 	str.w	r2, [r8]
 8005d20:	e7ec      	b.n	8005cfc <_malloc_r+0xb0>
 8005d22:	4623      	mov	r3, r4
 8005d24:	6864      	ldr	r4, [r4, #4]
 8005d26:	e7ac      	b.n	8005c82 <_malloc_r+0x36>
 8005d28:	4634      	mov	r4, r6
 8005d2a:	6876      	ldr	r6, [r6, #4]
 8005d2c:	e7b4      	b.n	8005c98 <_malloc_r+0x4c>
 8005d2e:	4613      	mov	r3, r2
 8005d30:	e7cc      	b.n	8005ccc <_malloc_r+0x80>
 8005d32:	230c      	movs	r3, #12
 8005d34:	603b      	str	r3, [r7, #0]
 8005d36:	4638      	mov	r0, r7
 8005d38:	f000 fa4c 	bl	80061d4 <__malloc_unlock>
 8005d3c:	e797      	b.n	8005c6e <_malloc_r+0x22>
 8005d3e:	6025      	str	r5, [r4, #0]
 8005d40:	e7dc      	b.n	8005cfc <_malloc_r+0xb0>
 8005d42:	605b      	str	r3, [r3, #4]
 8005d44:	deff      	udf	#255	; 0xff
 8005d46:	bf00      	nop
 8005d48:	24000264 	.word	0x24000264

08005d4c <_printf_common>:
 8005d4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d50:	4616      	mov	r6, r2
 8005d52:	4699      	mov	r9, r3
 8005d54:	688a      	ldr	r2, [r1, #8]
 8005d56:	690b      	ldr	r3, [r1, #16]
 8005d58:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	bfb8      	it	lt
 8005d60:	4613      	movlt	r3, r2
 8005d62:	6033      	str	r3, [r6, #0]
 8005d64:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005d68:	4607      	mov	r7, r0
 8005d6a:	460c      	mov	r4, r1
 8005d6c:	b10a      	cbz	r2, 8005d72 <_printf_common+0x26>
 8005d6e:	3301      	adds	r3, #1
 8005d70:	6033      	str	r3, [r6, #0]
 8005d72:	6823      	ldr	r3, [r4, #0]
 8005d74:	0699      	lsls	r1, r3, #26
 8005d76:	bf42      	ittt	mi
 8005d78:	6833      	ldrmi	r3, [r6, #0]
 8005d7a:	3302      	addmi	r3, #2
 8005d7c:	6033      	strmi	r3, [r6, #0]
 8005d7e:	6825      	ldr	r5, [r4, #0]
 8005d80:	f015 0506 	ands.w	r5, r5, #6
 8005d84:	d106      	bne.n	8005d94 <_printf_common+0x48>
 8005d86:	f104 0a19 	add.w	sl, r4, #25
 8005d8a:	68e3      	ldr	r3, [r4, #12]
 8005d8c:	6832      	ldr	r2, [r6, #0]
 8005d8e:	1a9b      	subs	r3, r3, r2
 8005d90:	42ab      	cmp	r3, r5
 8005d92:	dc26      	bgt.n	8005de2 <_printf_common+0x96>
 8005d94:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005d98:	1e13      	subs	r3, r2, #0
 8005d9a:	6822      	ldr	r2, [r4, #0]
 8005d9c:	bf18      	it	ne
 8005d9e:	2301      	movne	r3, #1
 8005da0:	0692      	lsls	r2, r2, #26
 8005da2:	d42b      	bmi.n	8005dfc <_printf_common+0xb0>
 8005da4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005da8:	4649      	mov	r1, r9
 8005daa:	4638      	mov	r0, r7
 8005dac:	47c0      	blx	r8
 8005dae:	3001      	adds	r0, #1
 8005db0:	d01e      	beq.n	8005df0 <_printf_common+0xa4>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6922      	ldr	r2, [r4, #16]
 8005db6:	f003 0306 	and.w	r3, r3, #6
 8005dba:	2b04      	cmp	r3, #4
 8005dbc:	bf02      	ittt	eq
 8005dbe:	68e5      	ldreq	r5, [r4, #12]
 8005dc0:	6833      	ldreq	r3, [r6, #0]
 8005dc2:	1aed      	subeq	r5, r5, r3
 8005dc4:	68a3      	ldr	r3, [r4, #8]
 8005dc6:	bf0c      	ite	eq
 8005dc8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005dcc:	2500      	movne	r5, #0
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	bfc4      	itt	gt
 8005dd2:	1a9b      	subgt	r3, r3, r2
 8005dd4:	18ed      	addgt	r5, r5, r3
 8005dd6:	2600      	movs	r6, #0
 8005dd8:	341a      	adds	r4, #26
 8005dda:	42b5      	cmp	r5, r6
 8005ddc:	d11a      	bne.n	8005e14 <_printf_common+0xc8>
 8005dde:	2000      	movs	r0, #0
 8005de0:	e008      	b.n	8005df4 <_printf_common+0xa8>
 8005de2:	2301      	movs	r3, #1
 8005de4:	4652      	mov	r2, sl
 8005de6:	4649      	mov	r1, r9
 8005de8:	4638      	mov	r0, r7
 8005dea:	47c0      	blx	r8
 8005dec:	3001      	adds	r0, #1
 8005dee:	d103      	bne.n	8005df8 <_printf_common+0xac>
 8005df0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005df8:	3501      	adds	r5, #1
 8005dfa:	e7c6      	b.n	8005d8a <_printf_common+0x3e>
 8005dfc:	18e1      	adds	r1, r4, r3
 8005dfe:	1c5a      	adds	r2, r3, #1
 8005e00:	2030      	movs	r0, #48	; 0x30
 8005e02:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8005e06:	4422      	add	r2, r4
 8005e08:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005e0c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005e10:	3302      	adds	r3, #2
 8005e12:	e7c7      	b.n	8005da4 <_printf_common+0x58>
 8005e14:	2301      	movs	r3, #1
 8005e16:	4622      	mov	r2, r4
 8005e18:	4649      	mov	r1, r9
 8005e1a:	4638      	mov	r0, r7
 8005e1c:	47c0      	blx	r8
 8005e1e:	3001      	adds	r0, #1
 8005e20:	d0e6      	beq.n	8005df0 <_printf_common+0xa4>
 8005e22:	3601      	adds	r6, #1
 8005e24:	e7d9      	b.n	8005dda <_printf_common+0x8e>
	...

08005e28 <_printf_i>:
 8005e28:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005e2c:	7e0f      	ldrb	r7, [r1, #24]
 8005e2e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005e30:	2f78      	cmp	r7, #120	; 0x78
 8005e32:	4691      	mov	r9, r2
 8005e34:	4680      	mov	r8, r0
 8005e36:	460c      	mov	r4, r1
 8005e38:	469a      	mov	sl, r3
 8005e3a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8005e3e:	d807      	bhi.n	8005e50 <_printf_i+0x28>
 8005e40:	2f62      	cmp	r7, #98	; 0x62
 8005e42:	d80a      	bhi.n	8005e5a <_printf_i+0x32>
 8005e44:	2f00      	cmp	r7, #0
 8005e46:	f000 80d4 	beq.w	8005ff2 <_printf_i+0x1ca>
 8005e4a:	2f58      	cmp	r7, #88	; 0x58
 8005e4c:	f000 80c0 	beq.w	8005fd0 <_printf_i+0x1a8>
 8005e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005e54:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005e58:	e03a      	b.n	8005ed0 <_printf_i+0xa8>
 8005e5a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005e5e:	2b15      	cmp	r3, #21
 8005e60:	d8f6      	bhi.n	8005e50 <_printf_i+0x28>
 8005e62:	a101      	add	r1, pc, #4	; (adr r1, 8005e68 <_printf_i+0x40>)
 8005e64:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005e68:	08005ec1 	.word	0x08005ec1
 8005e6c:	08005ed5 	.word	0x08005ed5
 8005e70:	08005e51 	.word	0x08005e51
 8005e74:	08005e51 	.word	0x08005e51
 8005e78:	08005e51 	.word	0x08005e51
 8005e7c:	08005e51 	.word	0x08005e51
 8005e80:	08005ed5 	.word	0x08005ed5
 8005e84:	08005e51 	.word	0x08005e51
 8005e88:	08005e51 	.word	0x08005e51
 8005e8c:	08005e51 	.word	0x08005e51
 8005e90:	08005e51 	.word	0x08005e51
 8005e94:	08005fd9 	.word	0x08005fd9
 8005e98:	08005f01 	.word	0x08005f01
 8005e9c:	08005f93 	.word	0x08005f93
 8005ea0:	08005e51 	.word	0x08005e51
 8005ea4:	08005e51 	.word	0x08005e51
 8005ea8:	08005ffb 	.word	0x08005ffb
 8005eac:	08005e51 	.word	0x08005e51
 8005eb0:	08005f01 	.word	0x08005f01
 8005eb4:	08005e51 	.word	0x08005e51
 8005eb8:	08005e51 	.word	0x08005e51
 8005ebc:	08005f9b 	.word	0x08005f9b
 8005ec0:	682b      	ldr	r3, [r5, #0]
 8005ec2:	1d1a      	adds	r2, r3, #4
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	602a      	str	r2, [r5, #0]
 8005ec8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005ecc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e09f      	b.n	8006014 <_printf_i+0x1ec>
 8005ed4:	6820      	ldr	r0, [r4, #0]
 8005ed6:	682b      	ldr	r3, [r5, #0]
 8005ed8:	0607      	lsls	r7, r0, #24
 8005eda:	f103 0104 	add.w	r1, r3, #4
 8005ede:	6029      	str	r1, [r5, #0]
 8005ee0:	d501      	bpl.n	8005ee6 <_printf_i+0xbe>
 8005ee2:	681e      	ldr	r6, [r3, #0]
 8005ee4:	e003      	b.n	8005eee <_printf_i+0xc6>
 8005ee6:	0646      	lsls	r6, r0, #25
 8005ee8:	d5fb      	bpl.n	8005ee2 <_printf_i+0xba>
 8005eea:	f9b3 6000 	ldrsh.w	r6, [r3]
 8005eee:	2e00      	cmp	r6, #0
 8005ef0:	da03      	bge.n	8005efa <_printf_i+0xd2>
 8005ef2:	232d      	movs	r3, #45	; 0x2d
 8005ef4:	4276      	negs	r6, r6
 8005ef6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005efa:	485a      	ldr	r0, [pc, #360]	; (8006064 <_printf_i+0x23c>)
 8005efc:	230a      	movs	r3, #10
 8005efe:	e012      	b.n	8005f26 <_printf_i+0xfe>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	6820      	ldr	r0, [r4, #0]
 8005f04:	1d19      	adds	r1, r3, #4
 8005f06:	6029      	str	r1, [r5, #0]
 8005f08:	0605      	lsls	r5, r0, #24
 8005f0a:	d501      	bpl.n	8005f10 <_printf_i+0xe8>
 8005f0c:	681e      	ldr	r6, [r3, #0]
 8005f0e:	e002      	b.n	8005f16 <_printf_i+0xee>
 8005f10:	0641      	lsls	r1, r0, #25
 8005f12:	d5fb      	bpl.n	8005f0c <_printf_i+0xe4>
 8005f14:	881e      	ldrh	r6, [r3, #0]
 8005f16:	4853      	ldr	r0, [pc, #332]	; (8006064 <_printf_i+0x23c>)
 8005f18:	2f6f      	cmp	r7, #111	; 0x6f
 8005f1a:	bf0c      	ite	eq
 8005f1c:	2308      	moveq	r3, #8
 8005f1e:	230a      	movne	r3, #10
 8005f20:	2100      	movs	r1, #0
 8005f22:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005f26:	6865      	ldr	r5, [r4, #4]
 8005f28:	60a5      	str	r5, [r4, #8]
 8005f2a:	2d00      	cmp	r5, #0
 8005f2c:	bfa2      	ittt	ge
 8005f2e:	6821      	ldrge	r1, [r4, #0]
 8005f30:	f021 0104 	bicge.w	r1, r1, #4
 8005f34:	6021      	strge	r1, [r4, #0]
 8005f36:	b90e      	cbnz	r6, 8005f3c <_printf_i+0x114>
 8005f38:	2d00      	cmp	r5, #0
 8005f3a:	d04b      	beq.n	8005fd4 <_printf_i+0x1ac>
 8005f3c:	4615      	mov	r5, r2
 8005f3e:	fbb6 f1f3 	udiv	r1, r6, r3
 8005f42:	fb03 6711 	mls	r7, r3, r1, r6
 8005f46:	5dc7      	ldrb	r7, [r0, r7]
 8005f48:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8005f4c:	4637      	mov	r7, r6
 8005f4e:	42bb      	cmp	r3, r7
 8005f50:	460e      	mov	r6, r1
 8005f52:	d9f4      	bls.n	8005f3e <_printf_i+0x116>
 8005f54:	2b08      	cmp	r3, #8
 8005f56:	d10b      	bne.n	8005f70 <_printf_i+0x148>
 8005f58:	6823      	ldr	r3, [r4, #0]
 8005f5a:	07de      	lsls	r6, r3, #31
 8005f5c:	d508      	bpl.n	8005f70 <_printf_i+0x148>
 8005f5e:	6923      	ldr	r3, [r4, #16]
 8005f60:	6861      	ldr	r1, [r4, #4]
 8005f62:	4299      	cmp	r1, r3
 8005f64:	bfde      	ittt	le
 8005f66:	2330      	movle	r3, #48	; 0x30
 8005f68:	f805 3c01 	strble.w	r3, [r5, #-1]
 8005f6c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8005f70:	1b52      	subs	r2, r2, r5
 8005f72:	6122      	str	r2, [r4, #16]
 8005f74:	f8cd a000 	str.w	sl, [sp]
 8005f78:	464b      	mov	r3, r9
 8005f7a:	aa03      	add	r2, sp, #12
 8005f7c:	4621      	mov	r1, r4
 8005f7e:	4640      	mov	r0, r8
 8005f80:	f7ff fee4 	bl	8005d4c <_printf_common>
 8005f84:	3001      	adds	r0, #1
 8005f86:	d14a      	bne.n	800601e <_printf_i+0x1f6>
 8005f88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005f8c:	b004      	add	sp, #16
 8005f8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f92:	6823      	ldr	r3, [r4, #0]
 8005f94:	f043 0320 	orr.w	r3, r3, #32
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	4833      	ldr	r0, [pc, #204]	; (8006068 <_printf_i+0x240>)
 8005f9c:	2778      	movs	r7, #120	; 0x78
 8005f9e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005fa2:	6823      	ldr	r3, [r4, #0]
 8005fa4:	6829      	ldr	r1, [r5, #0]
 8005fa6:	061f      	lsls	r7, r3, #24
 8005fa8:	f851 6b04 	ldr.w	r6, [r1], #4
 8005fac:	d402      	bmi.n	8005fb4 <_printf_i+0x18c>
 8005fae:	065f      	lsls	r7, r3, #25
 8005fb0:	bf48      	it	mi
 8005fb2:	b2b6      	uxthmi	r6, r6
 8005fb4:	07df      	lsls	r7, r3, #31
 8005fb6:	bf48      	it	mi
 8005fb8:	f043 0320 	orrmi.w	r3, r3, #32
 8005fbc:	6029      	str	r1, [r5, #0]
 8005fbe:	bf48      	it	mi
 8005fc0:	6023      	strmi	r3, [r4, #0]
 8005fc2:	b91e      	cbnz	r6, 8005fcc <_printf_i+0x1a4>
 8005fc4:	6823      	ldr	r3, [r4, #0]
 8005fc6:	f023 0320 	bic.w	r3, r3, #32
 8005fca:	6023      	str	r3, [r4, #0]
 8005fcc:	2310      	movs	r3, #16
 8005fce:	e7a7      	b.n	8005f20 <_printf_i+0xf8>
 8005fd0:	4824      	ldr	r0, [pc, #144]	; (8006064 <_printf_i+0x23c>)
 8005fd2:	e7e4      	b.n	8005f9e <_printf_i+0x176>
 8005fd4:	4615      	mov	r5, r2
 8005fd6:	e7bd      	b.n	8005f54 <_printf_i+0x12c>
 8005fd8:	682b      	ldr	r3, [r5, #0]
 8005fda:	6826      	ldr	r6, [r4, #0]
 8005fdc:	6961      	ldr	r1, [r4, #20]
 8005fde:	1d18      	adds	r0, r3, #4
 8005fe0:	6028      	str	r0, [r5, #0]
 8005fe2:	0635      	lsls	r5, r6, #24
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	d501      	bpl.n	8005fec <_printf_i+0x1c4>
 8005fe8:	6019      	str	r1, [r3, #0]
 8005fea:	e002      	b.n	8005ff2 <_printf_i+0x1ca>
 8005fec:	0670      	lsls	r0, r6, #25
 8005fee:	d5fb      	bpl.n	8005fe8 <_printf_i+0x1c0>
 8005ff0:	8019      	strh	r1, [r3, #0]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	6123      	str	r3, [r4, #16]
 8005ff6:	4615      	mov	r5, r2
 8005ff8:	e7bc      	b.n	8005f74 <_printf_i+0x14c>
 8005ffa:	682b      	ldr	r3, [r5, #0]
 8005ffc:	1d1a      	adds	r2, r3, #4
 8005ffe:	602a      	str	r2, [r5, #0]
 8006000:	681d      	ldr	r5, [r3, #0]
 8006002:	6862      	ldr	r2, [r4, #4]
 8006004:	2100      	movs	r1, #0
 8006006:	4628      	mov	r0, r5
 8006008:	f7fa f97a 	bl	8000300 <memchr>
 800600c:	b108      	cbz	r0, 8006012 <_printf_i+0x1ea>
 800600e:	1b40      	subs	r0, r0, r5
 8006010:	6060      	str	r0, [r4, #4]
 8006012:	6863      	ldr	r3, [r4, #4]
 8006014:	6123      	str	r3, [r4, #16]
 8006016:	2300      	movs	r3, #0
 8006018:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800601c:	e7aa      	b.n	8005f74 <_printf_i+0x14c>
 800601e:	6923      	ldr	r3, [r4, #16]
 8006020:	462a      	mov	r2, r5
 8006022:	4649      	mov	r1, r9
 8006024:	4640      	mov	r0, r8
 8006026:	47d0      	blx	sl
 8006028:	3001      	adds	r0, #1
 800602a:	d0ad      	beq.n	8005f88 <_printf_i+0x160>
 800602c:	6823      	ldr	r3, [r4, #0]
 800602e:	079b      	lsls	r3, r3, #30
 8006030:	d413      	bmi.n	800605a <_printf_i+0x232>
 8006032:	68e0      	ldr	r0, [r4, #12]
 8006034:	9b03      	ldr	r3, [sp, #12]
 8006036:	4298      	cmp	r0, r3
 8006038:	bfb8      	it	lt
 800603a:	4618      	movlt	r0, r3
 800603c:	e7a6      	b.n	8005f8c <_printf_i+0x164>
 800603e:	2301      	movs	r3, #1
 8006040:	4632      	mov	r2, r6
 8006042:	4649      	mov	r1, r9
 8006044:	4640      	mov	r0, r8
 8006046:	47d0      	blx	sl
 8006048:	3001      	adds	r0, #1
 800604a:	d09d      	beq.n	8005f88 <_printf_i+0x160>
 800604c:	3501      	adds	r5, #1
 800604e:	68e3      	ldr	r3, [r4, #12]
 8006050:	9903      	ldr	r1, [sp, #12]
 8006052:	1a5b      	subs	r3, r3, r1
 8006054:	42ab      	cmp	r3, r5
 8006056:	dcf2      	bgt.n	800603e <_printf_i+0x216>
 8006058:	e7eb      	b.n	8006032 <_printf_i+0x20a>
 800605a:	2500      	movs	r5, #0
 800605c:	f104 0619 	add.w	r6, r4, #25
 8006060:	e7f5      	b.n	800604e <_printf_i+0x226>
 8006062:	bf00      	nop
 8006064:	08006902 	.word	0x08006902
 8006068:	08006913 	.word	0x08006913

0800606c <__sflush_r>:
 800606c:	898a      	ldrh	r2, [r1, #12]
 800606e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006072:	4605      	mov	r5, r0
 8006074:	0710      	lsls	r0, r2, #28
 8006076:	460c      	mov	r4, r1
 8006078:	d458      	bmi.n	800612c <__sflush_r+0xc0>
 800607a:	684b      	ldr	r3, [r1, #4]
 800607c:	2b00      	cmp	r3, #0
 800607e:	dc05      	bgt.n	800608c <__sflush_r+0x20>
 8006080:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006082:	2b00      	cmp	r3, #0
 8006084:	dc02      	bgt.n	800608c <__sflush_r+0x20>
 8006086:	2000      	movs	r0, #0
 8006088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800608c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800608e:	2e00      	cmp	r6, #0
 8006090:	d0f9      	beq.n	8006086 <__sflush_r+0x1a>
 8006092:	2300      	movs	r3, #0
 8006094:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006098:	682f      	ldr	r7, [r5, #0]
 800609a:	6a21      	ldr	r1, [r4, #32]
 800609c:	602b      	str	r3, [r5, #0]
 800609e:	d032      	beq.n	8006106 <__sflush_r+0x9a>
 80060a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80060a2:	89a3      	ldrh	r3, [r4, #12]
 80060a4:	075a      	lsls	r2, r3, #29
 80060a6:	d505      	bpl.n	80060b4 <__sflush_r+0x48>
 80060a8:	6863      	ldr	r3, [r4, #4]
 80060aa:	1ac0      	subs	r0, r0, r3
 80060ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80060ae:	b10b      	cbz	r3, 80060b4 <__sflush_r+0x48>
 80060b0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80060b2:	1ac0      	subs	r0, r0, r3
 80060b4:	2300      	movs	r3, #0
 80060b6:	4602      	mov	r2, r0
 80060b8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80060ba:	6a21      	ldr	r1, [r4, #32]
 80060bc:	4628      	mov	r0, r5
 80060be:	47b0      	blx	r6
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	89a3      	ldrh	r3, [r4, #12]
 80060c4:	d106      	bne.n	80060d4 <__sflush_r+0x68>
 80060c6:	6829      	ldr	r1, [r5, #0]
 80060c8:	291d      	cmp	r1, #29
 80060ca:	d82b      	bhi.n	8006124 <__sflush_r+0xb8>
 80060cc:	4a29      	ldr	r2, [pc, #164]	; (8006174 <__sflush_r+0x108>)
 80060ce:	410a      	asrs	r2, r1
 80060d0:	07d6      	lsls	r6, r2, #31
 80060d2:	d427      	bmi.n	8006124 <__sflush_r+0xb8>
 80060d4:	2200      	movs	r2, #0
 80060d6:	6062      	str	r2, [r4, #4]
 80060d8:	04d9      	lsls	r1, r3, #19
 80060da:	6922      	ldr	r2, [r4, #16]
 80060dc:	6022      	str	r2, [r4, #0]
 80060de:	d504      	bpl.n	80060ea <__sflush_r+0x7e>
 80060e0:	1c42      	adds	r2, r0, #1
 80060e2:	d101      	bne.n	80060e8 <__sflush_r+0x7c>
 80060e4:	682b      	ldr	r3, [r5, #0]
 80060e6:	b903      	cbnz	r3, 80060ea <__sflush_r+0x7e>
 80060e8:	6560      	str	r0, [r4, #84]	; 0x54
 80060ea:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80060ec:	602f      	str	r7, [r5, #0]
 80060ee:	2900      	cmp	r1, #0
 80060f0:	d0c9      	beq.n	8006086 <__sflush_r+0x1a>
 80060f2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80060f6:	4299      	cmp	r1, r3
 80060f8:	d002      	beq.n	8006100 <__sflush_r+0x94>
 80060fa:	4628      	mov	r0, r5
 80060fc:	f000 fa3e 	bl	800657c <_free_r>
 8006100:	2000      	movs	r0, #0
 8006102:	6360      	str	r0, [r4, #52]	; 0x34
 8006104:	e7c0      	b.n	8006088 <__sflush_r+0x1c>
 8006106:	2301      	movs	r3, #1
 8006108:	4628      	mov	r0, r5
 800610a:	47b0      	blx	r6
 800610c:	1c41      	adds	r1, r0, #1
 800610e:	d1c8      	bne.n	80060a2 <__sflush_r+0x36>
 8006110:	682b      	ldr	r3, [r5, #0]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d0c5      	beq.n	80060a2 <__sflush_r+0x36>
 8006116:	2b1d      	cmp	r3, #29
 8006118:	d001      	beq.n	800611e <__sflush_r+0xb2>
 800611a:	2b16      	cmp	r3, #22
 800611c:	d101      	bne.n	8006122 <__sflush_r+0xb6>
 800611e:	602f      	str	r7, [r5, #0]
 8006120:	e7b1      	b.n	8006086 <__sflush_r+0x1a>
 8006122:	89a3      	ldrh	r3, [r4, #12]
 8006124:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006128:	81a3      	strh	r3, [r4, #12]
 800612a:	e7ad      	b.n	8006088 <__sflush_r+0x1c>
 800612c:	690f      	ldr	r7, [r1, #16]
 800612e:	2f00      	cmp	r7, #0
 8006130:	d0a9      	beq.n	8006086 <__sflush_r+0x1a>
 8006132:	0793      	lsls	r3, r2, #30
 8006134:	680e      	ldr	r6, [r1, #0]
 8006136:	bf08      	it	eq
 8006138:	694b      	ldreq	r3, [r1, #20]
 800613a:	600f      	str	r7, [r1, #0]
 800613c:	bf18      	it	ne
 800613e:	2300      	movne	r3, #0
 8006140:	eba6 0807 	sub.w	r8, r6, r7
 8006144:	608b      	str	r3, [r1, #8]
 8006146:	f1b8 0f00 	cmp.w	r8, #0
 800614a:	dd9c      	ble.n	8006086 <__sflush_r+0x1a>
 800614c:	6a21      	ldr	r1, [r4, #32]
 800614e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006150:	4643      	mov	r3, r8
 8006152:	463a      	mov	r2, r7
 8006154:	4628      	mov	r0, r5
 8006156:	47b0      	blx	r6
 8006158:	2800      	cmp	r0, #0
 800615a:	dc06      	bgt.n	800616a <__sflush_r+0xfe>
 800615c:	89a3      	ldrh	r3, [r4, #12]
 800615e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006162:	81a3      	strh	r3, [r4, #12]
 8006164:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006168:	e78e      	b.n	8006088 <__sflush_r+0x1c>
 800616a:	4407      	add	r7, r0
 800616c:	eba8 0800 	sub.w	r8, r8, r0
 8006170:	e7e9      	b.n	8006146 <__sflush_r+0xda>
 8006172:	bf00      	nop
 8006174:	dfbffffe 	.word	0xdfbffffe

08006178 <_fflush_r>:
 8006178:	b538      	push	{r3, r4, r5, lr}
 800617a:	690b      	ldr	r3, [r1, #16]
 800617c:	4605      	mov	r5, r0
 800617e:	460c      	mov	r4, r1
 8006180:	b913      	cbnz	r3, 8006188 <_fflush_r+0x10>
 8006182:	2500      	movs	r5, #0
 8006184:	4628      	mov	r0, r5
 8006186:	bd38      	pop	{r3, r4, r5, pc}
 8006188:	b118      	cbz	r0, 8006192 <_fflush_r+0x1a>
 800618a:	6a03      	ldr	r3, [r0, #32]
 800618c:	b90b      	cbnz	r3, 8006192 <_fflush_r+0x1a>
 800618e:	f7ff faeb 	bl	8005768 <__sinit>
 8006192:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006196:	2b00      	cmp	r3, #0
 8006198:	d0f3      	beq.n	8006182 <_fflush_r+0xa>
 800619a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800619c:	07d0      	lsls	r0, r2, #31
 800619e:	d404      	bmi.n	80061aa <_fflush_r+0x32>
 80061a0:	0599      	lsls	r1, r3, #22
 80061a2:	d402      	bmi.n	80061aa <_fflush_r+0x32>
 80061a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061a6:	f7ff fbb6 	bl	8005916 <__retarget_lock_acquire_recursive>
 80061aa:	4628      	mov	r0, r5
 80061ac:	4621      	mov	r1, r4
 80061ae:	f7ff ff5d 	bl	800606c <__sflush_r>
 80061b2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80061b4:	07da      	lsls	r2, r3, #31
 80061b6:	4605      	mov	r5, r0
 80061b8:	d4e4      	bmi.n	8006184 <_fflush_r+0xc>
 80061ba:	89a3      	ldrh	r3, [r4, #12]
 80061bc:	059b      	lsls	r3, r3, #22
 80061be:	d4e1      	bmi.n	8006184 <_fflush_r+0xc>
 80061c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80061c2:	f7ff fba9 	bl	8005918 <__retarget_lock_release_recursive>
 80061c6:	e7dd      	b.n	8006184 <_fflush_r+0xc>

080061c8 <__malloc_lock>:
 80061c8:	4801      	ldr	r0, [pc, #4]	; (80061d0 <__malloc_lock+0x8>)
 80061ca:	f7ff bba4 	b.w	8005916 <__retarget_lock_acquire_recursive>
 80061ce:	bf00      	nop
 80061d0:	24000260 	.word	0x24000260

080061d4 <__malloc_unlock>:
 80061d4:	4801      	ldr	r0, [pc, #4]	; (80061dc <__malloc_unlock+0x8>)
 80061d6:	f7ff bb9f 	b.w	8005918 <__retarget_lock_release_recursive>
 80061da:	bf00      	nop
 80061dc:	24000260 	.word	0x24000260

080061e0 <__sread>:
 80061e0:	b510      	push	{r4, lr}
 80061e2:	460c      	mov	r4, r1
 80061e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80061e8:	f000 f98c 	bl	8006504 <_read_r>
 80061ec:	2800      	cmp	r0, #0
 80061ee:	bfab      	itete	ge
 80061f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80061f2:	89a3      	ldrhlt	r3, [r4, #12]
 80061f4:	181b      	addge	r3, r3, r0
 80061f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80061fa:	bfac      	ite	ge
 80061fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80061fe:	81a3      	strhlt	r3, [r4, #12]
 8006200:	bd10      	pop	{r4, pc}

08006202 <__swrite>:
 8006202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006206:	461f      	mov	r7, r3
 8006208:	898b      	ldrh	r3, [r1, #12]
 800620a:	05db      	lsls	r3, r3, #23
 800620c:	4605      	mov	r5, r0
 800620e:	460c      	mov	r4, r1
 8006210:	4616      	mov	r6, r2
 8006212:	d505      	bpl.n	8006220 <__swrite+0x1e>
 8006214:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006218:	2302      	movs	r3, #2
 800621a:	2200      	movs	r2, #0
 800621c:	f000 f960 	bl	80064e0 <_lseek_r>
 8006220:	89a3      	ldrh	r3, [r4, #12]
 8006222:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006226:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800622a:	81a3      	strh	r3, [r4, #12]
 800622c:	4632      	mov	r2, r6
 800622e:	463b      	mov	r3, r7
 8006230:	4628      	mov	r0, r5
 8006232:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006236:	f000 b987 	b.w	8006548 <_write_r>

0800623a <__sseek>:
 800623a:	b510      	push	{r4, lr}
 800623c:	460c      	mov	r4, r1
 800623e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006242:	f000 f94d 	bl	80064e0 <_lseek_r>
 8006246:	1c43      	adds	r3, r0, #1
 8006248:	89a3      	ldrh	r3, [r4, #12]
 800624a:	bf15      	itete	ne
 800624c:	6560      	strne	r0, [r4, #84]	; 0x54
 800624e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006252:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006256:	81a3      	strheq	r3, [r4, #12]
 8006258:	bf18      	it	ne
 800625a:	81a3      	strhne	r3, [r4, #12]
 800625c:	bd10      	pop	{r4, pc}

0800625e <__sclose>:
 800625e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006262:	f000 b90b 	b.w	800647c <_close_r>
	...

08006268 <fiprintf>:
 8006268:	b40e      	push	{r1, r2, r3}
 800626a:	b503      	push	{r0, r1, lr}
 800626c:	4601      	mov	r1, r0
 800626e:	ab03      	add	r3, sp, #12
 8006270:	4805      	ldr	r0, [pc, #20]	; (8006288 <fiprintf+0x20>)
 8006272:	f853 2b04 	ldr.w	r2, [r3], #4
 8006276:	6800      	ldr	r0, [r0, #0]
 8006278:	9301      	str	r3, [sp, #4]
 800627a:	f7ff fba5 	bl	80059c8 <_vfiprintf_r>
 800627e:	b002      	add	sp, #8
 8006280:	f85d eb04 	ldr.w	lr, [sp], #4
 8006284:	b003      	add	sp, #12
 8006286:	4770      	bx	lr
 8006288:	24000068 	.word	0x24000068

0800628c <__swbuf_r>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	460e      	mov	r6, r1
 8006290:	4614      	mov	r4, r2
 8006292:	4605      	mov	r5, r0
 8006294:	b118      	cbz	r0, 800629e <__swbuf_r+0x12>
 8006296:	6a03      	ldr	r3, [r0, #32]
 8006298:	b90b      	cbnz	r3, 800629e <__swbuf_r+0x12>
 800629a:	f7ff fa65 	bl	8005768 <__sinit>
 800629e:	69a3      	ldr	r3, [r4, #24]
 80062a0:	60a3      	str	r3, [r4, #8]
 80062a2:	89a3      	ldrh	r3, [r4, #12]
 80062a4:	071a      	lsls	r2, r3, #28
 80062a6:	d525      	bpl.n	80062f4 <__swbuf_r+0x68>
 80062a8:	6923      	ldr	r3, [r4, #16]
 80062aa:	b31b      	cbz	r3, 80062f4 <__swbuf_r+0x68>
 80062ac:	6823      	ldr	r3, [r4, #0]
 80062ae:	6922      	ldr	r2, [r4, #16]
 80062b0:	1a98      	subs	r0, r3, r2
 80062b2:	6963      	ldr	r3, [r4, #20]
 80062b4:	b2f6      	uxtb	r6, r6
 80062b6:	4283      	cmp	r3, r0
 80062b8:	4637      	mov	r7, r6
 80062ba:	dc04      	bgt.n	80062c6 <__swbuf_r+0x3a>
 80062bc:	4621      	mov	r1, r4
 80062be:	4628      	mov	r0, r5
 80062c0:	f7ff ff5a 	bl	8006178 <_fflush_r>
 80062c4:	b9e0      	cbnz	r0, 8006300 <__swbuf_r+0x74>
 80062c6:	68a3      	ldr	r3, [r4, #8]
 80062c8:	3b01      	subs	r3, #1
 80062ca:	60a3      	str	r3, [r4, #8]
 80062cc:	6823      	ldr	r3, [r4, #0]
 80062ce:	1c5a      	adds	r2, r3, #1
 80062d0:	6022      	str	r2, [r4, #0]
 80062d2:	701e      	strb	r6, [r3, #0]
 80062d4:	6962      	ldr	r2, [r4, #20]
 80062d6:	1c43      	adds	r3, r0, #1
 80062d8:	429a      	cmp	r2, r3
 80062da:	d004      	beq.n	80062e6 <__swbuf_r+0x5a>
 80062dc:	89a3      	ldrh	r3, [r4, #12]
 80062de:	07db      	lsls	r3, r3, #31
 80062e0:	d506      	bpl.n	80062f0 <__swbuf_r+0x64>
 80062e2:	2e0a      	cmp	r6, #10
 80062e4:	d104      	bne.n	80062f0 <__swbuf_r+0x64>
 80062e6:	4621      	mov	r1, r4
 80062e8:	4628      	mov	r0, r5
 80062ea:	f7ff ff45 	bl	8006178 <_fflush_r>
 80062ee:	b938      	cbnz	r0, 8006300 <__swbuf_r+0x74>
 80062f0:	4638      	mov	r0, r7
 80062f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80062f4:	4621      	mov	r1, r4
 80062f6:	4628      	mov	r0, r5
 80062f8:	f000 f806 	bl	8006308 <__swsetup_r>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d0d5      	beq.n	80062ac <__swbuf_r+0x20>
 8006300:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006304:	e7f4      	b.n	80062f0 <__swbuf_r+0x64>
	...

08006308 <__swsetup_r>:
 8006308:	b538      	push	{r3, r4, r5, lr}
 800630a:	4b2a      	ldr	r3, [pc, #168]	; (80063b4 <__swsetup_r+0xac>)
 800630c:	4605      	mov	r5, r0
 800630e:	6818      	ldr	r0, [r3, #0]
 8006310:	460c      	mov	r4, r1
 8006312:	b118      	cbz	r0, 800631c <__swsetup_r+0x14>
 8006314:	6a03      	ldr	r3, [r0, #32]
 8006316:	b90b      	cbnz	r3, 800631c <__swsetup_r+0x14>
 8006318:	f7ff fa26 	bl	8005768 <__sinit>
 800631c:	89a3      	ldrh	r3, [r4, #12]
 800631e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006322:	0718      	lsls	r0, r3, #28
 8006324:	d422      	bmi.n	800636c <__swsetup_r+0x64>
 8006326:	06d9      	lsls	r1, r3, #27
 8006328:	d407      	bmi.n	800633a <__swsetup_r+0x32>
 800632a:	2309      	movs	r3, #9
 800632c:	602b      	str	r3, [r5, #0]
 800632e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006332:	81a3      	strh	r3, [r4, #12]
 8006334:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006338:	e034      	b.n	80063a4 <__swsetup_r+0x9c>
 800633a:	0758      	lsls	r0, r3, #29
 800633c:	d512      	bpl.n	8006364 <__swsetup_r+0x5c>
 800633e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006340:	b141      	cbz	r1, 8006354 <__swsetup_r+0x4c>
 8006342:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006346:	4299      	cmp	r1, r3
 8006348:	d002      	beq.n	8006350 <__swsetup_r+0x48>
 800634a:	4628      	mov	r0, r5
 800634c:	f000 f916 	bl	800657c <_free_r>
 8006350:	2300      	movs	r3, #0
 8006352:	6363      	str	r3, [r4, #52]	; 0x34
 8006354:	89a3      	ldrh	r3, [r4, #12]
 8006356:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800635a:	81a3      	strh	r3, [r4, #12]
 800635c:	2300      	movs	r3, #0
 800635e:	6063      	str	r3, [r4, #4]
 8006360:	6923      	ldr	r3, [r4, #16]
 8006362:	6023      	str	r3, [r4, #0]
 8006364:	89a3      	ldrh	r3, [r4, #12]
 8006366:	f043 0308 	orr.w	r3, r3, #8
 800636a:	81a3      	strh	r3, [r4, #12]
 800636c:	6923      	ldr	r3, [r4, #16]
 800636e:	b94b      	cbnz	r3, 8006384 <__swsetup_r+0x7c>
 8006370:	89a3      	ldrh	r3, [r4, #12]
 8006372:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006376:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800637a:	d003      	beq.n	8006384 <__swsetup_r+0x7c>
 800637c:	4621      	mov	r1, r4
 800637e:	4628      	mov	r0, r5
 8006380:	f000 f840 	bl	8006404 <__smakebuf_r>
 8006384:	89a0      	ldrh	r0, [r4, #12]
 8006386:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800638a:	f010 0301 	ands.w	r3, r0, #1
 800638e:	d00a      	beq.n	80063a6 <__swsetup_r+0x9e>
 8006390:	2300      	movs	r3, #0
 8006392:	60a3      	str	r3, [r4, #8]
 8006394:	6963      	ldr	r3, [r4, #20]
 8006396:	425b      	negs	r3, r3
 8006398:	61a3      	str	r3, [r4, #24]
 800639a:	6923      	ldr	r3, [r4, #16]
 800639c:	b943      	cbnz	r3, 80063b0 <__swsetup_r+0xa8>
 800639e:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80063a2:	d1c4      	bne.n	800632e <__swsetup_r+0x26>
 80063a4:	bd38      	pop	{r3, r4, r5, pc}
 80063a6:	0781      	lsls	r1, r0, #30
 80063a8:	bf58      	it	pl
 80063aa:	6963      	ldrpl	r3, [r4, #20]
 80063ac:	60a3      	str	r3, [r4, #8]
 80063ae:	e7f4      	b.n	800639a <__swsetup_r+0x92>
 80063b0:	2000      	movs	r0, #0
 80063b2:	e7f7      	b.n	80063a4 <__swsetup_r+0x9c>
 80063b4:	24000068 	.word	0x24000068

080063b8 <__swhatbuf_r>:
 80063b8:	b570      	push	{r4, r5, r6, lr}
 80063ba:	460c      	mov	r4, r1
 80063bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063c0:	2900      	cmp	r1, #0
 80063c2:	b096      	sub	sp, #88	; 0x58
 80063c4:	4615      	mov	r5, r2
 80063c6:	461e      	mov	r6, r3
 80063c8:	da0d      	bge.n	80063e6 <__swhatbuf_r+0x2e>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	f013 0f80 	tst.w	r3, #128	; 0x80
 80063d0:	f04f 0100 	mov.w	r1, #0
 80063d4:	bf0c      	ite	eq
 80063d6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80063da:	2340      	movne	r3, #64	; 0x40
 80063dc:	2000      	movs	r0, #0
 80063de:	6031      	str	r1, [r6, #0]
 80063e0:	602b      	str	r3, [r5, #0]
 80063e2:	b016      	add	sp, #88	; 0x58
 80063e4:	bd70      	pop	{r4, r5, r6, pc}
 80063e6:	466a      	mov	r2, sp
 80063e8:	f000 f858 	bl	800649c <_fstat_r>
 80063ec:	2800      	cmp	r0, #0
 80063ee:	dbec      	blt.n	80063ca <__swhatbuf_r+0x12>
 80063f0:	9901      	ldr	r1, [sp, #4]
 80063f2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80063f6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80063fa:	4259      	negs	r1, r3
 80063fc:	4159      	adcs	r1, r3
 80063fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006402:	e7eb      	b.n	80063dc <__swhatbuf_r+0x24>

08006404 <__smakebuf_r>:
 8006404:	898b      	ldrh	r3, [r1, #12]
 8006406:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006408:	079d      	lsls	r5, r3, #30
 800640a:	4606      	mov	r6, r0
 800640c:	460c      	mov	r4, r1
 800640e:	d507      	bpl.n	8006420 <__smakebuf_r+0x1c>
 8006410:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006414:	6023      	str	r3, [r4, #0]
 8006416:	6123      	str	r3, [r4, #16]
 8006418:	2301      	movs	r3, #1
 800641a:	6163      	str	r3, [r4, #20]
 800641c:	b002      	add	sp, #8
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	ab01      	add	r3, sp, #4
 8006422:	466a      	mov	r2, sp
 8006424:	f7ff ffc8 	bl	80063b8 <__swhatbuf_r>
 8006428:	9900      	ldr	r1, [sp, #0]
 800642a:	4605      	mov	r5, r0
 800642c:	4630      	mov	r0, r6
 800642e:	f7ff fc0d 	bl	8005c4c <_malloc_r>
 8006432:	b948      	cbnz	r0, 8006448 <__smakebuf_r+0x44>
 8006434:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d4ef      	bmi.n	800641c <__smakebuf_r+0x18>
 800643c:	f023 0303 	bic.w	r3, r3, #3
 8006440:	f043 0302 	orr.w	r3, r3, #2
 8006444:	81a3      	strh	r3, [r4, #12]
 8006446:	e7e3      	b.n	8006410 <__smakebuf_r+0xc>
 8006448:	89a3      	ldrh	r3, [r4, #12]
 800644a:	6020      	str	r0, [r4, #0]
 800644c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006450:	81a3      	strh	r3, [r4, #12]
 8006452:	9b00      	ldr	r3, [sp, #0]
 8006454:	6163      	str	r3, [r4, #20]
 8006456:	9b01      	ldr	r3, [sp, #4]
 8006458:	6120      	str	r0, [r4, #16]
 800645a:	b15b      	cbz	r3, 8006474 <__smakebuf_r+0x70>
 800645c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006460:	4630      	mov	r0, r6
 8006462:	f000 f82d 	bl	80064c0 <_isatty_r>
 8006466:	b128      	cbz	r0, 8006474 <__smakebuf_r+0x70>
 8006468:	89a3      	ldrh	r3, [r4, #12]
 800646a:	f023 0303 	bic.w	r3, r3, #3
 800646e:	f043 0301 	orr.w	r3, r3, #1
 8006472:	81a3      	strh	r3, [r4, #12]
 8006474:	89a3      	ldrh	r3, [r4, #12]
 8006476:	431d      	orrs	r5, r3
 8006478:	81a5      	strh	r5, [r4, #12]
 800647a:	e7cf      	b.n	800641c <__smakebuf_r+0x18>

0800647c <_close_r>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4d06      	ldr	r5, [pc, #24]	; (8006498 <_close_r+0x1c>)
 8006480:	2300      	movs	r3, #0
 8006482:	4604      	mov	r4, r0
 8006484:	4608      	mov	r0, r1
 8006486:	602b      	str	r3, [r5, #0]
 8006488:	f7fa fc65 	bl	8000d56 <_close>
 800648c:	1c43      	adds	r3, r0, #1
 800648e:	d102      	bne.n	8006496 <_close_r+0x1a>
 8006490:	682b      	ldr	r3, [r5, #0]
 8006492:	b103      	cbz	r3, 8006496 <_close_r+0x1a>
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	bd38      	pop	{r3, r4, r5, pc}
 8006498:	2400026c 	.word	0x2400026c

0800649c <_fstat_r>:
 800649c:	b538      	push	{r3, r4, r5, lr}
 800649e:	4d07      	ldr	r5, [pc, #28]	; (80064bc <_fstat_r+0x20>)
 80064a0:	2300      	movs	r3, #0
 80064a2:	4604      	mov	r4, r0
 80064a4:	4608      	mov	r0, r1
 80064a6:	4611      	mov	r1, r2
 80064a8:	602b      	str	r3, [r5, #0]
 80064aa:	f7fa fc60 	bl	8000d6e <_fstat>
 80064ae:	1c43      	adds	r3, r0, #1
 80064b0:	d102      	bne.n	80064b8 <_fstat_r+0x1c>
 80064b2:	682b      	ldr	r3, [r5, #0]
 80064b4:	b103      	cbz	r3, 80064b8 <_fstat_r+0x1c>
 80064b6:	6023      	str	r3, [r4, #0]
 80064b8:	bd38      	pop	{r3, r4, r5, pc}
 80064ba:	bf00      	nop
 80064bc:	2400026c 	.word	0x2400026c

080064c0 <_isatty_r>:
 80064c0:	b538      	push	{r3, r4, r5, lr}
 80064c2:	4d06      	ldr	r5, [pc, #24]	; (80064dc <_isatty_r+0x1c>)
 80064c4:	2300      	movs	r3, #0
 80064c6:	4604      	mov	r4, r0
 80064c8:	4608      	mov	r0, r1
 80064ca:	602b      	str	r3, [r5, #0]
 80064cc:	f7fa fc5f 	bl	8000d8e <_isatty>
 80064d0:	1c43      	adds	r3, r0, #1
 80064d2:	d102      	bne.n	80064da <_isatty_r+0x1a>
 80064d4:	682b      	ldr	r3, [r5, #0]
 80064d6:	b103      	cbz	r3, 80064da <_isatty_r+0x1a>
 80064d8:	6023      	str	r3, [r4, #0]
 80064da:	bd38      	pop	{r3, r4, r5, pc}
 80064dc:	2400026c 	.word	0x2400026c

080064e0 <_lseek_r>:
 80064e0:	b538      	push	{r3, r4, r5, lr}
 80064e2:	4d07      	ldr	r5, [pc, #28]	; (8006500 <_lseek_r+0x20>)
 80064e4:	4604      	mov	r4, r0
 80064e6:	4608      	mov	r0, r1
 80064e8:	4611      	mov	r1, r2
 80064ea:	2200      	movs	r2, #0
 80064ec:	602a      	str	r2, [r5, #0]
 80064ee:	461a      	mov	r2, r3
 80064f0:	f7fa fc58 	bl	8000da4 <_lseek>
 80064f4:	1c43      	adds	r3, r0, #1
 80064f6:	d102      	bne.n	80064fe <_lseek_r+0x1e>
 80064f8:	682b      	ldr	r3, [r5, #0]
 80064fa:	b103      	cbz	r3, 80064fe <_lseek_r+0x1e>
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	bd38      	pop	{r3, r4, r5, pc}
 8006500:	2400026c 	.word	0x2400026c

08006504 <_read_r>:
 8006504:	b538      	push	{r3, r4, r5, lr}
 8006506:	4d07      	ldr	r5, [pc, #28]	; (8006524 <_read_r+0x20>)
 8006508:	4604      	mov	r4, r0
 800650a:	4608      	mov	r0, r1
 800650c:	4611      	mov	r1, r2
 800650e:	2200      	movs	r2, #0
 8006510:	602a      	str	r2, [r5, #0]
 8006512:	461a      	mov	r2, r3
 8006514:	f7fa fc02 	bl	8000d1c <_read>
 8006518:	1c43      	adds	r3, r0, #1
 800651a:	d102      	bne.n	8006522 <_read_r+0x1e>
 800651c:	682b      	ldr	r3, [r5, #0]
 800651e:	b103      	cbz	r3, 8006522 <_read_r+0x1e>
 8006520:	6023      	str	r3, [r4, #0]
 8006522:	bd38      	pop	{r3, r4, r5, pc}
 8006524:	2400026c 	.word	0x2400026c

08006528 <_sbrk_r>:
 8006528:	b538      	push	{r3, r4, r5, lr}
 800652a:	4d06      	ldr	r5, [pc, #24]	; (8006544 <_sbrk_r+0x1c>)
 800652c:	2300      	movs	r3, #0
 800652e:	4604      	mov	r4, r0
 8006530:	4608      	mov	r0, r1
 8006532:	602b      	str	r3, [r5, #0]
 8006534:	f7fa fc44 	bl	8000dc0 <_sbrk>
 8006538:	1c43      	adds	r3, r0, #1
 800653a:	d102      	bne.n	8006542 <_sbrk_r+0x1a>
 800653c:	682b      	ldr	r3, [r5, #0]
 800653e:	b103      	cbz	r3, 8006542 <_sbrk_r+0x1a>
 8006540:	6023      	str	r3, [r4, #0]
 8006542:	bd38      	pop	{r3, r4, r5, pc}
 8006544:	2400026c 	.word	0x2400026c

08006548 <_write_r>:
 8006548:	b538      	push	{r3, r4, r5, lr}
 800654a:	4d07      	ldr	r5, [pc, #28]	; (8006568 <_write_r+0x20>)
 800654c:	4604      	mov	r4, r0
 800654e:	4608      	mov	r0, r1
 8006550:	4611      	mov	r1, r2
 8006552:	2200      	movs	r2, #0
 8006554:	602a      	str	r2, [r5, #0]
 8006556:	461a      	mov	r2, r3
 8006558:	f7fa faca 	bl	8000af0 <_write>
 800655c:	1c43      	adds	r3, r0, #1
 800655e:	d102      	bne.n	8006566 <_write_r+0x1e>
 8006560:	682b      	ldr	r3, [r5, #0]
 8006562:	b103      	cbz	r3, 8006566 <_write_r+0x1e>
 8006564:	6023      	str	r3, [r4, #0]
 8006566:	bd38      	pop	{r3, r4, r5, pc}
 8006568:	2400026c 	.word	0x2400026c

0800656c <abort>:
 800656c:	b508      	push	{r3, lr}
 800656e:	2006      	movs	r0, #6
 8006570:	f000 f878 	bl	8006664 <raise>
 8006574:	2001      	movs	r0, #1
 8006576:	f7fa fbc7 	bl	8000d08 <_exit>
	...

0800657c <_free_r>:
 800657c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800657e:	2900      	cmp	r1, #0
 8006580:	d044      	beq.n	800660c <_free_r+0x90>
 8006582:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006586:	9001      	str	r0, [sp, #4]
 8006588:	2b00      	cmp	r3, #0
 800658a:	f1a1 0404 	sub.w	r4, r1, #4
 800658e:	bfb8      	it	lt
 8006590:	18e4      	addlt	r4, r4, r3
 8006592:	f7ff fe19 	bl	80061c8 <__malloc_lock>
 8006596:	4a1e      	ldr	r2, [pc, #120]	; (8006610 <_free_r+0x94>)
 8006598:	9801      	ldr	r0, [sp, #4]
 800659a:	6813      	ldr	r3, [r2, #0]
 800659c:	b933      	cbnz	r3, 80065ac <_free_r+0x30>
 800659e:	6063      	str	r3, [r4, #4]
 80065a0:	6014      	str	r4, [r2, #0]
 80065a2:	b003      	add	sp, #12
 80065a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065a8:	f7ff be14 	b.w	80061d4 <__malloc_unlock>
 80065ac:	42a3      	cmp	r3, r4
 80065ae:	d908      	bls.n	80065c2 <_free_r+0x46>
 80065b0:	6825      	ldr	r5, [r4, #0]
 80065b2:	1961      	adds	r1, r4, r5
 80065b4:	428b      	cmp	r3, r1
 80065b6:	bf01      	itttt	eq
 80065b8:	6819      	ldreq	r1, [r3, #0]
 80065ba:	685b      	ldreq	r3, [r3, #4]
 80065bc:	1949      	addeq	r1, r1, r5
 80065be:	6021      	streq	r1, [r4, #0]
 80065c0:	e7ed      	b.n	800659e <_free_r+0x22>
 80065c2:	461a      	mov	r2, r3
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	b10b      	cbz	r3, 80065cc <_free_r+0x50>
 80065c8:	42a3      	cmp	r3, r4
 80065ca:	d9fa      	bls.n	80065c2 <_free_r+0x46>
 80065cc:	6811      	ldr	r1, [r2, #0]
 80065ce:	1855      	adds	r5, r2, r1
 80065d0:	42a5      	cmp	r5, r4
 80065d2:	d10b      	bne.n	80065ec <_free_r+0x70>
 80065d4:	6824      	ldr	r4, [r4, #0]
 80065d6:	4421      	add	r1, r4
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	42a3      	cmp	r3, r4
 80065dc:	6011      	str	r1, [r2, #0]
 80065de:	d1e0      	bne.n	80065a2 <_free_r+0x26>
 80065e0:	681c      	ldr	r4, [r3, #0]
 80065e2:	685b      	ldr	r3, [r3, #4]
 80065e4:	6053      	str	r3, [r2, #4]
 80065e6:	440c      	add	r4, r1
 80065e8:	6014      	str	r4, [r2, #0]
 80065ea:	e7da      	b.n	80065a2 <_free_r+0x26>
 80065ec:	d902      	bls.n	80065f4 <_free_r+0x78>
 80065ee:	230c      	movs	r3, #12
 80065f0:	6003      	str	r3, [r0, #0]
 80065f2:	e7d6      	b.n	80065a2 <_free_r+0x26>
 80065f4:	6825      	ldr	r5, [r4, #0]
 80065f6:	1961      	adds	r1, r4, r5
 80065f8:	428b      	cmp	r3, r1
 80065fa:	bf04      	itt	eq
 80065fc:	6819      	ldreq	r1, [r3, #0]
 80065fe:	685b      	ldreq	r3, [r3, #4]
 8006600:	6063      	str	r3, [r4, #4]
 8006602:	bf04      	itt	eq
 8006604:	1949      	addeq	r1, r1, r5
 8006606:	6021      	streq	r1, [r4, #0]
 8006608:	6054      	str	r4, [r2, #4]
 800660a:	e7ca      	b.n	80065a2 <_free_r+0x26>
 800660c:	b003      	add	sp, #12
 800660e:	bd30      	pop	{r4, r5, pc}
 8006610:	24000264 	.word	0x24000264

08006614 <_raise_r>:
 8006614:	291f      	cmp	r1, #31
 8006616:	b538      	push	{r3, r4, r5, lr}
 8006618:	4604      	mov	r4, r0
 800661a:	460d      	mov	r5, r1
 800661c:	d904      	bls.n	8006628 <_raise_r+0x14>
 800661e:	2316      	movs	r3, #22
 8006620:	6003      	str	r3, [r0, #0]
 8006622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800662a:	b112      	cbz	r2, 8006632 <_raise_r+0x1e>
 800662c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006630:	b94b      	cbnz	r3, 8006646 <_raise_r+0x32>
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f830 	bl	8006698 <_getpid_r>
 8006638:	462a      	mov	r2, r5
 800663a:	4601      	mov	r1, r0
 800663c:	4620      	mov	r0, r4
 800663e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006642:	f000 b817 	b.w	8006674 <_kill_r>
 8006646:	2b01      	cmp	r3, #1
 8006648:	d00a      	beq.n	8006660 <_raise_r+0x4c>
 800664a:	1c59      	adds	r1, r3, #1
 800664c:	d103      	bne.n	8006656 <_raise_r+0x42>
 800664e:	2316      	movs	r3, #22
 8006650:	6003      	str	r3, [r0, #0]
 8006652:	2001      	movs	r0, #1
 8006654:	e7e7      	b.n	8006626 <_raise_r+0x12>
 8006656:	2400      	movs	r4, #0
 8006658:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800665c:	4628      	mov	r0, r5
 800665e:	4798      	blx	r3
 8006660:	2000      	movs	r0, #0
 8006662:	e7e0      	b.n	8006626 <_raise_r+0x12>

08006664 <raise>:
 8006664:	4b02      	ldr	r3, [pc, #8]	; (8006670 <raise+0xc>)
 8006666:	4601      	mov	r1, r0
 8006668:	6818      	ldr	r0, [r3, #0]
 800666a:	f7ff bfd3 	b.w	8006614 <_raise_r>
 800666e:	bf00      	nop
 8006670:	24000068 	.word	0x24000068

08006674 <_kill_r>:
 8006674:	b538      	push	{r3, r4, r5, lr}
 8006676:	4d07      	ldr	r5, [pc, #28]	; (8006694 <_kill_r+0x20>)
 8006678:	2300      	movs	r3, #0
 800667a:	4604      	mov	r4, r0
 800667c:	4608      	mov	r0, r1
 800667e:	4611      	mov	r1, r2
 8006680:	602b      	str	r3, [r5, #0]
 8006682:	f7fa fb31 	bl	8000ce8 <_kill>
 8006686:	1c43      	adds	r3, r0, #1
 8006688:	d102      	bne.n	8006690 <_kill_r+0x1c>
 800668a:	682b      	ldr	r3, [r5, #0]
 800668c:	b103      	cbz	r3, 8006690 <_kill_r+0x1c>
 800668e:	6023      	str	r3, [r4, #0]
 8006690:	bd38      	pop	{r3, r4, r5, pc}
 8006692:	bf00      	nop
 8006694:	2400026c 	.word	0x2400026c

08006698 <_getpid_r>:
 8006698:	f7fa bb1e 	b.w	8000cd8 <_getpid>

0800669c <_init>:
 800669c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800669e:	bf00      	nop
 80066a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066a2:	bc08      	pop	{r3}
 80066a4:	469e      	mov	lr, r3
 80066a6:	4770      	bx	lr

080066a8 <_fini>:
 80066a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066aa:	bf00      	nop
 80066ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80066ae:	bc08      	pop	{r3}
 80066b0:	469e      	mov	lr, r3
 80066b2:	4770      	bx	lr
